
christmas-2023_SD_I2S-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a4  080068a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080068a4  080068a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a4  080068a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080068ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004350  2000000c  080068b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000435c  080068b8  0002435c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d094  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025af  00000000  00000000  0002d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00030258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac26  00000000  00000000  00030d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f42a  00000000  00000000  0004b926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095eb3  00000000  00000000  0005ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  000f0c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08006744 	.word	0x08006744

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08006744 	.word	0x08006744

08000224 <HAL_I2S_TxCpltCallback>:
volatile uint16_t* signal_play_buff = NULL;
volatile uint16_t* signal_read_buff = NULL;
volatile uint16_t signal_buff1[4096];
volatile uint16_t signal_buff2[4096];

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if(end_of_file_reached)
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <HAL_I2S_TxCpltCallback+0x4c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d118      	bne.n	8000268 <HAL_I2S_TxCpltCallback+0x44>
        return;

    volatile uint16_t* temp = signal_play_buff;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	60fb      	str	r3, [r7, #12]
    signal_play_buff = signal_read_buff;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000242:	6013      	str	r3, [r2, #0]
    signal_read_buff = temp;
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6013      	str	r3, [r2, #0]

    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	60bb      	str	r3, [r7, #8]
    HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_play_buff, nsamples);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	b292      	uxth	r2, r2
 8000258:	4619      	mov	r1, r3
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_I2S_TxCpltCallback+0x58>)
 800025c:	f001 f920 	bl	80014a0 <HAL_I2S_Transmit_IT>
    read_next_chunk = true;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <HAL_I2S_TxCpltCallback+0x5c>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e000      	b.n	800026a <HAL_I2S_TxCpltCallback+0x46>
        return;
 8000268:	bf00      	nop
}
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000318 	.word	0x20000318
 8000274:	2000031c 	.word	0x2000031c
 8000278:	20000320 	.word	0x20000320
 800027c:	20000028 	.word	0x20000028
 8000280:	20000319 	.word	0x20000319

08000284 <playWavFile>:

int playWavFile(const char* fname) {
 8000284:	b580      	push	{r7, lr}
 8000286:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800028a:	af00      	add	r7, sp, #0
 800028c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000290:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8000294:	6018      	str	r0, [r3, #0]

    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 8000296:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800029a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800029e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80002a2:	2201      	movs	r2, #1
 80002a4:	6819      	ldr	r1, [r3, #0]
 80002a6:	f005 fc03 	bl	8005ab0 <f_open>
 80002aa:	4603      	mov	r3, r0
 80002ac:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if(res != FR_OK) {
 80002b0:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <playWavFile+0x38>
        return EXIT_FAILURE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e214      	b.n	80006e6 <playWavFile+0x462>
    }


    unsigned int bytesRead;
    uint8_t header[44];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 80002bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002c0:	f107 010c 	add.w	r1, r7, #12
 80002c4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80002c8:	222c      	movs	r2, #44	; 0x2c
 80002ca:	f005 fe6a 	bl	8005fa2 <f_read>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if(res != FR_OK) {
 80002d4:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d006      	beq.n	80002ea <playWavFile+0x66>
        f_close(&file);
 80002dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002e0:	4618      	mov	r0, r3
 80002e2:	f006 f883 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e1fd      	b.n	80006e6 <playWavFile+0x462>
    }

    if(memcmp((const char*)header, "RIFF", 4) != 0) {
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	2204      	movs	r2, #4
 80002f0:	49d1      	ldr	r1, [pc, #836]	; (8000638 <playWavFile+0x3b4>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f006 fa0e 	bl	8006714 <memcmp>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d006      	beq.n	800030c <playWavFile+0x88>
        f_close(&file);
 80002fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000302:	4618      	mov	r0, r3
 8000304:	f006 f872 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 8000308:	2301      	movs	r3, #1
 800030a:	e1ec      	b.n	80006e6 <playWavFile+0x462>
    }

    if(memcmp((const char*)header + 8, "WAVEfmt ", 8) != 0) {
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	3308      	adds	r3, #8
 8000312:	2208      	movs	r2, #8
 8000314:	49c9      	ldr	r1, [pc, #804]	; (800063c <playWavFile+0x3b8>)
 8000316:	4618      	mov	r0, r3
 8000318:	f006 f9fc 	bl	8006714 <memcmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d006      	beq.n	8000330 <playWavFile+0xac>
        f_close(&file);
 8000322:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000326:	4618      	mov	r0, r3
 8000328:	f006 f860 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 800032c:	2301      	movs	r3, #1
 800032e:	e1da      	b.n	80006e6 <playWavFile+0x462>
    }

    if(memcmp((const char*)header + 36, "data", 4) != 0) {
 8000330:	f107 030c 	add.w	r3, r7, #12
 8000334:	3324      	adds	r3, #36	; 0x24
 8000336:	2204      	movs	r2, #4
 8000338:	49c1      	ldr	r1, [pc, #772]	; (8000640 <playWavFile+0x3bc>)
 800033a:	4618      	mov	r0, r3
 800033c:	f006 f9ea 	bl	8006714 <memcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d006      	beq.n	8000354 <playWavFile+0xd0>
        f_close(&file);
 8000346:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800034a:	4618      	mov	r0, r3
 800034c:	f006 f84e 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 8000350:	2301      	movs	r3, #1
 8000352:	e1c8      	b.n	80006e6 <playWavFile+0x462>
    }

    uint32_t fileSize = 8 + (header[4] | (header[5] << 8) | (header[6] << 16) | (header[7] << 24));
 8000354:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000358:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800035c:	791b      	ldrb	r3, [r3, #4]
 800035e:	461a      	mov	r2, r3
 8000360:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000364:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000368:	795b      	ldrb	r3, [r3, #5]
 800036a:	021b      	lsls	r3, r3, #8
 800036c:	431a      	orrs	r2, r3
 800036e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000372:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000376:	799b      	ldrb	r3, [r3, #6]
 8000378:	041b      	lsls	r3, r3, #16
 800037a:	431a      	orrs	r2, r3
 800037c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000380:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000384:	79db      	ldrb	r3, [r3, #7]
 8000386:	061b      	lsls	r3, r3, #24
 8000388:	4313      	orrs	r3, r2
 800038a:	3308      	adds	r3, #8
 800038c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
    uint32_t headerSizeLeft = header[16] | (header[17] << 8) | (header[18] << 16) | (header[19] << 24);
 8000390:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000394:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000398:	7c1b      	ldrb	r3, [r3, #16]
 800039a:	461a      	mov	r2, r3
 800039c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003a0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80003a4:	7c5b      	ldrb	r3, [r3, #17]
 80003a6:	021b      	lsls	r3, r3, #8
 80003a8:	431a      	orrs	r2, r3
 80003aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003ae:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80003b2:	7c9b      	ldrb	r3, [r3, #18]
 80003b4:	041b      	lsls	r3, r3, #16
 80003b6:	431a      	orrs	r2, r3
 80003b8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003bc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80003c0:	7cdb      	ldrb	r3, [r3, #19]
 80003c2:	061b      	lsls	r3, r3, #24
 80003c4:	4313      	orrs	r3, r2
 80003c6:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
    uint16_t compression = header[20] | (header[21] << 8);
 80003ca:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003ce:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80003d2:	7d1b      	ldrb	r3, [r3, #20]
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003da:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80003de:	7d5b      	ldrb	r3, [r3, #21]
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	b21b      	sxth	r3, r3
 80003e4:	4313      	orrs	r3, r2
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	f8a7 327e 	strh.w	r3, [r7, #638]	; 0x27e
    uint16_t channelsNum = header[22] | (header[23] << 8);
 80003ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003f0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80003f4:	7d9b      	ldrb	r3, [r3, #22]
 80003f6:	b21a      	sxth	r2, r3
 80003f8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80003fc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000400:	7ddb      	ldrb	r3, [r3, #23]
 8000402:	021b      	lsls	r3, r3, #8
 8000404:	b21b      	sxth	r3, r3
 8000406:	4313      	orrs	r3, r2
 8000408:	b21b      	sxth	r3, r3
 800040a:	f8a7 327c 	strh.w	r3, [r7, #636]	; 0x27c
    uint32_t sampleRate = header[24] | (header[25] << 8) | (header[26] << 16) | (header[27] << 24);
 800040e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000412:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000416:	7e1b      	ldrb	r3, [r3, #24]
 8000418:	461a      	mov	r2, r3
 800041a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800041e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000422:	7e5b      	ldrb	r3, [r3, #25]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	431a      	orrs	r2, r3
 8000428:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800042c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000430:	7e9b      	ldrb	r3, [r3, #26]
 8000432:	041b      	lsls	r3, r3, #16
 8000434:	431a      	orrs	r2, r3
 8000436:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800043a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800043e:	7edb      	ldrb	r3, [r3, #27]
 8000440:	061b      	lsls	r3, r3, #24
 8000442:	4313      	orrs	r3, r2
 8000444:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
    uint32_t bytesPerSecond = header[28] | (header[29] << 8) | (header[30] << 16) | (header[31] << 24);
 8000448:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800044c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000450:	7f1b      	ldrb	r3, [r3, #28]
 8000452:	461a      	mov	r2, r3
 8000454:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000458:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800045c:	7f5b      	ldrb	r3, [r3, #29]
 800045e:	021b      	lsls	r3, r3, #8
 8000460:	431a      	orrs	r2, r3
 8000462:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000466:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800046a:	7f9b      	ldrb	r3, [r3, #30]
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	431a      	orrs	r2, r3
 8000470:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000474:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000478:	7fdb      	ldrb	r3, [r3, #31]
 800047a:	061b      	lsls	r3, r3, #24
 800047c:	4313      	orrs	r3, r2
 800047e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    uint16_t bytesPerSample = header[32] | (header[33] << 8);
 8000482:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000486:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800048a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800048e:	b21a      	sxth	r2, r3
 8000490:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000494:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000498:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	b21b      	sxth	r3, r3
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b21b      	sxth	r3, r3
 80004a4:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
    uint16_t bitsPerSamplePerChannel = header[34] | (header[35] << 8);
 80004a8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80004ac:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80004b0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80004b4:	b21a      	sxth	r2, r3
 80004b6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80004ba:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80004be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	f8a7 3270 	strh.w	r3, [r7, #624]	; 0x270
    uint32_t dataSize = header[40] | (header[41] << 8) | (header[42] << 16) | (header[43] << 24);
 80004ce:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80004d2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80004d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004da:	461a      	mov	r2, r3
 80004dc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80004e0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80004e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	431a      	orrs	r2, r3
 80004ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80004f0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80004f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80004f8:	041b      	lsls	r3, r3, #16
 80004fa:	431a      	orrs	r2, r3
 80004fc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000500:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000504:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000508:	061b      	lsls	r3, r3, #24
 800050a:	4313      	orrs	r3, r2
 800050c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
//        "Data size: %ld\r\n"
//        "------------------\r\n",
//        fileSize, headerSizeLeft, compression, channelsNum, sampleRate, bytesPerSecond, bytesPerSample,
//        bitsPerSamplePerChannel, dataSize);

    if(headerSizeLeft != 16) {
 8000510:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8000514:	2b10      	cmp	r3, #16
 8000516:	d006      	beq.n	8000526 <playWavFile+0x2a2>
        //UART_Printf("Wrong `headerSizeLeft` value, 16 expected\r\n");
        f_close(&file);
 8000518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800051c:	4618      	mov	r0, r3
 800051e:	f005 ff65 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 8000522:	2301      	movs	r3, #1
 8000524:	e0df      	b.n	80006e6 <playWavFile+0x462>
    }

    if(compression != 1) {
 8000526:	f8b7 327e 	ldrh.w	r3, [r7, #638]	; 0x27e
 800052a:	2b01      	cmp	r3, #1
 800052c:	d006      	beq.n	800053c <playWavFile+0x2b8>
        //UART_Printf("Wrong `compression` value, 1 expected\r\n");
        f_close(&file);
 800052e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000532:	4618      	mov	r0, r3
 8000534:	f005 ff5a 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 8000538:	2301      	movs	r3, #1
 800053a:	e0d4      	b.n	80006e6 <playWavFile+0x462>
    }

    if(channelsNum != 2) {
 800053c:	f8b7 327c 	ldrh.w	r3, [r7, #636]	; 0x27c
 8000540:	2b02      	cmp	r3, #2
 8000542:	d006      	beq.n	8000552 <playWavFile+0x2ce>
        //UART_Printf("Wrong `channelsNum` value, 2 expected\r\n");
        f_close(&file);
 8000544:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000548:	4618      	mov	r0, r3
 800054a:	f005 ff4f 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 800054e:	2301      	movs	r3, #1
 8000550:	e0c9      	b.n	80006e6 <playWavFile+0x462>
    }

    if((sampleRate != 44100) || (bytesPerSample != 4) || (bitsPerSamplePerChannel != 16) || (bytesPerSecond != 44100*2*2)
 8000552:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8000556:	f64a 4244 	movw	r2, #44100	; 0xac44
 800055a:	4293      	cmp	r3, r2
 800055c:	d111      	bne.n	8000582 <playWavFile+0x2fe>
 800055e:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 8000562:	2b04      	cmp	r3, #4
 8000564:	d10d      	bne.n	8000582 <playWavFile+0x2fe>
 8000566:	f8b7 3270 	ldrh.w	r3, [r7, #624]	; 0x270
 800056a:	2b10      	cmp	r3, #16
 800056c:	d109      	bne.n	8000582 <playWavFile+0x2fe>
 800056e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000572:	4a34      	ldr	r2, [pc, #208]	; (8000644 <playWavFile+0x3c0>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d104      	bne.n	8000582 <playWavFile+0x2fe>
       || (dataSize < sizeof(signal_buff1) + sizeof(signal_buff2))) {
 8000578:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800057c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000580:	d206      	bcs.n	8000590 <playWavFile+0x30c>
        //UART_Printf("Wrong file format, 16 bit file with sample rate 44100 expected\r\n");
        f_close(&file);
 8000582:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000586:	4618      	mov	r0, r3
 8000588:	f005 ff30 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 800058c:	2301      	movs	r3, #1
 800058e:	e0aa      	b.n	80006e6 <playWavFile+0x462>
    }

    res = f_read(&file, (uint8_t*)signal_buff1, sizeof(signal_buff1), &bytesRead);
 8000590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000594:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800059c:	492a      	ldr	r1, [pc, #168]	; (8000648 <playWavFile+0x3c4>)
 800059e:	f005 fd00 	bl	8005fa2 <f_read>
 80005a2:	4603      	mov	r3, r0
 80005a4:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if(res != FR_OK) {
 80005a8:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <playWavFile+0x33a>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 80005b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 ff19 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e093      	b.n	80006e6 <playWavFile+0x462>
    }

    res = f_read(&file, (uint8_t*)signal_buff2, sizeof(signal_buff2), &bytesRead);
 80005be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80005c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ca:	4920      	ldr	r1, [pc, #128]	; (800064c <playWavFile+0x3c8>)
 80005cc:	f005 fce9 	bl	8005fa2 <f_read>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if(res != FR_OK) {
 80005d6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <playWavFile+0x368>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 80005de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 ff02 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e07c      	b.n	80006e6 <playWavFile+0x462>
    }

    read_next_chunk = true;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <playWavFile+0x3cc>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
    end_of_file_reached = false;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <playWavFile+0x3d0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
    signal_play_buff = signal_buff1;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <playWavFile+0x3d4>)
 80005fa:	4a13      	ldr	r2, [pc, #76]	; (8000648 <playWavFile+0x3c4>)
 80005fc:	601a      	str	r2, [r3, #0]
    signal_read_buff = signal_buff2;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <playWavFile+0x3d8>)
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <playWavFile+0x3c8>)
 8000602:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef hal_res;
    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
    hal_res = HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_buff1, nsamples);
 800060c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000610:	b29b      	uxth	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <playWavFile+0x3c4>)
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <playWavFile+0x3dc>)
 8000618:	f000 ff42 	bl	80014a0 <HAL_I2S_Transmit_IT>
 800061c:	4603      	mov	r3, r0
 800061e:	f887 326b 	strb.w	r3, [r7, #619]	; 0x26b
    // hal_res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal_buff1, nsamples, 2000);
    if(hal_res != HAL_OK) {
 8000622:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 8000626:	2b00      	cmp	r3, #0
 8000628:	d046      	beq.n	80006b8 <playWavFile+0x434>
        //UART_Printf("I2S - HAL_I2S_Transmit failed, hal_res = %d!\r\n", hal_res);
        f_close(&file);
 800062a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fedc 	bl	80063ec <f_close>
        return EXIT_FAILURE;
 8000634:	2301      	movs	r3, #1
 8000636:	e056      	b.n	80006e6 <playWavFile+0x462>
 8000638:	0800675c 	.word	0x0800675c
 800063c:	08006764 	.word	0x08006764
 8000640:	08006770 	.word	0x08006770
 8000644:	0002b110 	.word	0x0002b110
 8000648:	20000324 	.word	0x20000324
 800064c:	20002324 	.word	0x20002324
 8000650:	20000319 	.word	0x20000319
 8000654:	20000318 	.word	0x20000318
 8000658:	2000031c 	.word	0x2000031c
 800065c:	20000320 	.word	0x20000320
 8000660:	20000028 	.word	0x20000028
    }

    while(dataSize >= sizeof(signal_buff1)) {
        if(!read_next_chunk) {
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <playWavFile+0x46c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f083 0301 	eor.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d000      	beq.n	8000676 <playWavFile+0x3f2>
            continue;
 8000674:	e020      	b.n	80006b8 <playWavFile+0x434>
        }

        read_next_chunk = false;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <playWavFile+0x46c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

        res = f_read(&file, (uint8_t*)signal_read_buff, sizeof(signal_buff1), &bytesRead);
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <playWavFile+0x470>)
 800067e:	6819      	ldr	r1, [r3, #0]
 8000680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000684:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800068c:	f005 fc89 	bl	8005fa2 <f_read>
 8000690:	4603      	mov	r3, r0
 8000692:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
        if(res != FR_OK) {
 8000696:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <playWavFile+0x428>
            //UART_Printf("f_read() failed, res = %d\r\n", res);
            f_close(&file);
 800069e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 fea2 	bl	80063ec <f_close>
            return EXIT_FAILURE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e01c      	b.n	80006e6 <playWavFile+0x462>
        }

        dataSize -= sizeof(signal_buff1);
 80006ac:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80006b0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80006b4:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    while(dataSize >= sizeof(signal_buff1)) {
 80006b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80006bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c0:	d2d0      	bcs.n	8000664 <playWavFile+0x3e0>
    }

    end_of_file_reached = true;
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <playWavFile+0x474>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]

    res = f_close(&file);
 80006c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fe8d 	bl	80063ec <f_close>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
    if(res != FR_OK) {
 80006d8:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <playWavFile+0x460>
        //UART_Printf("f_close() failed, res = %d\r\n", res);
        return EXIT_FAILURE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <playWavFile+0x462>
    }

    return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000319 	.word	0x20000319
 80006f4:	20000320 	.word	0x20000320
 80006f8:	20000318 	.word	0x20000318

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fa8f 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f82d 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 f8cf 	bl	80008ac <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800070e:	f000 f8ad 	bl	800086c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000712:	f003 fa47 	bl	8003ba4 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000716:	f000 f881 	bl	800081c <MX_I2S2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  FRESULT res = f_mount(&fs, "XMAS-23", 1);
 800071a:	2201      	movs	r2, #1
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <main+0x58>)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <main+0x5c>)
 8000720:	f005 f97e 	bl	8005a20 <f_mount>
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]
   if(res != FR_OK) {
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <main+0x36>
	   return EXIT_FAILURE;
 800072e:	2301      	movs	r3, #1
 8000730:	e00b      	b.n	800074a <main+0x4e>

  while (1)
  {


	  playWavFile("canS.wav");
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0x60>)
 8000734:	f7ff fda6 	bl	8000284 <playWavFile>
	  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <main+0x64>)
 800073a:	f000 fdcb 	bl	80012d4 <HAL_I2S_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f6      	beq.n	8000732 <main+0x36>
	   {
	     Error_Handler();
 8000744:	f000 f936 	bl	80009b4 <Error_Handler>
	  playWavFile("canS.wav");
 8000748:	e7f3      	b.n	8000732 <main+0x36>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	08006778 	.word	0x08006778
 8000758:	200000e8 	.word	0x200000e8
 800075c:	08006780 	.word	0x08006780
 8000760:	20000028 	.word	0x20000028

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	; 0x58
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076e:	2228      	movs	r2, #40	; 0x28
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f005 ffde 	bl	8006734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80007b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 ffb6 	bl	8001730 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007ca:	f000 f8f3 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fa22 	bl	8001c34 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007f6:	f000 f8dd 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80007fa:	2304      	movs	r3, #4
 80007fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fb91 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000810:	f000 f8d0 	bl	80009b4 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3758      	adds	r7, #88	; 0x58
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_I2S2_Init+0x48>)
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <MX_I2S2_Init+0x4c>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2S2_Init+0x48>)
 8000828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_I2S2_Init+0x48>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_I2S2_Init+0x48>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_I2S2_Init+0x48>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_I2S2_Init+0x48>)
 8000842:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000846:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2S2_Init+0x48>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2S2_Init+0x48>)
 8000850:	f000 fd40 	bl	80012d4 <HAL_I2S_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800085a:	f000 f8ab 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000028 	.word	0x20000028
 8000868:	40003800 	.word	0x40003800

0800086c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 8000872:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <MX_SDIO_SD_Init+0x3c>)
 8000874:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <MX_SDIO_SD_Init+0x38>)
 8000896:	2204      	movs	r2, #4
 8000898:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000064 	.word	0x20000064
 80008a8:	40018000 	.word	0x40018000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c0:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a38      	ldr	r2, [pc, #224]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0320 	and.w	r3, r3, #32
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008f6:	f043 0310 	orr.w	r3, r3, #16
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_GPIO_Init+0xfc>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0310 	and.w	r3, r3, #16
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_GPIO_Init+0xfc>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <MX_GPIO_Init+0xfc>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <MX_GPIO_Init+0xfc>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2S_AMP_SD_GPIO_Port, I2S_AMP_SD_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2104      	movs	r1, #4
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_GPIO_Init+0x100>)
 8000926:	f000 fcbc 	bl	80012a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	4820      	ldr	r0, [pc, #128]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000930:	f000 fcb7 	bl	80012a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2S_AMP_SD_Pin */
  GPIO_InitStruct.Pin = I2S_AMP_SD_Pin;
 8000934:	2304      	movs	r3, #4
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S_AMP_SD_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_GPIO_Init+0x100>)
 800094c:	f000 fafe 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 8000950:	2320      	movs	r3, #32
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2302      	movs	r3, #2
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000968:	f000 faf0 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0x104>)
 8000980:	f000 fae4 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_FAKE_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_FAKE_Pin;
 8000984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CD_FAKE_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_GPIO_Init+0x100>)
 800099a:	f000 fad7 	bl	8000f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40011000 	.word	0x40011000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_MspInit+0x5c>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_MspInit+0x5c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_MspInit+0x5c>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x5c>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x5c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x5c>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_MspInit+0x60>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_MspInit+0x60>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010000 	.word	0x40010000

08000a24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <HAL_I2S_MspInit+0x84>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d12c      	bne.n	8000a9e <HAL_I2S_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_I2S_MspInit+0x88>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <HAL_I2S_MspInit+0x88>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_I2S_MspInit+0x88>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_I2S_MspInit+0x88>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <HAL_I2S_MspInit+0x88>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_I2S_MspInit+0x88>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000a74:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <HAL_I2S_MspInit+0x8c>)
 8000a8a:	f000 fa5f 	bl	8000f4c <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2024      	movs	r0, #36	; 0x24
 8000a94:	f000 fa23 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a98:	2024      	movs	r0, #36	; 0x24
 8000a9a:	f000 fa3c 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40003800 	.word	0x40003800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_SD_MspInit+0xa4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d13c      	bne.n	8000b4e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6153      	str	r3, [r2, #20]
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000b0a:	f043 0320 	orr.w	r3, r3, #32
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_SD_MspInit+0xa8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0320 	and.w	r3, r3, #32
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000b1c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <HAL_SD_MspInit+0xac>)
 8000b32:	f000 fa0b 	bl	8000f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b36:	2304      	movs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b42:	f107 0318 	add.w	r3, r7, #24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <HAL_SD_MspInit+0xb0>)
 8000b4a:	f000 f9ff 	bl	8000f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40018000 	.word	0x40018000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40011400 	.word	0x40011400

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f87f 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <SPI2_IRQHandler+0x10>)
 8000bbe:	f000 fcdf 	bl	8001580 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000028 	.word	0x20000028

08000bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd8:	f7ff fff8 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bde:	490c      	ldr	r1, [pc, #48]	; (8000c10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf4:	4c09      	ldr	r4, [pc, #36]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c02:	f005 fd63 	bl	80066cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c06:	f7ff fd79 	bl	80006fc <main>
  bx lr
 8000c0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	080068ac 	.word	0x080068ac
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	2000435c 	.word	0x2000435c

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x28>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x28>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f947 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff febe 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f95f 	bl	8000f32 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f927 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x1c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20004324 	.word	0x20004324

08000cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <HAL_GetTick+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20004324 	.word	0x20004324

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff fff0 	bl	8000cd4 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffe0 	bl	8000cd4 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <__NVIC_EnableIRQ+0x34>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f7ff ff90 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff2d 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff42 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff90 	bl	8000e20 <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5f 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff35 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa2 	bl	8000e84 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e179      	b.n	8001254 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f60:	2201      	movs	r2, #1
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8168 	bne.w	800124e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4a96      	ldr	r2, [pc, #600]	; (80011dc <HAL_GPIO_Init+0x290>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d05e      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f88:	4a94      	ldr	r2, [pc, #592]	; (80011dc <HAL_GPIO_Init+0x290>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d875      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f8e:	4a94      	ldr	r2, [pc, #592]	; (80011e0 <HAL_GPIO_Init+0x294>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d058      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f94:	4a92      	ldr	r2, [pc, #584]	; (80011e0 <HAL_GPIO_Init+0x294>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d86f      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f9a:	4a92      	ldr	r2, [pc, #584]	; (80011e4 <HAL_GPIO_Init+0x298>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d052      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fa0:	4a90      	ldr	r2, [pc, #576]	; (80011e4 <HAL_GPIO_Init+0x298>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d869      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fa6:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <HAL_GPIO_Init+0x29c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d04c      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fac:	4a8e      	ldr	r2, [pc, #568]	; (80011e8 <HAL_GPIO_Init+0x29c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d863      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fb2:	4a8e      	ldr	r2, [pc, #568]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d046      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a8c      	ldr	r2, [pc, #560]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d85d      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d82a      	bhi.n	8001018 <HAL_GPIO_Init+0xcc>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d859      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <HAL_GPIO_Init+0x80>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001021 	.word	0x08001021
 8000fd4:	08001033 	.word	0x08001033
 8000fd8:	08001075 	.word	0x08001075
 8000fdc:	0800107b 	.word	0x0800107b
 8000fe0:	0800107b 	.word	0x0800107b
 8000fe4:	0800107b 	.word	0x0800107b
 8000fe8:	0800107b 	.word	0x0800107b
 8000fec:	0800107b 	.word	0x0800107b
 8000ff0:	0800107b 	.word	0x0800107b
 8000ff4:	0800107b 	.word	0x0800107b
 8000ff8:	0800107b 	.word	0x0800107b
 8000ffc:	0800107b 	.word	0x0800107b
 8001000:	0800107b 	.word	0x0800107b
 8001004:	0800107b 	.word	0x0800107b
 8001008:	0800107b 	.word	0x0800107b
 800100c:	0800107b 	.word	0x0800107b
 8001010:	08001029 	.word	0x08001029
 8001014:	0800103d 	.word	0x0800103d
 8001018:	4a75      	ldr	r2, [pc, #468]	; (80011f0 <HAL_GPIO_Init+0x2a4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101e:	e02c      	b.n	800107a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e029      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	3304      	adds	r3, #4
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e024      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	3308      	adds	r3, #8
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e01f      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	330c      	adds	r3, #12
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e01a      	b.n	800107c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104e:	2304      	movs	r3, #4
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e013      	b.n	800107c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800105c:	2308      	movs	r3, #8
 800105e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	611a      	str	r2, [r3, #16]
          break;
 8001066:	e009      	b.n	800107c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001068:	2308      	movs	r3, #8
 800106a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	615a      	str	r2, [r3, #20]
          break;
 8001072:	e003      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x130>
          break;
 800107a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d801      	bhi.n	8001086 <HAL_GPIO_Init+0x13a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e001      	b.n	800108a <HAL_GPIO_Init+0x13e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3304      	adds	r3, #4
 800108a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2bff      	cmp	r3, #255	; 0xff
 8001090:	d802      	bhi.n	8001098 <HAL_GPIO_Init+0x14c>
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x152>
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	3b08      	subs	r3, #8
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	210f      	movs	r1, #15
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	401a      	ands	r2, r3
 80010b0:	6a39      	ldr	r1, [r7, #32]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80c1 	beq.w	800124e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e4:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3c      	ldr	r2, [pc, #240]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d01f      	beq.n	8001150 <HAL_GPIO_Init+0x204>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3b      	ldr	r2, [pc, #236]	; (8001200 <HAL_GPIO_Init+0x2b4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d019      	beq.n	800114c <HAL_GPIO_Init+0x200>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d013      	beq.n	8001148 <HAL_GPIO_Init+0x1fc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a39      	ldr	r2, [pc, #228]	; (8001208 <HAL_GPIO_Init+0x2bc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d00d      	beq.n	8001144 <HAL_GPIO_Init+0x1f8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a38      	ldr	r2, [pc, #224]	; (800120c <HAL_GPIO_Init+0x2c0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x1f4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a37      	ldr	r2, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2c4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_GPIO_Init+0x1f0>
 8001138:	2305      	movs	r3, #5
 800113a:	e00a      	b.n	8001152 <HAL_GPIO_Init+0x206>
 800113c:	2306      	movs	r3, #6
 800113e:	e008      	b.n	8001152 <HAL_GPIO_Init+0x206>
 8001140:	2304      	movs	r3, #4
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x206>
 8001144:	2303      	movs	r3, #3
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x206>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x206>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x206>
 8001150:	2300      	movs	r3, #0
 8001152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001162:	4925      	ldr	r1, [pc, #148]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	4924      	ldr	r1, [pc, #144]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	4920      	ldr	r1, [pc, #128]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 8001194:	4013      	ands	r3, r2
 8001196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	491a      	ldr	r1, [pc, #104]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4916      	ldr	r1, [pc, #88]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80011bc:	4013      	ands	r3, r2
 80011be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d025      	beq.n	8001218 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4910      	ldr	r1, [pc, #64]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e025      	b.n	8001226 <HAL_GPIO_Init+0x2da>
 80011da:	bf00      	nop
 80011dc:	10320000 	.word	0x10320000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10220000 	.word	0x10220000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	10120000 	.word	0x10120000
 80011f0:	10110000 	.word	0x10110000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000
 8001208:	40011400 	.word	0x40011400
 800120c:	40011800 	.word	0x40011800
 8001210:	40011c00 	.word	0x40011c00
 8001214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_GPIO_Init+0x324>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	43db      	mvns	r3, r3
 8001220:	4913      	ldr	r1, [pc, #76]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001222:	4013      	ands	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
 800123e:	e006      	b.n	800124e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_GPIO_Init+0x324>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	43db      	mvns	r3, r3
 8001248:	4909      	ldr	r1, [pc, #36]	; (8001270 <HAL_GPIO_Init+0x324>)
 800124a:	4013      	ands	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	3301      	adds	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	f47f ae7e 	bne.w	8000f60 <HAL_GPIO_Init+0x14>
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	372c      	adds	r7, #44	; 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e001      	b.n	8001296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b2:	787b      	ldrb	r3, [r7, #1]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012be:	e003      	b.n	80012c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	041a      	lsls	r2, r3, #16
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	611a      	str	r2, [r3, #16]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0d2      	b.n	800148c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fb92 	bl	8000a24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001316:	f023 030f 	bic.w	r3, r3, #15
 800131a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2202      	movs	r2, #2
 8001322:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d073      	beq.n	8001414 <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001334:	2310      	movs	r3, #16
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e001      	b.n	800133e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800133a:	2320      	movs	r3, #32
 800133c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b20      	cmp	r3, #32
 8001344:	d802      	bhi.n	800134c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_I2S_Init+0x1c0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d104      	bne.n	8001360 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8001356:	2004      	movs	r0, #4
 8001358:	f000 fe9e 	bl	8002098 <HAL_RCCEx_GetPeriphCLKFreq>
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	e00c      	b.n	800137a <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <HAL_I2S_Init+0x1c4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d104      	bne.n	8001374 <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 800136a:	2008      	movs	r0, #8
 800136c:	f000 fe94 	bl	8002098 <HAL_RCCEx_GetPeriphCLKFreq>
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	e002      	b.n	800137a <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 8001374:	f000 fd48 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001378:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001382:	d125      	bne.n	80013d0 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d010      	beq.n	80013ae <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	fbb2 f2f3 	udiv	r2, r2, r3
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	3305      	adds	r3, #5
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	e01f      	b.n	80013ee <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	3305      	adds	r3, #5
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e00e      	b.n	80013ee <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	3305      	adds	r3, #5
 80013ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4a2a      	ldr	r2, [pc, #168]	; (800149c <HAL_I2S_Init+0x1c8>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	e003      	b.n	800141c <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001414:	2302      	movs	r3, #2
 8001416:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d902      	bls.n	8001428 <HAL_I2S_Init+0x154>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	2bff      	cmp	r3, #255	; 0xff
 8001426:	d907      	bls.n	8001438 <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142c:	f043 0210 	orr.w	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e029      	b.n	800148c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	ea42 0103 	orr.w	r1, r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	430a      	orrs	r2, r1
 800144a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001456:	f023 030f 	bic.w	r3, r3, #15
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6851      	ldr	r1, [r2, #4]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6892      	ldr	r2, [r2, #8]
 8001462:	4311      	orrs	r1, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68d2      	ldr	r2, [r2, #12]
 8001468:	4311      	orrs	r1, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6992      	ldr	r2, [r2, #24]
 800146e:	430a      	orrs	r2, r1
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800147a:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40003800 	.word	0x40003800
 8001498:	40003c00 	.word	0x40003c00
 800149c:	cccccccd 	.word	0xcccccccd

080014a0 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_I2S_Transmit_IT+0x1a>
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e05b      	b.n	8001576 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_I2S_Transmit_IT+0x2e>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e053      	b.n	8001576 <HAL_I2S_Transmit_IT+0xd6>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d005      	beq.n	80014ee <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 80014ea:	2302      	movs	r3, #2
 80014ec:	e043      	b.n	8001576 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d002      	beq.n	800151a <HAL_I2S_Transmit_IT+0x7a>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d10a      	bne.n	8001530 <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	845a      	strh	r2, [r3, #34]	; 0x22
 800152e:	e005      	b.n	800153c <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	88fa      	ldrh	r2, [r7, #6]
 800153a:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800154a:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155a:	d007      	beq.n	800156c <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800156a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10e      	bne.n	80015c2 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f889 	bl	80016d2 <I2S_Receive_IT>
    return;
 80015c0:	e044      	b.n	800164c <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_I2S_IRQHandler+0x62>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	09db      	lsrs	r3, r3, #7
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f84b 	bl	8001676 <I2S_Transmit_IT>
    return;
 80015e0:	e034      	b.n	800164c <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d02e      	beq.n	800164c <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00d      	beq.n	8001616 <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001608:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160e:	f043 0202 	orr.w	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001630:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	f043 0204 	orr.w	r2, r3, #4
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f80c 	bl	8001664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	881a      	ldrh	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	1c9a      	adds	r2, r3, #2
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001698:	b29b      	uxth	r3, r3
 800169a:	3b01      	subs	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10e      	bne.n	80016ca <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7fe fdad 	bl	8000224 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	b292      	uxth	r2, r2
 80016e6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	1c9a      	adds	r2, r3, #2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10e      	bne.n	8001728 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001718:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff95 	bl	8001652 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e272      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8087 	beq.w	800185e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001750:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b04      	cmp	r3, #4
 800175a:	d00c      	beq.n	8001776 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175c:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d112      	bne.n	800178e <HAL_RCC_OscConfig+0x5e>
 8001768:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d10b      	bne.n	800178e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d06c      	beq.n	800185c <HAL_RCC_OscConfig+0x12c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d168      	bne.n	800185c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e24c      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x76>
 8001798:	4b80      	ldr	r3, [pc, #512]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a7f      	ldr	r2, [pc, #508]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e02e      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x98>
 80017ae:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a7a      	ldr	r2, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b78      	ldr	r3, [pc, #480]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0xbc>
 80017d2:	4b72      	ldr	r3, [pc, #456]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a71      	ldr	r2, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xd4>
 80017ec:	4b6b      	ldr	r3, [pc, #428]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6a      	ldr	r2, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a67      	ldr	r2, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fa62 	bl	8000cd4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fa5e 	bl	8000cd4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e200      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xe4>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fa4e 	bl	8000cd4 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fa4a 	bl	8000cd4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1ec      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x10c>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800186a:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	d11c      	bne.n	80018bc <HAL_RCC_OscConfig+0x18c>
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1c0      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4939      	ldr	r1, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fa03 	bl	8000cd4 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff f9ff 	bl	8000cd4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1a1      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4927      	ldr	r1, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff f9e2 	bl	8000cd4 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff f9de 	bl	8000cd4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e180      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d03a      	beq.n	80019b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d019      	beq.n	800197a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff f9c2 	bl	8000cd4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff f9be 	bl	8000cd4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e160      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x26c>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f000 fabc 	bl	8001ef0 <RCC_Delay>
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff f9a8 	bl	8000cd4 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001986:	e00f      	b.n	80019a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff f9a4 	bl	8000cd4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d908      	bls.n	80019a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e146      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	42420000 	.word	0x42420000
 80019a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e9      	bne.n	8001988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80a6 	beq.w	8001b0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a87      	ldr	r2, [pc, #540]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b85      	ldr	r3, [pc, #532]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b82      	ldr	r3, [pc, #520]	; (8001bf8 <HAL_RCC_OscConfig+0x4c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fa:	4b7f      	ldr	r3, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x4c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7e      	ldr	r2, [pc, #504]	; (8001bf8 <HAL_RCC_OscConfig+0x4c8>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f965 	bl	8000cd4 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff f961 	bl	8000cd4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e103      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x4c8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x312>
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e02d      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x334>
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a69      	ldr	r2, [pc, #420]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a66      	ldr	r2, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	e01c      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x356>
 8001a6c:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a60      	ldr	r2, [pc, #384]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a5d      	ldr	r2, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x36e>
 8001a86:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a57      	ldr	r2, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d015      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f915 	bl	8000cd4 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff f911 	bl	8000cd4 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0b1      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ee      	beq.n	8001aae <HAL_RCC_OscConfig+0x37e>
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f8ff 	bl	8000cd4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f8fb 	bl	8000cd4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e09b      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ee      	bne.n	8001ada <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d105      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a3b      	ldr	r2, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8087 	beq.w	8001c26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d061      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d146      	bne.n	8001bba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f8cf 	bl	8000cd4 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff f8cb 	bl	8000cd4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e06d      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d108      	bne.n	8001b74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a19      	ldr	r1, [r3, #32]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	430b      	orrs	r3, r1
 8001b86:	491b      	ldr	r1, [pc, #108]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_RCC_OscConfig+0x4cc>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff f89f 	bl	8000cd4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f89b 	bl	8000cd4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e03d      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46a>
 8001bb8:	e035      	b.n	8001c26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x4cc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f888 	bl	8000cd4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f884 	bl	8000cd4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e026      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x498>
 8001be6:	e01e      	b.n	8001c26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e019      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_OscConfig+0x500>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0d0      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d910      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4965      	ldr	r1, [pc, #404]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d040      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d115      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e073      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06b      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4936      	ldr	r1, [pc, #216]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7fe ffd6 	bl	8000cd4 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7fe ffd2 	bl	8000cd4 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e053      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d210      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4922      	ldr	r1, [pc, #136]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1cc>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1d0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff34 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	080067d0 	.word	0x080067d0
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x30>
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_GetSysClockFreq+0x36>
 8001e36:	e027      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e3a:	613b      	str	r3, [r7, #16]
      break;
 8001e3c:	e027      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	0c9b      	lsrs	r3, r3, #18
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0c5b      	lsrs	r3, r3, #17
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6a:	fb03 f202 	mul.w	r2, r3, r2
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e004      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	613b      	str	r3, [r7, #16]
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e8a:	613b      	str	r3, [r7, #16]
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	693b      	ldr	r3, [r7, #16]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	00b71b00 	.word	0x00b71b00
 8001ea4:	080067e8 	.word	0x080067e8
 8001ea8:	080067f8 	.word	0x080067f8
 8001eac:	003d0900 	.word	0x003d0900
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ecc:	f7ff fff2 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	0adb      	lsrs	r3, r3, #11
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	080067e0 	.word	0x080067e0

08001ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <RCC_Delay+0x34>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <RCC_Delay+0x38>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0a5b      	lsrs	r3, r3, #9
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f0c:	bf00      	nop
  }
  while (Delay --);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	60fa      	str	r2, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f9      	bne.n	8001f0c <RCC_Delay+0x1c>
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	20000000 	.word	0x20000000
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d07d      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	61d3      	str	r3, [r2, #28]
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d118      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a42      	ldr	r2, [pc, #264]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fea2 	bl	8000cd4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	e008      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe fe9e 	bl	8000cd4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e06d      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d02e      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d027      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fe6:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d014      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fe6d 	bl	8000cd4 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fe69 	bl	8000cd4 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e036      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4917      	ldr	r1, [pc, #92]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	4313      	orrs	r3, r2
 8002030:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002042:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	490b      	ldr	r1, [pc, #44]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4904      	ldr	r1, [pc, #16]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	42420440 	.word	0x42420440

08002098 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	f200 80ae 	bhi.w	800221a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	0800219b 	.word	0x0800219b
 80020c8:	080021ff 	.word	0x080021ff
 80020cc:	0800221b 	.word	0x0800221b
 80020d0:	0800218b 	.word	0x0800218b
 80020d4:	0800221b 	.word	0x0800221b
 80020d8:	0800221b 	.word	0x0800221b
 80020dc:	0800221b 	.word	0x0800221b
 80020e0:	08002193 	.word	0x08002193
 80020e4:	0800221b 	.word	0x0800221b
 80020e8:	0800221b 	.word	0x0800221b
 80020ec:	0800221b 	.word	0x0800221b
 80020f0:	0800221b 	.word	0x0800221b
 80020f4:	0800221b 	.word	0x0800221b
 80020f8:	0800221b 	.word	0x0800221b
 80020fc:	0800221b 	.word	0x0800221b
 8002100:	08002105 	.word	0x08002105
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002104:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800210a:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8083 	beq.w	800221e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	0c9b      	lsrs	r3, r3, #18
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	4a44      	ldr	r2, [pc, #272]	; (8002234 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002130:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	0c5b      	lsrs	r3, r3, #17
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	4a3f      	ldr	r2, [pc, #252]	; (8002238 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00d      	beq.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e004      	b.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4a38      	ldr	r2, [pc, #224]	; (8002240 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002172:	d102      	bne.n	800217a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002178:	e051      	b.n	800221e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
      break;
 8002188:	e049      	b.n	800221e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800218a:	f7ff fe3d 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 800218e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002190:	e048      	b.n	8002224 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002192:	f7ff fe39 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8002196:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002198:	e044      	b.n	8002224 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021aa:	d108      	bne.n	80021be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80021b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e01e      	b.n	80021fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d109      	bne.n	80021de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80021d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e00e      	b.n	80021fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021e8:	d11b      	bne.n	8002222 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d015      	beq.n	8002222 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 80021f8:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80021fa:	e012      	b.n	8002222 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80021fc:	e011      	b.n	8002222 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80021fe:	f7ff fe63 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8002202:	4602      	mov	r2, r0
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0b9b      	lsrs	r3, r3, #14
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	61bb      	str	r3, [r7, #24]
      break;
 8002218:	e004      	b.n	8002224 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8002222:	bf00      	nop
    }
  }
  return (frequency);
 8002224:	69bb      	ldr	r3, [r7, #24]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	080067fc 	.word	0x080067fc
 8002238:	0800680c 	.word	0x0800680c
 800223c:	00b71b00 	.word	0x00b71b00
 8002240:	003d0900 	.word	0x003d0900
 8002244:	aaaaaaab 	.word	0xaaaaaaab
 8002248:	00016e36 	.word	0x00016e36

0800224c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e022      	b.n	80022a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe fc1f 	bl	8000ab4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f814 	bl	80022ac <HAL_SD_InitCard>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00a      	b.n	80022a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af04      	add	r7, sp, #16
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80022c8:	2376      	movs	r3, #118	; 0x76
 80022ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681d      	ldr	r5, [r3, #0]
 80022d0:	466c      	mov	r4, sp
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e4:	4628      	mov	r0, r5
 80022e6:	f000 ff39 	bl	800315c <SDIO_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80022f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e04f      	b.n	800239c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_SD_InitCard+0xf8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 ff6e 	bl	80031e8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_SD_InitCard+0xf8>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002312:	2002      	movs	r0, #2
 8002314:	f7fe fce8 	bl	8000ce8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fe69 	bl	8002ff0 <SD_PowerON>
 800231e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e02e      	b.n	800239c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fd87 	bl	8002e52 <SD_InitCard>
 8002344:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e01b      	b.n	800239c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236c:	4618      	mov	r0, r3
 800236e:	f000 ffc7 	bl	8003300 <SDMMC_CmdBlockLength>
 8002372:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00f      	beq.n	800239a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_SD_InitCard+0xfc>)
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}
 80023a4:	423000a0 	.word	0x423000a0
 80023a8:	004005ff 	.word	0x004005ff

080023ac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b092      	sub	sp, #72	; 0x48
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80023ba:	f7fe fc8b 	bl	8000cd4 <HAL_GetTick>
 80023be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d107      	bne.n	80023de <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1bd      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	f040 81b0 	bne.w	800274c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	441a      	add	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d907      	bls.n	8002410 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e1a4      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2203      	movs	r2, #3
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	2b01      	cmp	r3, #1
 8002426:	d002      	beq.n	800242e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242a:	025b      	lsls	r3, r3, #9
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800243a:	2390      	movs	r3, #144	; 0x90
 800243c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800243e:	2302      	movs	r3, #2
 8002440:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002446:	2301      	movs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f107 0214 	add.w	r2, r7, #20
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 ff28 	bl	80032aa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d90a      	bls.n	8002476 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2202      	movs	r2, #2
 8002464:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800246c:	4618      	mov	r0, r3
 800246e:	f000 ff8b 	bl	8003388 <SDMMC_CmdReadMultiBlock>
 8002472:	6478      	str	r0, [r7, #68]	; 0x44
 8002474:	e009      	b.n	800248a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002482:	4618      	mov	r0, r3
 8002484:	f000 ff5e 	bl	8003344 <SDMMC_CmdReadSingleBlock>
 8002488:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248c:	2b00      	cmp	r3, #0
 800248e:	d012      	beq.n	80024b6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a7a      	ldr	r2, [pc, #488]	; (8002680 <HAL_SD_ReadBlocks+0x2d4>)
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e151      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024ba:	e061      	b.n	8002580 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03c      	beq.n	8002544 <HAL_SD_ReadBlocks+0x198>
 80024ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d039      	beq.n	8002544 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	643b      	str	r3, [r7, #64]	; 0x40
 80024d4:	e033      	b.n	800253e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fe68 	bl	80031b0 <SDIO_ReadFIFO>
 80024e0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80024ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ec:	3301      	adds	r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80024f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f2:	3b01      	subs	r3, #1
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	3301      	adds	r3, #1
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	3b01      	subs	r3, #1
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	b2da      	uxtb	r2, r3
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	3301      	adds	r3, #1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800251c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251e:	3b01      	subs	r3, #1
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	b2da      	uxtb	r2, r3
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800252c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252e:	3301      	adds	r3, #1
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	3b01      	subs	r3, #1
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253a:	3301      	adds	r3, #1
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	2b07      	cmp	r3, #7
 8002542:	d9c8      	bls.n	80024d6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002544:	f7fe fbc6 	bl	8000cd4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002550:	429a      	cmp	r2, r3
 8002552:	d902      	bls.n	800255a <HAL_SD_ReadBlocks+0x1ae>
 8002554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d112      	bne.n	8002580 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a48      	ldr	r2, [pc, #288]	; (8002680 <HAL_SD_ReadBlocks+0x2d4>)
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0ec      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002586:	f240 332a 	movw	r3, #810	; 0x32a
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d095      	beq.n	80024bc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d022      	beq.n	80025e4 <HAL_SD_ReadBlocks+0x238>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d91f      	bls.n	80025e4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d01b      	beq.n	80025e4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 ff4f 	bl	8003454 <SDMMC_CmdStopTransfer>
 80025b6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <HAL_SD_ReadBlocks+0x2d4>)
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025cc:	431a      	orrs	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0ba      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d012      	beq.n	8002618 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_SD_ReadBlocks+0x2d4>)
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	f043 0208 	orr.w	r2, r3, #8
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0a0      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d012      	beq.n	800264c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_SD_ReadBlocks+0x2d4>)
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	f043 0202 	orr.w	r2, r3, #2
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e086      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d063      	beq.n	8002722 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <HAL_SD_ReadBlocks+0x2d4>)
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e06c      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
 8002680:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fd91 	bl	80031b0 <SDIO_ReadFIFO>
 800268e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	b2da      	uxtb	r2, r3
 8002694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002696:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	3301      	adds	r3, #1
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a0:	3b01      	subs	r3, #1
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	3301      	adds	r3, #1
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b6:	3b01      	subs	r3, #1
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	3301      	adds	r3, #1
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026cc:	3b01      	subs	r3, #1
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	0e1b      	lsrs	r3, r3, #24
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	3301      	adds	r3, #1
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e2:	3b01      	subs	r3, #1
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026e6:	f7fe faf5 	bl	8000cd4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d902      	bls.n	80026fc <HAL_SD_ReadBlocks+0x350>
 80026f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d112      	bne.n	8002722 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_SD_ReadBlocks+0x3b8>)
 8002702:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e01b      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_SD_ReadBlocks+0x38a>
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1a6      	bne.n	8002684 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f240 523a 	movw	r2, #1338	; 0x53a
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e006      	b.n	800275a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3748      	adds	r7, #72	; 0x48
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	004005ff 	.word	0x004005ff

08002768 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b092      	sub	sp, #72	; 0x48
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002776:	f7fe faad 	bl	8000cd4 <HAL_GetTick>
 800277a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e166      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f040 8159 	bne.w	8002a5a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	441a      	add	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d907      	bls.n	80027cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e14d      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2203      	movs	r2, #3
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	025b      	lsls	r3, r3, #9
 80027e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80027f6:	2390      	movs	r3, #144	; 0x90
 80027f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002802:	2301      	movs	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f107 0218 	add.w	r2, r7, #24
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd4a 	bl	80032aa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d90a      	bls.n	8002832 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fdf1 	bl	8003410 <SDMMC_CmdWriteMultiBlock>
 800282e:	6478      	str	r0, [r7, #68]	; 0x44
 8002830:	e009      	b.n	8002846 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2210      	movs	r2, #16
 8002836:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fdc4 	bl	80033cc <SDMMC_CmdWriteSingleBlock>
 8002844:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a87      	ldr	r2, [pc, #540]	; (8002a70 <HAL_SD_WriteBlocks+0x308>)
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285a:	431a      	orrs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0fa      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002876:	e065      	b.n	8002944 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d040      	beq.n	8002908 <HAL_SD_WriteBlocks+0x1a0>
 8002886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d03d      	beq.n	8002908 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800288c:	2300      	movs	r3, #0
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
 8002890:	e037      	b.n	8002902 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289a:	3301      	adds	r3, #1
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	3b01      	subs	r3, #1
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	021a      	lsls	r2, r3, #8
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	3301      	adds	r3, #1
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	3b01      	subs	r3, #1
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	3301      	adds	r3, #1
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80028ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d0:	3b01      	subs	r3, #1
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	3301      	adds	r3, #1
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	3b01      	subs	r3, #1
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f107 0214 	add.w	r2, r7, #20
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fc66 	bl	80031c8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80028fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fe:	3301      	adds	r3, #1
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
 8002902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002904:	2b07      	cmp	r3, #7
 8002906:	d9c4      	bls.n	8002892 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002908:	f7fe f9e4 	bl	8000cd4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002914:	429a      	cmp	r2, r3
 8002916:	d902      	bls.n	800291e <HAL_SD_WriteBlocks+0x1b6>
 8002918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291a:	2b00      	cmp	r3, #0
 800291c:	d112      	bne.n	8002944 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a53      	ldr	r2, [pc, #332]	; (8002a70 <HAL_SD_WriteBlocks+0x308>)
 8002924:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e091      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294a:	f240 331a 	movw	r3, #794	; 0x31a
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d091      	beq.n	8002878 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d022      	beq.n	80029a8 <HAL_SD_WriteBlocks+0x240>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d91f      	bls.n	80029a8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	2b03      	cmp	r3, #3
 800296e:	d01b      	beq.n	80029a8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fd6d 	bl	8003454 <SDMMC_CmdStopTransfer>
 800297a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800297c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a3a      	ldr	r2, [pc, #232]	; (8002a70 <HAL_SD_WriteBlocks+0x308>)
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e05f      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2d      	ldr	r2, [pc, #180]	; (8002a70 <HAL_SD_WriteBlocks+0x308>)
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	f043 0208 	orr.w	r2, r3, #8
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e045      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a20      	ldr	r2, [pc, #128]	; (8002a70 <HAL_SD_WriteBlocks+0x308>)
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e02b      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_SD_WriteBlocks+0x308>)
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	f043 0210 	orr.w	r2, r3, #16
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e011      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e006      	b.n	8002a68 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3748      	adds	r7, #72	; 0x48
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	004005ff 	.word	0x004005ff

08002a74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a82:	0f9b      	lsrs	r3, r3, #30
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa0:	0e1b      	lsrs	r3, r3, #24
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab2:	0c1b      	lsrs	r3, r3, #16
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad4:	0d1b      	lsrs	r3, r3, #20
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af2:	0bdb      	lsrs	r3, r3, #15
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b04:	0b9b      	lsrs	r3, r3, #14
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b16:	0b5b      	lsrs	r3, r3, #13
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b28:	0b1b      	lsrs	r3, r3, #12
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d163      	bne.n	8002c0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	009a      	lsls	r2, r3, #2
 8002b4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002b54:	0f92      	lsrs	r2, r2, #30
 8002b56:	431a      	orrs	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b60:	0edb      	lsrs	r3, r3, #27
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	0e1b      	lsrs	r3, r3, #24
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b84:	0d5b      	lsrs	r3, r3, #21
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b96:	0c9b      	lsrs	r3, r3, #18
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba8:	0bdb      	lsrs	r3, r3, #15
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	7e1b      	ldrb	r3, [r3, #24]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	3302      	adds	r3, #2
 8002bcc:	2201      	movs	r2, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002bd6:	fb03 f202 	mul.w	r2, r3, r2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	7a1b      	ldrb	r3, [r3, #8]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	2201      	movs	r2, #1
 8002bea:	409a      	lsls	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002bf8:	0a52      	lsrs	r2, r2, #9
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60
 8002c0a:	e031      	b.n	8002c70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11d      	bne.n	8002c50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c18:	041b      	lsls	r3, r3, #16
 8002c1a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	431a      	orrs	r2, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	029a      	lsls	r2, r3, #10
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c44:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
 8002c4e:	e00f      	b.n	8002c70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a58      	ldr	r2, [pc, #352]	; (8002db8 <HAL_SD_GetCardCSD+0x344>)
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e09d      	b.n	8002dac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	0b9b      	lsrs	r3, r3, #14
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c86:	09db      	lsrs	r3, r3, #7
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	0fdb      	lsrs	r3, r3, #31
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	0f5b      	lsrs	r3, r3, #29
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	0d9b      	lsrs	r3, r3, #22
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	0d5b      	lsrs	r3, r3, #21
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	0bdb      	lsrs	r3, r3, #15
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	0b9b      	lsrs	r3, r3, #14
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	0b5b      	lsrs	r3, r3, #13
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	0b1b      	lsrs	r3, r3, #12
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	0a9b      	lsrs	r3, r3, #10
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	004005ff 	.word	0x004005ff

08002dbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	4619      	mov	r1, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f971 	bl	800310c <SD_SendStatus>
 8002e2a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0a5b      	lsrs	r3, r3, #9
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002e48:	693b      	ldr	r3, [r7, #16]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e52:	b5b0      	push	{r4, r5, r7, lr}
 8002e54:	b094      	sub	sp, #80	; 0x50
 8002e56:	af04      	add	r7, sp, #16
 8002e58:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f9cd 	bl	8003202 <SDIO_GetPowerState>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e72:	e0b8      	b.n	8002fe6 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d02f      	beq.n	8002edc <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fbae 	bl	80035e2 <SDMMC_CmdSendCID>
 8002e86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <SD_InitCard+0x40>
    {
      return errorstate;
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e90:	e0a9      	b.n	8002fe6 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f9f4 	bl	8003286 <SDIO_GetResponse>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f9eb 	bl	8003286 <SDIO_GetResponse>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2108      	movs	r1, #8
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f9e2 	bl	8003286 <SDIO_GetResponse>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	210c      	movs	r1, #12
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f9d9 	bl	8003286 <SDIO_GetResponse>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d00d      	beq.n	8002f00 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f107 020e 	add.w	r2, r7, #14
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fbb4 	bl	800365c <SDMMC_CmdSetRelAdd>
 8002ef4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <SD_InitCard+0xae>
    {
      return errorstate;
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	e072      	b.n	8002fe6 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d036      	beq.n	8002f76 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fb7e 	bl	800361e <SDMMC_CmdSendCSD>
 8002f22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <SD_InitCard+0xdc>
    {
      return errorstate;
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	e05b      	b.n	8002fe6 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f9a6 	bl	8003286 <SDIO_GetResponse>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2104      	movs	r1, #4
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f99d 	bl	8003286 <SDIO_GetResponse>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2108      	movs	r1, #8
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f994 	bl	8003286 <SDIO_GetResponse>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	210c      	movs	r1, #12
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f98b 	bl	8003286 <SDIO_GetResponse>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f982 	bl	8003286 <SDIO_GetResponse>
 8002f82:	4603      	mov	r3, r0
 8002f84:	0d1a      	lsrs	r2, r3, #20
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fd6f 	bl	8002a74 <HAL_SD_GetCardCSD>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fa0:	e021      	b.n	8002fe6 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	2200      	movs	r2, #0
 8002fae:	461c      	mov	r4, r3
 8002fb0:	4615      	mov	r5, r2
 8002fb2:	4622      	mov	r2, r4
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	4608      	mov	r0, r1
 8002fb8:	f000 fa6e 	bl	8003498 <SDMMC_CmdSelDesel>
 8002fbc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <SD_InitCard+0x176>
  {
    return errorstate;
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc6:	e00e      	b.n	8002fe6 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681d      	ldr	r5, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	466c      	mov	r4, sp
 8002fd0:	f103 0210 	add.w	r2, r3, #16
 8002fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fda:	3304      	adds	r3, #4
 8002fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f000 f8bc 	bl	800315c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3740      	adds	r7, #64	; 0x40
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ff0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa68 	bl	80034de <SDMMC_CmdGoIdleState>
 800300e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	e072      	b.n	8003100 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa7b 	bl	800351a <SDMMC_CmdOperCond>
 8003024:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fa51 	bl	80034de <SDMMC_CmdGoIdleState>
 800303c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	e05b      	b.n	8003100 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b01      	cmp	r3, #1
 8003054:	d137      	bne.n	80030c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fa7b 	bl	8003558 <SDMMC_CmdAppCommand>
 8003062:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02d      	beq.n	80030c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800306a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800306e:	e047      	b.n	8003100 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fa6e 	bl	8003558 <SDMMC_CmdAppCommand>
 800307c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <SD_PowerON+0x98>
    {
      return errorstate;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	e03b      	b.n	8003100 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	491e      	ldr	r1, [pc, #120]	; (8003108 <SD_PowerON+0x118>)
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fa84 	bl	800359c <SDMMC_CmdAppOperCommand>
 8003094:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800309c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030a0:	e02e      	b.n	8003100 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f8ec 	bl	8003286 <SDIO_GetResponse>
 80030ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0fdb      	lsrs	r3, r3, #31
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <SD_PowerON+0xcc>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <SD_PowerON+0xce>
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]

    count++;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3301      	adds	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d802      	bhi.n	80030d6 <SD_PowerON+0xe6>
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0cc      	beq.n	8003070 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030dc:	4293      	cmp	r3, r2
 80030de:	d902      	bls.n	80030e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80030e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e4:	e00c      	b.n	8003100 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44
 80030f6:	e002      	b.n	80030fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	c1100000 	.word	0xc1100000

0800310c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800311c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003120:	e018      	b.n	8003154 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fab5 	bl	800369e <SDMMC_CmdSendStatus>
 8003134:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <SD_SendStatus+0x34>
  {
    return errorstate;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	e009      	b.n	8003154 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f89d 	bl	8003286 <SDIO_GetResponse>
 800314c:	4602      	mov	r2, r0
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800315c:	b084      	sub	sp, #16
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	f107 001c 	add.w	r0, r7, #28
 800316a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003172:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003174:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003176:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800317a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800317e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003182:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003186:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	b004      	add	sp, #16
 80031ae:	4770      	bx	lr

080031b0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2203      	movs	r2, #3
 80031f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0303 	and.w	r3, r3, #3
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800323a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003240:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003246:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003256:	f023 030f 	bic.w	r3, r3, #15
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3314      	adds	r3, #20
 8003294:	461a      	mov	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
}  
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80032d0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80032d6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80032dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0

}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800330e:	2310      	movs	r3, #16
 8003310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003312:	2340      	movs	r3, #64	; 0x40
 8003314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800331a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ff78 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	2110      	movs	r1, #16
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9d6 	bl	80036e4 <SDMMC_GetCmdResp1>
 8003338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800333a:	69fb      	ldr	r3, [r7, #28]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003352:	2311      	movs	r3, #17
 8003354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003356:	2340      	movs	r3, #64	; 0x40
 8003358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800335e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003362:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003364:	f107 0308 	add.w	r3, r7, #8
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff56 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	2111      	movs	r1, #17
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9b4 	bl	80036e4 <SDMMC_GetCmdResp1>
 800337c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800337e:	69fb      	ldr	r3, [r7, #28]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003396:	2312      	movs	r3, #18
 8003398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800339a:	2340      	movs	r3, #64	; 0x40
 800339c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff34 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b8:	2112      	movs	r1, #18
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f992 	bl	80036e4 <SDMMC_GetCmdResp1>
 80033c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033c2:	69fb      	ldr	r3, [r7, #28]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80033da:	2318      	movs	r3, #24
 80033dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033de:	2340      	movs	r3, #64	; 0x40
 80033e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff12 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	2118      	movs	r1, #24
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f970 	bl	80036e4 <SDMMC_GetCmdResp1>
 8003404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003406:	69fb      	ldr	r3, [r7, #28]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800341e:	2319      	movs	r3, #25
 8003420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800342a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003430:	f107 0308 	add.w	r3, r7, #8
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fef0 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	2119      	movs	r1, #25
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f94e 	bl	80036e4 <SDMMC_GetCmdResp1>
 8003448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800344a:	69fb      	ldr	r3, [r7, #28]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003460:	230c      	movs	r3, #12
 8003462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800346c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fecf 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <SDMMC_CmdStopTransfer+0x40>)
 8003480:	210c      	movs	r1, #12
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f92e 	bl	80036e4 <SDMMC_GetCmdResp1>
 8003488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800348a:	69fb      	ldr	r3, [r7, #28]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	05f5e100 	.word	0x05f5e100

08003498 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80034a8:	2307      	movs	r3, #7
 80034aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034ac:	2340      	movs	r3, #64	; 0x40
 80034ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034b0:	2300      	movs	r3, #0
 80034b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034ba:	f107 0310 	add.w	r3, r7, #16
 80034be:	4619      	mov	r1, r3
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff feab 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	2107      	movs	r1, #7
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f909 	bl	80036e4 <SDMMC_GetCmdResp1>
 80034d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3728      	adds	r7, #40	; 0x28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b088      	sub	sp, #32
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fe8a 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb21 	bl	8003b50 <SDMMC_GetCmdError>
 800350e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003510:	69fb      	ldr	r3, [r7, #28]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b088      	sub	sp, #32
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003522:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003528:	2308      	movs	r3, #8
 800352a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800352c:	2340      	movs	r3, #64	; 0x40
 800352e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003538:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800353a:	f107 0308 	add.w	r3, r7, #8
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fe6b 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fab4 	bl	8003ab4 <SDMMC_GetCmdResp7>
 800354c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800354e:	69fb      	ldr	r3, [r7, #28]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003566:	2337      	movs	r3, #55	; 0x37
 8003568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003576:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fe4c 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	2137      	movs	r1, #55	; 0x37
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8aa 	bl	80036e4 <SDMMC_GetCmdResp1>
 8003590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003592:	69fb      	ldr	r3, [r7, #28]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80035b2:	2329      	movs	r3, #41	; 0x29
 80035b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fe26 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f9bd 	bl	8003950 <SDMMC_GetCmdResp3>
 80035d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035d8:	69fb      	ldr	r3, [r7, #28]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80035ee:	2302      	movs	r3, #2
 80035f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80035f2:	23c0      	movs	r3, #192	; 0xc0
 80035f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fe08 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f957 	bl	80038c0 <SDMMC_GetCmdResp2>
 8003612:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003614:	69fb      	ldr	r3, [r7, #28]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b088      	sub	sp, #32
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800362c:	2309      	movs	r3, #9
 800362e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003630:	23c0      	movs	r3, #192	; 0xc0
 8003632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	4619      	mov	r1, r3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fde9 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f938 	bl	80038c0 <SDMMC_GetCmdResp2>
 8003650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003652:	69fb      	ldr	r3, [r7, #28]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800366a:	2303      	movs	r3, #3
 800366c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800366e:	2340      	movs	r3, #64	; 0x40
 8003670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800367a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800367c:	f107 0308 	add.w	r3, r7, #8
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fdca 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	2103      	movs	r1, #3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f99b 	bl	80039c8 <SDMMC_GetCmdResp6>
 8003692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003694:	69fb      	ldr	r3, [r7, #28]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b088      	sub	sp, #32
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80036ac:	230d      	movs	r3, #13
 80036ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff fda9 	bl	800321c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	210d      	movs	r1, #13
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f807 	bl	80036e4 <SDMMC_GetCmdResp1>
 80036d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036d8:	69fb      	ldr	r3, [r7, #28]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	460b      	mov	r3, r1
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80036f2:	4b70      	ldr	r3, [pc, #448]	; (80038b4 <SDMMC_GetCmdResp1+0x1d0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a70      	ldr	r2, [pc, #448]	; (80038b8 <SDMMC_GetCmdResp1+0x1d4>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	0a5a      	lsrs	r2, r3, #9
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	61fa      	str	r2, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003714:	e0c9      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ef      	beq.n	8003706 <SDMMC_GetCmdResp1+0x22>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ea      	bne.n	8003706 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2204      	movs	r2, #4
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003742:	2304      	movs	r3, #4
 8003744:	e0b1      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003758:	2301      	movs	r3, #1
 800375a:	e0a6      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	22c5      	movs	r2, #197	; 0xc5
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fd83 	bl	800326e <SDIO_GetCommandResponse>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	7afb      	ldrb	r3, [r7, #11]
 800376e:	4293      	cmp	r3, r2
 8003770:	d001      	beq.n	8003776 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003772:	2301      	movs	r3, #1
 8003774:	e099      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003776:	2100      	movs	r1, #0
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff fd84 	bl	8003286 <SDIO_GetResponse>
 800377e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4b4e      	ldr	r3, [pc, #312]	; (80038bc <SDMMC_GetCmdResp1+0x1d8>)
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
 800378c:	e08d      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	da02      	bge.n	800379a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003798:	e087      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80037a4:	2340      	movs	r3, #64	; 0x40
 80037a6:	e080      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	e079      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80037c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c4:	e071      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80037d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d4:	e069      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80037e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e4:	e061      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80037f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037f4:	e059      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003804:	e051      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003814:	e049      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003824:	e041      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003834:	e039      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003844:	e031      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003850:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003854:	e029      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003860:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003864:	e021      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003870:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003874:	e019      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003880:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003884:	e011      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003890:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003894:	e009      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80038a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038a4:	e001      	b.n	80038aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80038a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000000 	.word	0x20000000
 80038b8:	10624dd3 	.word	0x10624dd3
 80038bc:	fdffe008 	.word	0xfdffe008

080038c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80038c8:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <SDMMC_GetCmdResp2+0x88>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <SDMMC_GetCmdResp2+0x8c>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0a5b      	lsrs	r3, r3, #9
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e5a      	subs	r2, r3, #1
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80038e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038ec:	e026      	b.n	800393c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ef      	beq.n	80038de <SDMMC_GetCmdResp2+0x1e>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ea      	bne.n	80038de <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800391a:	2304      	movs	r3, #4
 800391c:	e00e      	b.n	800393c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003930:	2301      	movs	r3, #1
 8003932:	e003      	b.n	800393c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	22c5      	movs	r2, #197	; 0xc5
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000000 	.word	0x20000000
 800394c:	10624dd3 	.word	0x10624dd3

08003950 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <SDMMC_GetCmdResp3+0x70>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <SDMMC_GetCmdResp3+0x74>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a5b      	lsrs	r3, r3, #9
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	60fa      	str	r2, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800397c:	e01b      	b.n	80039b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ef      	beq.n	800396e <SDMMC_GetCmdResp3+0x1e>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ea      	bne.n	800396e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80039aa:	2304      	movs	r3, #4
 80039ac:	e003      	b.n	80039b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	22c5      	movs	r2, #197	; 0xc5
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	20000000 	.word	0x20000000
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	460b      	mov	r3, r1
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039d6:	4b35      	ldr	r3, [pc, #212]	; (8003aac <SDMMC_GetCmdResp6+0xe4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a35      	ldr	r2, [pc, #212]	; (8003ab0 <SDMMC_GetCmdResp6+0xe8>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	0a5b      	lsrs	r3, r3, #9
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	1e5a      	subs	r2, r3, #1
 80039f0:	61fa      	str	r2, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80039f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039fa:	e052      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <SDMMC_GetCmdResp6+0x24>
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ea      	bne.n	80039ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2204      	movs	r2, #4
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a28:	2304      	movs	r3, #4
 8003a2a:	e03a      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e02f      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fc13 	bl	800326e <SDIO_GetCommandResponse>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d001      	beq.n	8003a56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e025      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	22c5      	movs	r2, #197	; 0xc5
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fc11 	bl	8003286 <SDIO_GetResponse>
 8003a64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e011      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a8c:	e009      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9c:	e001      	b.n	8003aa2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	10624dd3 	.word	0x10624dd3

08003ab4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <SDMMC_GetCmdResp7+0x94>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a22      	ldr	r2, [pc, #136]	; (8003b4c <SDMMC_GetCmdResp7+0x98>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0a5b      	lsrs	r3, r3, #9
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	60fa      	str	r2, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ae0:	e02c      	b.n	8003b3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ef      	beq.n	8003ad2 <SDMMC_GetCmdResp7+0x1e>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ea      	bne.n	8003ad2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	e014      	b.n	8003b3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e009      	b.n	8003b3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b3a:	2300      	movs	r3, #0
  
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	10624dd3 	.word	0x10624dd3

08003b50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <SDMMC_GetCmdError+0x4c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <SDMMC_GetCmdError+0x50>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b7c:	e009      	b.n	8003b92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f1      	beq.n	8003b6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	22c5      	movs	r2, #197	; 0xc5
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	10624dd3 	.word	0x10624dd3

08003ba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <MX_FATFS_Init+0x18>)
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <MX_FATFS_Init+0x1c>)
 8003bac:	f002 fc90 	bl	80064d0 <FATFS_LinkDriver>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <MX_FATFS_Init+0x20>)
 8003bb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000432c 	.word	0x2000432c
 8003bc0:	08006890 	.word	0x08006890
 8003bc4:	20004328 	.word	0x20004328

08003bc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003bcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
	...

08003bd8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003be2:	f000 f86b 	bl	8003cbc <BSP_SD_IsDetected>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e005      	b.n	8003bfc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003bf0:	4804      	ldr	r0, [pc, #16]	; (8003c04 <BSP_SD_Init+0x2c>)
 8003bf2:	f7fe fb2b 	bl	800224c <HAL_SD_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000064 	.word	0x20000064

08003c08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	4806      	ldr	r0, [pc, #24]	; (8003c40 <BSP_SD_ReadBlocks+0x38>)
 8003c26:	f7fe fbc1 	bl	80023ac <HAL_SD_ReadBlocks>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000064 	.word	0x20000064

08003c44 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4806      	ldr	r0, [pc, #24]	; (8003c7c <BSP_SD_WriteBlocks+0x38>)
 8003c62:	f7fe fd81 	bl	8002768 <HAL_SD_WriteBlocks>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000064 	.word	0x20000064

08003c80 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003c84:	4805      	ldr	r0, [pc, #20]	; (8003c9c <BSP_SD_GetCardState+0x1c>)
 8003c86:	f7ff f8c4 	bl	8002e12 <HAL_SD_GetCardState>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000064 	.word	0x20000064

08003ca0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <BSP_SD_GetCardInfo+0x18>)
 8003cac:	f7ff f886 	bl	8002dbc <HAL_SD_GetCardInfo>
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000064 	.word	0x20000064

08003cbc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8003cc6:	f000 f80b 	bl	8003ce0 <BSP_PlatformIsDetected>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	b2db      	uxtb	r3, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	4806      	ldr	r0, [pc, #24]	; (8003d08 <BSP_PlatformIsDetected+0x28>)
 8003cee:	f7fd fac1 	bl	8001274 <HAL_GPIO_ReadPin>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40011000 	.word	0x40011000

08003d0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <disk_status+0x30>)
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	79fa      	ldrb	r2, [r7, #7]
 8003d24:	4905      	ldr	r1, [pc, #20]	; (8003d3c <disk_status+0x30>)
 8003d26:	440a      	add	r2, r1
 8003d28:	7a12      	ldrb	r2, [r2, #8]
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4798      	blx	r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20004350 	.word	0x20004350

08003d40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <disk_initialize+0x48>)
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d111      	bne.n	8003d7c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <disk_initialize+0x48>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <disk_initialize+0x48>)
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	79fa      	ldrb	r2, [r7, #7]
 8003d6e:	4906      	ldr	r1, [pc, #24]	; (8003d88 <disk_initialize+0x48>)
 8003d70:	440a      	add	r2, r1
 8003d72:	7a12      	ldrb	r2, [r2, #8]
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20004350 	.word	0x20004350

08003d8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <disk_read+0x3c>)
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	689c      	ldr	r4, [r3, #8]
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <disk_read+0x3c>)
 8003dac:	4413      	add	r3, r2
 8003dae:	7a18      	ldrb	r0, [r3, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	47a0      	blx	r4
 8003db8:	4603      	mov	r3, r0
 8003dba:	75fb      	strb	r3, [r7, #23]
  return res;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20004350 	.word	0x20004350

08003dcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <disk_write+0x3c>)
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68dc      	ldr	r4, [r3, #12]
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <disk_write+0x3c>)
 8003dec:	4413      	add	r3, r2
 8003dee:	7a18      	ldrb	r0, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	47a0      	blx	r4
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20004350 	.word	0x20004350

08003e0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	603a      	str	r2, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <disk_ioctl+0x38>)
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	79fa      	ldrb	r2, [r7, #7]
 8003e2a:	4906      	ldr	r1, [pc, #24]	; (8003e44 <disk_ioctl+0x38>)
 8003e2c:	440a      	add	r2, r1
 8003e2e:	7a10      	ldrb	r0, [r2, #8]
 8003e30:	79b9      	ldrb	r1, [r7, #6]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	4798      	blx	r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
  return res;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20004350 	.word	0x20004350

08003e48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003e5c:	e007      	b.n	8003e6e <mem_cpy+0x26>
		*d++ = *s++;
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	1c53      	adds	r3, r2, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1c59      	adds	r1, r3, #1
 8003e68:	6179      	str	r1, [r7, #20]
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f2      	bne.n	8003e5e <mem_cpy+0x16>
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003e94:	e005      	b.n	8003ea2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	617a      	str	r2, [r7, #20]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f4      	bne.n	8003e96 <mem_set+0x12>
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003ed0:	bf00      	nop
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <mem_cmp+0x40>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	61fa      	str	r2, [r7, #28]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	61ba      	str	r2, [r7, #24]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	1acb      	subs	r3, r1, r3
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ec      	beq.n	8003ed2 <mem_cmp+0x1a>
	return r;
 8003ef8:	697b      	ldr	r3, [r7, #20]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	; 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003f0e:	e002      	b.n	8003f16 <chk_chr+0x12>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3301      	adds	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <chk_chr+0x26>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d1f2      	bne.n	8003f10 <chk_chr+0xc>
	return *str;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	e038      	b.n	8003fbe <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003f4c:	492f      	ldr	r1, [pc, #188]	; (800400c <chk_lock+0xd4>)
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d029      	beq.n	8003fb4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003f60:	492a      	ldr	r1, [pc, #168]	; (800400c <chk_lock+0xd4>)
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d11e      	bne.n	8003fb8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003f7a:	4924      	ldr	r1, [pc, #144]	; (800400c <chk_lock+0xd4>)
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3304      	adds	r3, #4
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d110      	bne.n	8003fb8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003f96:	491d      	ldr	r1, [pc, #116]	; (800400c <chk_lock+0xd4>)
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d102      	bne.n	8003fb8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003fb2:	e007      	b.n	8003fc4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d9c3      	bls.n	8003f4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d109      	bne.n	8003fde <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <chk_lock+0x9e>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d101      	bne.n	8003fda <chk_lock+0xa2>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e013      	b.n	8004002 <chk_lock+0xca>
 8003fda:	2312      	movs	r3, #18
 8003fdc:	e011      	b.n	8004002 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <chk_lock+0xc4>
 8003fe4:	4909      	ldr	r1, [pc, #36]	; (800400c <chk_lock+0xd4>)
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	330a      	adds	r3, #10
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffa:	d101      	bne.n	8004000 <chk_lock+0xc8>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	e000      	b.n	8004002 <chk_lock+0xca>
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	20004338 	.word	0x20004338

08004010 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	e002      	b.n	8004022 <enq_lock+0x12>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3301      	adds	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d809      	bhi.n	800403c <enq_lock+0x2c>
 8004028:	490a      	ldr	r1, [pc, #40]	; (8004054 <enq_lock+0x44>)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ef      	bne.n	800401c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20004338 	.word	0x20004338

08004058 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e02b      	b.n	80040c0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004068:	4955      	ldr	r1, [pc, #340]	; (80041c0 <inc_lock+0x168>)
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800407e:	429a      	cmp	r2, r3
 8004080:	d11b      	bne.n	80040ba <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004082:	494f      	ldr	r1, [pc, #316]	; (80041c0 <inc_lock+0x168>)
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	3304      	adds	r3, #4
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800409a:	429a      	cmp	r2, r3
 800409c:	d10d      	bne.n	80040ba <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800409e:	4948      	ldr	r1, [pc, #288]	; (80041c0 <inc_lock+0x168>)
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3308      	adds	r3, #8
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d006      	beq.n	80040c8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d9d0      	bls.n	8004068 <inc_lock+0x10>
 80040c6:	e000      	b.n	80040ca <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80040c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d145      	bne.n	800415c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e002      	b.n	80040dc <inc_lock+0x84>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d809      	bhi.n	80040f6 <inc_lock+0x9e>
 80040e2:	4937      	ldr	r1, [pc, #220]	; (80041c0 <inc_lock+0x168>)
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d101      	bne.n	8004100 <inc_lock+0xa8>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e05a      	b.n	80041b6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004106:	482e      	ldr	r0, [pc, #184]	; (80041c0 <inc_lock+0x168>)
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4403      	add	r3, r0
 8004114:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800411c:	4828      	ldr	r0, [pc, #160]	; (80041c0 <inc_lock+0x168>)
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4403      	add	r3, r0
 800412a:	3304      	adds	r3, #4
 800412c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004134:	4922      	ldr	r1, [pc, #136]	; (80041c0 <inc_lock+0x168>)
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3308      	adds	r3, #8
 8004144:	4602      	mov	r2, r0
 8004146:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004148:	491d      	ldr	r1, [pc, #116]	; (80041c0 <inc_lock+0x168>)
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	330a      	adds	r3, #10
 8004158:	2200      	movs	r2, #0
 800415a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <inc_lock+0x124>
 8004162:	4917      	ldr	r1, [pc, #92]	; (80041c0 <inc_lock+0x168>)
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	330a      	adds	r3, #10
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <inc_lock+0x124>
 8004178:	2300      	movs	r3, #0
 800417a:	e01c      	b.n	80041b6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <inc_lock+0x142>
 8004182:	490f      	ldr	r1, [pc, #60]	; (80041c0 <inc_lock+0x168>)
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	330a      	adds	r3, #10
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	b299      	uxth	r1, r3
 8004198:	e001      	b.n	800419e <inc_lock+0x146>
 800419a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800419e:	4808      	ldr	r0, [pc, #32]	; (80041c0 <inc_lock+0x168>)
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4403      	add	r3, r0
 80041ac:	330a      	adds	r3, #10
 80041ae:	460a      	mov	r2, r1
 80041b0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	20004338 	.word	0x20004338

080041c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d82e      	bhi.n	8004236 <dec_lock+0x72>
		n = Files[i].ctr;
 80041d8:	491b      	ldr	r1, [pc, #108]	; (8004248 <dec_lock+0x84>)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	330a      	adds	r3, #10
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f2:	d101      	bne.n	80041f8 <dec_lock+0x34>
 80041f4:	2300      	movs	r3, #0
 80041f6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80041f8:	89fb      	ldrh	r3, [r7, #14]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <dec_lock+0x40>
 80041fe:	89fb      	ldrh	r3, [r7, #14]
 8004200:	3b01      	subs	r3, #1
 8004202:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004204:	4910      	ldr	r1, [pc, #64]	; (8004248 <dec_lock+0x84>)
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	330a      	adds	r3, #10
 8004214:	89fa      	ldrh	r2, [r7, #14]
 8004216:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <dec_lock+0x6c>
 800421e:	490a      	ldr	r1, [pc, #40]	; (8004248 <dec_lock+0x84>)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	737b      	strb	r3, [r7, #13]
 8004234:	e001      	b.n	800423a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004236:	2302      	movs	r3, #2
 8004238:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800423a:	7b7b      	ldrb	r3, [r7, #13]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20004338 	.word	0x20004338

0800424c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e016      	b.n	8004288 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800425a:	4910      	ldr	r1, [pc, #64]	; (800429c <clear_lock+0x50>)
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d108      	bne.n	8004282 <clear_lock+0x36>
 8004270:	490a      	ldr	r1, [pc, #40]	; (800429c <clear_lock+0x50>)
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4613      	mov	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d9e5      	bls.n	800425a <clear_lock+0xe>
	}
}
 800428e:	bf00      	nop
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20004338 	.word	0x20004338

080042a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d038      	beq.n	8004328 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80042bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	2301      	movs	r3, #1
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	f7ff fd7f 	bl	8003dcc <disk_write>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <sync_window+0x3a>
			res = FR_DISK_ERR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e026      	b.n	8004328 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d218      	bcs.n	8004328 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e010      	b.n	8004322 <sync_window+0x82>
					wsect += fs->fsize;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	2301      	movs	r3, #1
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	f7ff fd58 	bl	8003dcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	3b01      	subs	r3, #1
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d8eb      	bhi.n	8004300 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d01b      	beq.n	8004384 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ffa7 	bl	80042a0 <sync_window>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d113      	bne.n	8004384 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	2301      	movs	r3, #1
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	f7ff fd10 	bl	8003d8c <disk_read>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff ff82 	bl	80042a0 <sync_window>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 809b 	bne.w	80044de <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	f040 8088 	bne.w	80044c4 <sync_fs+0x136>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	f040 8082 	bne.w	80044c4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fd5b 	bl	8003e84 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2255      	movs	r2, #85	; 0x55
 80043d2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	22aa      	movs	r2, #170	; 0xaa
 80043da:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2252      	movs	r2, #82	; 0x52
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2252      	movs	r2, #82	; 0x52
 80043e8:	705a      	strb	r2, [r3, #1]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2261      	movs	r2, #97	; 0x61
 80043ee:	709a      	strb	r2, [r3, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2241      	movs	r2, #65	; 0x41
 80043f4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2272      	movs	r2, #114	; 0x72
 80043fa:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2272      	movs	r2, #114	; 0x72
 8004402:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2241      	movs	r2, #65	; 0x41
 800440a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2261      	movs	r2, #97	; 0x61
 8004412:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800441c:	b2da      	uxtb	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800442a:	b29b      	uxth	r3, r3
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	b29b      	uxth	r3, r3
 8004430:	b2da      	uxtb	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800444e:	0e1b      	lsrs	r3, r3, #24
 8004450:	b2da      	uxtb	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800445e:	b2da      	uxtb	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800446c:	b29b      	uxth	r3, r3
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b29b      	uxth	r3, r3
 8004472:	b2da      	uxtb	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2da      	uxtb	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004490:	0e1b      	lsrs	r3, r3, #24
 8004492:	b2da      	uxtb	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80044b6:	2301      	movs	r3, #1
 80044b8:	f7ff fc88 	bl	8003dcc <disk_write>
			fs->fsi_flag = 0;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80044ca:	2200      	movs	r2, #0
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fc9c 	bl	8003e0c <disk_ioctl>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <sync_fs+0x150>
			res = FR_DISK_ERR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3b02      	subs	r3, #2
 80044f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044fe:	3b02      	subs	r3, #2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d301      	bcc.n	800450a <clust2sect+0x22>
 8004506:	2300      	movs	r3, #0
 8004508:	e00a      	b.n	8004520 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004510:	461a      	mov	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	fb03 f202 	mul.w	r2, r3, r2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800451e:	4413      	add	r3, r2
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d905      	bls.n	8004546 <get_fat+0x1c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d302      	bcc.n	800454c <get_fat+0x22>
		val = 1;	/* Internal error */
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e0a3      	b.n	8004694 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004558:	2b03      	cmp	r3, #3
 800455a:	d068      	beq.n	800462e <get_fat+0x104>
 800455c:	2b03      	cmp	r3, #3
 800455e:	f300 808f 	bgt.w	8004680 <get_fat+0x156>
 8004562:	2b01      	cmp	r3, #1
 8004564:	d002      	beq.n	800456c <get_fat+0x42>
 8004566:	2b02      	cmp	r3, #2
 8004568:	d040      	beq.n	80045ec <get_fat+0xc2>
 800456a:	e089      	b.n	8004680 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0a5b      	lsrs	r3, r3, #9
 8004584:	4413      	add	r3, r2
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fed2 	bl	8004332 <move_window>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d178      	bne.n	8004686 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	60fa      	str	r2, [r7, #12]
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
 80045a2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	0a5b      	lsrs	r3, r3, #9
 80045ae:	4413      	add	r3, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff febd 	bl	8004332 <move_window>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d165      	bne.n	800468a <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	5cd3      	ldrb	r3, [r2, r3]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <get_fat+0xb8>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	e002      	b.n	80045e8 <get_fat+0xbe>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	617b      	str	r3, [r7, #20]
			break;
 80045ea:	e053      	b.n	8004694 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	4413      	add	r3, r2
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fe99 	bl	8004332 <move_window>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d143      	bne.n	800468e <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3301      	adds	r3, #1
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	b21a      	sxth	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	b21b      	sxth	r3, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	b21b      	sxth	r3, r3
 8004628:	b29b      	uxth	r3, r3
 800462a:	617b      	str	r3, [r7, #20]
			break;
 800462c:	e032      	b.n	8004694 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	09db      	lsrs	r3, r3, #7
 8004638:	4413      	add	r3, r2
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff fe78 	bl	8004332 <move_window>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d124      	bne.n	8004692 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3303      	adds	r3, #3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	061a      	lsls	r2, r3, #24
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3302      	adds	r3, #2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	4313      	orrs	r3, r2
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	3201      	adds	r2, #1
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	0212      	lsls	r2, r2, #8
 8004670:	4313      	orrs	r3, r2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	7812      	ldrb	r2, [r2, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800467c:	617b      	str	r3, [r7, #20]
			break;
 800467e:	e009      	b.n	8004694 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e006      	b.n	8004694 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004686:	bf00      	nop
 8004688:	e004      	b.n	8004694 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800468a:	bf00      	nop
 800468c:	e002      	b.n	8004694 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004692:	bf00      	nop
		}
	}

	return val;
 8004694:	697b      	ldr	r3, [r7, #20]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b088      	sub	sp, #32
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d905      	bls.n	80046bc <put_fat+0x1e>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <put_fat+0x24>
		res = FR_INT_ERR;
 80046bc:	2302      	movs	r3, #2
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e0f6      	b.n	80048b0 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	f000 809e 	beq.w	800480a <put_fat+0x16c>
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	f300 80e4 	bgt.w	800489c <put_fat+0x1fe>
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <put_fat+0x40>
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d06f      	beq.n	80047bc <put_fat+0x11e>
 80046dc:	e0de      	b.n	800489c <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4413      	add	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a5b      	lsrs	r3, r3, #9
 80046f6:	4413      	add	r3, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fe19 	bl	8004332 <move_window>
 8004700:	4603      	mov	r3, r0
 8004702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004704:	7ffb      	ldrb	r3, [r7, #31]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 80cb 	bne.w	80048a2 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	617a      	str	r2, [r7, #20]
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <put_fat+0xa4>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	b25b      	sxtb	r3, r3
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	b25a      	sxtb	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	b25b      	sxtb	r3, r3
 800473a:	4313      	orrs	r3, r2
 800473c:	b25b      	sxtb	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e001      	b.n	8004746 <put_fat+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	0a5b      	lsrs	r3, r3, #9
 800475c:	4413      	add	r3, r2
 800475e:	4619      	mov	r1, r3
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff fde6 	bl	8004332 <move_window>
 8004766:	4603      	mov	r3, r0
 8004768:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800476a:	7ffb      	ldrb	r3, [r7, #31]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f040 809a 	bne.w	80048a6 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <put_fat+0xf2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e00e      	b.n	80047ae <put_fat+0x110>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b25b      	sxtb	r3, r3
 8004796:	f023 030f 	bic.w	r3, r3, #15
 800479a:	b25a      	sxtb	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	b25b      	sxtb	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80047ba:	e079      	b.n	80048b0 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	4413      	add	r3, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fdb1 	bl	8004332 <move_window>
 80047d0:	4603      	mov	r3, r0
 80047d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d167      	bne.n	80048aa <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	3301      	adds	r3, #1
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004808:	e052      	b.n	80048b0 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	4413      	add	r3, r2
 8004816:	4619      	mov	r1, r3
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fd8a 	bl	8004332 <move_window>
 800481e:	4603      	mov	r3, r0
 8004820:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d142      	bne.n	80048ae <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3303      	adds	r3, #3
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	061a      	lsls	r2, r3, #24
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3302      	adds	r3, #2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	4313      	orrs	r3, r2
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	3201      	adds	r2, #1
 800484c:	7812      	ldrb	r2, [r2, #0]
 800484e:	0212      	lsls	r2, r2, #8
 8004850:	4313      	orrs	r3, r2
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4313      	orrs	r3, r2
 8004860:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b29b      	uxth	r3, r3
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	b29a      	uxth	r2, r3
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	3301      	adds	r3, #1
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0c1a      	lsrs	r2, r3, #16
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	3302      	adds	r3, #2
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	0e1a      	lsrs	r2, r3, #24
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	3303      	adds	r3, #3
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800489a:	e009      	b.n	80048b0 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800489c:	2302      	movs	r3, #2
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e006      	b.n	80048b0 <put_fat+0x212>
			if (res != FR_OK) break;
 80048a2:	bf00      	nop
 80048a4:	e004      	b.n	80048b0 <put_fat+0x212>
			if (res != FR_OK) break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <put_fat+0x212>
			if (res != FR_OK) break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <put_fat+0x212>
			if (res != FR_OK) break;
 80048ae:	bf00      	nop
		}
	}

	return res;
 80048b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d905      	bls.n	80048d6 <remove_chain+0x1c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <remove_chain+0x22>
		res = FR_INT_ERR;
 80048d6:	2302      	movs	r3, #2
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	e043      	b.n	8004964 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80048e0:	e036      	b.n	8004950 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff fe20 	bl	800452a <get_fat>
 80048ea:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d035      	beq.n	800495e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <remove_chain+0x44>
 80048f8:	2302      	movs	r3, #2
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e032      	b.n	8004964 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d102      	bne.n	800490c <remove_chain+0x52>
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
 800490a:	e02b      	b.n	8004964 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800490c:	2200      	movs	r2, #0
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fec4 	bl	800469e <put_fat>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d120      	bne.n	8004962 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d00f      	beq.n	800494c <remove_chain+0x92>
				fs->free_clust++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3c2      	bcc.n	80048e2 <remove_chain+0x28>
 800495c:	e002      	b.n	8004964 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004962:	bf00      	nop
		}
	}

	return res;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004984:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <create_chain+0x2a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d31c      	bcc.n	80049d2 <create_chain+0x64>
 8004998:	2301      	movs	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	e019      	b.n	80049d2 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fdc2 	bl	800452a <get_fat>
 80049a6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d801      	bhi.n	80049b2 <create_chain+0x44>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e076      	b.n	8004aa0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d101      	bne.n	80049be <create_chain+0x50>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	e070      	b.n	8004aa0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d201      	bcs.n	80049ce <create_chain+0x60>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	e068      	b.n	8004aa0 <create_chain+0x132>
		scl = clst;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d307      	bcc.n	80049f8 <create_chain+0x8a>
			ncl = 2;
 80049e8:	2302      	movs	r3, #2
 80049ea:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d901      	bls.n	80049f8 <create_chain+0x8a>
 80049f4:	2300      	movs	r3, #0
 80049f6:	e053      	b.n	8004aa0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fd95 	bl	800452a <get_fat>
 8004a00:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d002      	beq.n	8004a16 <create_chain+0xa8>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <create_chain+0xac>
			return cs;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	e042      	b.n	8004aa0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d1d9      	bne.n	80049d6 <create_chain+0x68>
 8004a22:	2300      	movs	r3, #0
 8004a24:	e03c      	b.n	8004aa0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004a26:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004a28:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fe35 	bl	800469e <put_fat>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <create_chain+0xe4>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d006      	beq.n	8004a52 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fe28 	bl	800469e <put_fat>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11a      	bne.n	8004a8e <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d018      	beq.n	8004a9e <create_chain+0x130>
			fs->free_clust--;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004a72:	1e5a      	subs	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004a8c:	e007      	b.n	8004a9e <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d102      	bne.n	8004a9a <create_chain+0x12c>
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	e000      	b.n	8004a9c <create_chain+0x12e>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004ab8:	3304      	adds	r3, #4
 8004aba:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	0a5b      	lsrs	r3, r3, #9
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004ac6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	613a      	str	r2, [r7, #16]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <clmt_clust+0x3c>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e010      	b.n	8004b06 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d307      	bcc.n	8004afc <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3304      	adds	r3, #4
 8004af8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004afa:	e7e9      	b.n	8004ad0 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8004afc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	4413      	add	r3, r2
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004b2a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d007      	beq.n	8004b42 <dir_sdi+0x32>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d301      	bcc.n	8004b46 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004b42:	2302      	movs	r3, #2
 8004b44:	e074      	b.n	8004c30 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10c      	bne.n	8004b66 <dir_sdi+0x56>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d105      	bne.n	8004b66 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b60:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004b64:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b72:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004b76:	461a      	mov	r2, r3
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d301      	bcc.n	8004b82 <dir_sdi+0x72>
			return FR_INT_ERR;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e056      	b.n	8004c30 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b88:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e032      	b.n	8004bf6 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b96:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004b9e:	e01e      	b.n	8004bde <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ba6:	6979      	ldr	r1, [r7, #20]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fcbe 	bl	800452a <get_fat>
 8004bae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d101      	bne.n	8004bbc <dir_sdi+0xac>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e039      	b.n	8004c30 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d907      	bls.n	8004bd2 <dir_sdi+0xc2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d301      	bcc.n	8004bd6 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e02c      	b.n	8004c30 <dir_sdi+0x120>
			idx -= ic;
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d2dc      	bcs.n	8004ba0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bec:	6979      	ldr	r1, [r7, #20]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fc7a 	bl	80044e8 <clust2sect>
 8004bf4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <dir_sdi+0xf8>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e013      	b.n	8004c30 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	091a      	lsrs	r2, r3, #4
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	441a      	add	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	015b      	lsls	r3, r3, #5
 8004c26:	441a      	add	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004c48:	3301      	adds	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <dir_next+0x26>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <dir_next+0x2a>
		return FR_NO_FILE;
 8004c5e:	2304      	movs	r3, #4
 8004c60:	e0dd      	b.n	8004e1e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 80c6 	bne.w	8004dfa <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c8c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004c90:	461a      	mov	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f0c0 80b0 	bcc.w	8004dfa <dir_next+0x1c2>
				return FR_NO_FILE;
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	e0bf      	b.n	8004e1e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004ca8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004cac:	3a01      	subs	r2, #1
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 80a2 	bne.w	8004dfa <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7ff fc30 	bl	800452a <get_fat>
 8004cca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d801      	bhi.n	8004cd6 <dir_next+0x9e>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e0a3      	b.n	8004e1e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d101      	bne.n	8004ce2 <dir_next+0xaa>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e09d      	b.n	8004e1e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ce8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d374      	bcc.n	8004ddc <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <dir_next+0xc4>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	e090      	b.n	8004e1e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7ff fe2f 	bl	800496e <create_chain>
 8004d10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <dir_next+0xe4>
 8004d18:	2307      	movs	r3, #7
 8004d1a:	e080      	b.n	8004e1e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <dir_next+0xee>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e07b      	b.n	8004e1e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d101      	bne.n	8004d32 <dir_next+0xfa>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e075      	b.n	8004e1e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fab1 	bl	80042a0 <sync_window>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <dir_next+0x110>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e06a      	b.n	8004e1e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff f895 	bl	8003e84 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7ff fbbd 	bl	80044e8 <clust2sect>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	e01b      	b.n	8004db2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fa87 	bl	80042a0 <sync_window>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <dir_next+0x164>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e040      	b.n	8004e1e <dir_next+0x1e6>
						dp->fs->winsect++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004da2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004da6:	3201      	adds	r2, #1
 8004da8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3301      	adds	r3, #1
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004db8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d3da      	bcc.n	8004d7a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dca:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	1a8a      	subs	r2, r1, r2
 8004dd8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fb7b 	bl	80044e8 <clust2sect>
 8004df2:	4602      	mov	r2, r0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	015b      	lsls	r3, r3, #5
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}

08004e26 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004e30:	2100      	movs	r1, #0
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fe6c 	bl	8004b10 <dir_sdi>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d131      	bne.n	8004ea6 <dir_alloc+0x80>
		n = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7ff fa6c 	bl	8004332 <move_window>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11f      	bne.n	8004ea4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2be5      	cmp	r3, #229	; 0xe5
 8004e6e:	d005      	beq.n	8004e7c <dir_alloc+0x56>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d102      	bne.n	8004e90 <dir_alloc+0x6a>
 8004e8a:	e00c      	b.n	8004ea6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004e90:	2101      	movs	r1, #1
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fed0 	bl	8004c38 <dir_next>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0d1      	beq.n	8004e46 <dir_alloc+0x20>
 8004ea2:	e000      	b.n	8004ea6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8004ea4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d101      	bne.n	8004eb0 <dir_alloc+0x8a>
 8004eac:	2307      	movs	r3, #7
 8004eae:	73fb      	strb	r3, [r7, #15]
	return res;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	331b      	adds	r3, #27
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	b21a      	sxth	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	331a      	adds	r3, #26
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b21b      	sxth	r3, r3
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	b21b      	sxth	r3, r3
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d10f      	bne.n	8004f08 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	3315      	adds	r3, #21
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	b21a      	sxth	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	3314      	adds	r3, #20
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b21b      	sxth	r3, r3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	b21b      	sxth	r3, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

	return cl;
 8004f08:	68fb      	ldr	r3, [r7, #12]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	331a      	adds	r3, #26
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	331b      	adds	r3, #27
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	0c1a      	lsrs	r2, r3, #16
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3314      	adds	r3, #20
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	0c1b      	lsrs	r3, r3, #16
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3315      	adds	r3, #21
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f68:	2100      	movs	r1, #0
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff fdd0 	bl	8004b10 <dir_sdi>
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <dir_find+0x1e>
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	e03b      	b.n	8004ff6 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f7ff f9d0 	bl	8004332 <move_window>
 8004f92:	4603      	mov	r3, r0
 8004f94:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d128      	bne.n	8004fee <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fa2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <dir_find+0x56>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	75fb      	strb	r3, [r7, #23]
 8004fb4:	e01e      	b.n	8004ff4 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	330b      	adds	r3, #11
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <dir_find+0x7a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004fca:	220b      	movs	r2, #11
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6938      	ldr	r0, [r7, #16]
 8004fd0:	f7fe ff72 	bl	8003eb8 <mem_cmp>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fe2b 	bl	8004c38 <dir_next>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0c8      	beq.n	8004f7e <dir_find+0x1e>
 8004fec:	e002      	b.n	8004ff4 <dir_find+0x94>
		if (res != FR_OK) break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <dir_find+0x94>
			break;
 8004ff2:	bf00      	nop

	return res;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005006:	2101      	movs	r1, #1
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ff0c 	bl	8004e26 <dir_alloc>
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d126      	bne.n	8005066 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7ff f983 	bl	8004332 <move_window>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d117      	bne.n	8005066 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800503c:	2220      	movs	r2, #32
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe ff1f 	bl	8003e84 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005052:	220b      	movs	r2, #11
 8005054:	4619      	mov	r1, r3
 8005056:	f7fe fef7 	bl	8003e48 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e002      	b.n	8005088 <create_name+0x18>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b2f      	cmp	r3, #47	; 0x2f
 800508e:	d0f8      	beq.n	8005082 <create_name+0x12>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b5c      	cmp	r3, #92	; 0x5c
 8005096:	d0f4      	beq.n	8005082 <create_name+0x12>
	sfn = dp->fn;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800509e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80050a0:	220b      	movs	r2, #11
 80050a2:	2120      	movs	r1, #32
 80050a4:	68b8      	ldr	r0, [r7, #8]
 80050a6:	f7fe feed 	bl	8003e84 <mem_set>
	si = i = b = 0; ni = 8;
 80050aa:	2300      	movs	r3, #0
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	2308      	movs	r3, #8
 80050b8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	617a      	str	r2, [r7, #20]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80050c8:	7fbb      	ldrb	r3, [r7, #30]
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d953      	bls.n	8005176 <create_name+0x106>
 80050ce:	7fbb      	ldrb	r3, [r7, #30]
 80050d0:	2b2f      	cmp	r3, #47	; 0x2f
 80050d2:	d050      	beq.n	8005176 <create_name+0x106>
 80050d4:	7fbb      	ldrb	r3, [r7, #30]
 80050d6:	2b5c      	cmp	r3, #92	; 0x5c
 80050d8:	d04d      	beq.n	8005176 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80050da:	7fbb      	ldrb	r3, [r7, #30]
 80050dc:	2b2e      	cmp	r3, #46	; 0x2e
 80050de:	d003      	beq.n	80050e8 <create_name+0x78>
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d30f      	bcc.n	8005108 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d102      	bne.n	80050f4 <create_name+0x84>
 80050ee:	7fbb      	ldrb	r3, [r7, #30]
 80050f0:	2b2e      	cmp	r3, #46	; 0x2e
 80050f2:	d001      	beq.n	80050f8 <create_name+0x88>
 80050f4:	2306      	movs	r3, #6
 80050f6:	e073      	b.n	80051e0 <create_name+0x170>
			i = 8; ni = 11;
 80050f8:	2308      	movs	r3, #8
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	230b      	movs	r3, #11
 80050fe:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005100:	7ffb      	ldrb	r3, [r7, #31]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e035      	b.n	8005174 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005108:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800510c:	2b00      	cmp	r3, #0
 800510e:	da08      	bge.n	8005122 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005110:	7ffb      	ldrb	r3, [r7, #31]
 8005112:	f043 0303 	orr.w	r3, r3, #3
 8005116:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005118:	7fbb      	ldrb	r3, [r7, #30]
 800511a:	3b80      	subs	r3, #128	; 0x80
 800511c:	4a32      	ldr	r2, [pc, #200]	; (80051e8 <create_name+0x178>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005122:	7fbb      	ldrb	r3, [r7, #30]
 8005124:	4619      	mov	r1, r3
 8005126:	4831      	ldr	r0, [pc, #196]	; (80051ec <create_name+0x17c>)
 8005128:	f7fe feec 	bl	8003f04 <chk_chr>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <create_name+0xc6>
				return FR_INVALID_NAME;
 8005132:	2306      	movs	r3, #6
 8005134:	e054      	b.n	80051e0 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005136:	7fbb      	ldrb	r3, [r7, #30]
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d907      	bls.n	800514c <create_name+0xdc>
 800513c:	7fbb      	ldrb	r3, [r7, #30]
 800513e:	2b5a      	cmp	r3, #90	; 0x5a
 8005140:	d804      	bhi.n	800514c <create_name+0xdc>
				b |= 2;
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	f043 0302 	orr.w	r3, r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e00c      	b.n	8005166 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800514c:	7fbb      	ldrb	r3, [r7, #30]
 800514e:	2b60      	cmp	r3, #96	; 0x60
 8005150:	d909      	bls.n	8005166 <create_name+0xf6>
 8005152:	7fbb      	ldrb	r3, [r7, #30]
 8005154:	2b7a      	cmp	r3, #122	; 0x7a
 8005156:	d806      	bhi.n	8005166 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005158:	7ffb      	ldrb	r3, [r7, #31]
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	7fbb      	ldrb	r3, [r7, #30]
 8005162:	3b20      	subs	r3, #32
 8005164:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	613a      	str	r2, [r7, #16]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	4413      	add	r3, r2
 8005170:	7fba      	ldrb	r2, [r7, #30]
 8005172:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005174:	e7a1      	b.n	80050ba <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	441a      	add	r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005180:	7fbb      	ldrb	r3, [r7, #30]
 8005182:	2b20      	cmp	r3, #32
 8005184:	d801      	bhi.n	800518a <create_name+0x11a>
 8005186:	2304      	movs	r3, #4
 8005188:	e000      	b.n	800518c <create_name+0x11c>
 800518a:	2300      	movs	r3, #0
 800518c:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <create_name+0x128>
 8005194:	2306      	movs	r3, #6
 8005196:	e023      	b.n	80051e0 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2be5      	cmp	r3, #229	; 0xe5
 800519e:	d102      	bne.n	80051a6 <create_name+0x136>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2205      	movs	r2, #5
 80051a4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d102      	bne.n	80051b2 <create_name+0x142>
 80051ac:	7ffb      	ldrb	r3, [r7, #31]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d103      	bne.n	80051c4 <create_name+0x154>
 80051bc:	7fbb      	ldrb	r3, [r7, #30]
 80051be:	f043 0310 	orr.w	r3, r3, #16
 80051c2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d103      	bne.n	80051d6 <create_name+0x166>
 80051ce:	7fbb      	ldrb	r3, [r7, #30]
 80051d0:	f043 0308 	orr.w	r3, r3, #8
 80051d4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	330b      	adds	r3, #11
 80051da:	7fba      	ldrb	r2, [r7, #30]
 80051dc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80051de:	2300      	movs	r3, #0
#endif
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	08006810 	.word	0x08006810
 80051ec:	0800678c 	.word	0x0800678c

080051f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b2f      	cmp	r3, #47	; 0x2f
 8005200:	d003      	beq.n	800520a <follow_path+0x1a>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b5c      	cmp	r3, #92	; 0x5c
 8005208:	d102      	bne.n	8005210 <follow_path+0x20>
		path++;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b1f      	cmp	r3, #31
 800521e:	d80a      	bhi.n	8005236 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005220:	2100      	movs	r1, #0
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fc74 	bl	8004b10 <dir_sdi>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005234:	e045      	b.n	80052c2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005236:	463b      	mov	r3, r7
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff ff18 	bl	8005070 <create_name>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d136      	bne.n	80052b8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fe88 	bl	8004f60 <dir_find>
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800525a:	7adb      	ldrb	r3, [r3, #11]
 800525c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d128      	bne.n	80052bc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800526a:	7bbb      	ldrb	r3, [r7, #14]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d123      	bne.n	80052bc <follow_path+0xcc>
 8005274:	2305      	movs	r3, #5
 8005276:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005278:	e020      	b.n	80052bc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11d      	bne.n	80052c0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800528a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	330b      	adds	r3, #11
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800529a:	2305      	movs	r3, #5
 800529c:	73fb      	strb	r3, [r7, #15]
 800529e:	e010      	b.n	80052c2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fe06 	bl	8004eba <ld_clust>
 80052ae:	4602      	mov	r2, r0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80052b6:	e7be      	b.n	8005236 <follow_path+0x46>
			if (res != FR_OK) break;
 80052b8:	bf00      	nop
 80052ba:	e002      	b.n	80052c2 <follow_path+0xd2>
				break;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80052c0:	bf00      	nop
		}
	}

	return res;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d031      	beq.n	8005346 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e002      	b.n	80052f0 <get_ldnumber+0x24>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	3301      	adds	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d903      	bls.n	8005300 <get_ldnumber+0x34>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b3a      	cmp	r3, #58	; 0x3a
 80052fe:	d1f4      	bne.n	80052ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b3a      	cmp	r3, #58	; 0x3a
 8005306:	d11c      	bne.n	8005342 <get_ldnumber+0x76>
			tp = *path;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	60fa      	str	r2, [r7, #12]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	3b30      	subs	r3, #48	; 0x30
 8005318:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b09      	cmp	r3, #9
 800531e:	d80e      	bhi.n	800533e <get_ldnumber+0x72>
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	429a      	cmp	r2, r3
 8005326:	d10a      	bne.n	800533e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d107      	bne.n	800533e <get_ldnumber+0x72>
					vol = (int)i;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3301      	adds	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	e002      	b.n	8005348 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005346:	693b      	ldr	r3, [r7, #16]
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
	...

08005354 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fe ffdd 	bl	8004332 <move_window>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <check_fs+0x2e>
		return 3;
 800537e:	2303      	movs	r3, #3
 8005380:	e04a      	b.n	8005418 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005388:	3301      	adds	r3, #1
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	b21a      	sxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005396:	b21b      	sxth	r3, r3
 8005398:	4313      	orrs	r3, r2
 800539a:	b21b      	sxth	r3, r3
 800539c:	4a20      	ldr	r2, [pc, #128]	; (8005420 <check_fs+0xcc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d001      	beq.n	80053a6 <check_fs+0x52>
		return 2;
 80053a2:	2302      	movs	r3, #2
 80053a4:	e038      	b.n	8005418 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3336      	adds	r3, #54	; 0x36
 80053aa:	3303      	adds	r3, #3
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	061a      	lsls	r2, r3, #24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3336      	adds	r3, #54	; 0x36
 80053b4:	3302      	adds	r3, #2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	4313      	orrs	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	3236      	adds	r2, #54	; 0x36
 80053c0:	3201      	adds	r2, #1
 80053c2:	7812      	ldrb	r2, [r2, #0]
 80053c4:	0212      	lsls	r2, r2, #8
 80053c6:	4313      	orrs	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053d4:	4a13      	ldr	r2, [pc, #76]	; (8005424 <check_fs+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d101      	bne.n	80053de <check_fs+0x8a>
		return 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	e01c      	b.n	8005418 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3352      	adds	r3, #82	; 0x52
 80053e2:	3303      	adds	r3, #3
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	061a      	lsls	r2, r3, #24
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3352      	adds	r3, #82	; 0x52
 80053ec:	3302      	adds	r3, #2
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	4313      	orrs	r3, r2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	3252      	adds	r2, #82	; 0x52
 80053f8:	3201      	adds	r2, #1
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	0212      	lsls	r2, r2, #8
 80053fe:	4313      	orrs	r3, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005406:	4313      	orrs	r3, r2
 8005408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800540c:	4a05      	ldr	r2, [pc, #20]	; (8005424 <check_fs+0xd0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <check_fs+0xc2>
		return 0;
 8005412:	2300      	movs	r3, #0
 8005414:	e000      	b.n	8005418 <check_fs+0xc4>

	return 1;
 8005416:	2301      	movs	r3, #1
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	ffffaa55 	.word	0xffffaa55
 8005424:	00544146 	.word	0x00544146

08005428 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b096      	sub	sp, #88	; 0x58
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f7ff ff45 	bl	80052cc <get_ldnumber>
 8005442:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005446:	2b00      	cmp	r3, #0
 8005448:	da01      	bge.n	800544e <find_volume+0x26>
 800544a:	230b      	movs	r3, #11
 800544c:	e2a8      	b.n	80059a0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800544e:	4a9d      	ldr	r2, [pc, #628]	; (80056c4 <find_volume+0x29c>)
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <find_volume+0x3a>
 800545e:	230c      	movs	r3, #12
 8005460:	e29e      	b.n	80059a0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005466:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <find_volume+0x82>
		stat = disk_status(fs->drv);
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fc47 	bl	8003d0c <disk_status>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <find_volume+0x7e>
 8005496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80054a2:	230a      	movs	r3, #10
 80054a4:	e27c      	b.n	80059a0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80054a6:	2300      	movs	r3, #0
 80054a8:	e27a      	b.n	80059a0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80054b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe fc3c 	bl	8003d40 <disk_initialize>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80054ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80054da:	2303      	movs	r3, #3
 80054dc:	e260      	b.n	80059a0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <find_volume+0xcc>
 80054e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80054f0:	230a      	movs	r3, #10
 80054f2:	e255      	b.n	80059a0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80054f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054fc:	f7ff ff2a 	bl	8005354 <check_fs>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800550a:	2b01      	cmp	r3, #1
 800550c:	d153      	bne.n	80055b6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800550e:	2300      	movs	r3, #0
 8005510:	643b      	str	r3, [r7, #64]	; 0x40
 8005512:	e028      	b.n	8005566 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800551e:	4413      	add	r3, r2
 8005520:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	3304      	adds	r3, #4
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <find_volume+0x12a>
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	330b      	adds	r3, #11
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	061a      	lsls	r2, r3, #24
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	330a      	adds	r3, #10
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	4313      	orrs	r3, r2
 800553e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005540:	3209      	adds	r2, #9
 8005542:	7812      	ldrb	r2, [r2, #0]
 8005544:	0212      	lsls	r2, r2, #8
 8005546:	4313      	orrs	r3, r2
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	3208      	adds	r2, #8
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	431a      	orrs	r2, r3
 8005550:	e000      	b.n	8005554 <find_volume+0x12c>
 8005552:	2200      	movs	r2, #0
 8005554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3358      	adds	r3, #88	; 0x58
 800555a:	443b      	add	r3, r7
 800555c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	3301      	adds	r3, #1
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
 8005566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005568:	2b03      	cmp	r3, #3
 800556a:	d9d3      	bls.n	8005514 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800556c:	2300      	movs	r3, #0
 800556e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <find_volume+0x154>
 8005576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005578:	3b01      	subs	r3, #1
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800557c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	3358      	adds	r3, #88	; 0x58
 8005582:	443b      	add	r3, r7
 8005584:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005588:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800558a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <find_volume+0x174>
 8005590:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005592:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005594:	f7ff fede 	bl	8005354 <check_fs>
 8005598:	4603      	mov	r3, r0
 800559a:	e000      	b.n	800559e <find_volume+0x176>
 800559c:	2302      	movs	r3, #2
 800559e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80055a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <find_volume+0x18e>
 80055aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ac:	3301      	adds	r3, #1
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
 80055b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d9e2      	bls.n	800557c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80055b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d101      	bne.n	80055c2 <find_volume+0x19a>
 80055be:	2301      	movs	r3, #1
 80055c0:	e1ee      	b.n	80059a0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80055c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <find_volume+0x1a6>
 80055ca:	230d      	movs	r3, #13
 80055cc:	e1e8      	b.n	80059a0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	7b1b      	ldrb	r3, [r3, #12]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	b21a      	sxth	r2, r3
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	7adb      	ldrb	r3, [r3, #11]
 80055da:	b21b      	sxth	r3, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	b21b      	sxth	r3, r3
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d001      	beq.n	80055ea <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 80055e6:	230d      	movs	r3, #13
 80055e8:	e1da      	b.n	80059a0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	7ddb      	ldrb	r3, [r3, #23]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	b21a      	sxth	r2, r3
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	7d9b      	ldrb	r3, [r3, #22]
 80055f6:	b21b      	sxth	r3, r3
 80055f8:	4313      	orrs	r3, r2
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d112      	bne.n	800562c <find_volume+0x204>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800560c:	061a      	lsls	r2, r3, #24
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	4313      	orrs	r3, r2
 8005618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800561e:	0212      	lsls	r2, r2, #8
 8005620:	4313      	orrs	r3, r2
 8005622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005624:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005628:	4313      	orrs	r3, r2
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005630:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	7c1a      	ldrb	r2, [r3, #16]
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005644:	2b01      	cmp	r3, #1
 8005646:	d006      	beq.n	8005656 <find_volume+0x22e>
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800564e:	2b02      	cmp	r3, #2
 8005650:	d001      	beq.n	8005656 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8005652:	230d      	movs	r3, #13
 8005654:	e1a4      	b.n	80059a0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800565c:	461a      	mov	r2, r3
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	fb02 f303 	mul.w	r3, r2, r3
 8005664:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	7b5a      	ldrb	r2, [r3, #13]
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <find_volume+0x268>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005680:	461a      	mov	r2, r3
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005688:	3b01      	subs	r3, #1
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8005690:	230d      	movs	r3, #13
 8005692:	e185      	b.n	80059a0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	7c9b      	ldrb	r3, [r3, #18]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	b21a      	sxth	r2, r3
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	7c5b      	ldrb	r3, [r3, #17]
 80056a0:	b21b      	sxth	r3, r3
 80056a2:	4313      	orrs	r3, r2
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80056be:	230d      	movs	r3, #13
 80056c0:	e16e      	b.n	80059a0 <find_volume+0x578>
 80056c2:	bf00      	nop
 80056c4:	20004330 	.word	0x20004330

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	7d1b      	ldrb	r3, [r3, #20]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	b21a      	sxth	r2, r3
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	7cdb      	ldrb	r3, [r3, #19]
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b21b      	sxth	r3, r3
 80056da:	b29b      	uxth	r3, r3
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d112      	bne.n	800570a <find_volume+0x2e2>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80056ea:	061a      	lsls	r2, r3, #24
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	4313      	orrs	r3, r2
 80056f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80056fc:	0212      	lsls	r2, r2, #8
 80056fe:	4313      	orrs	r3, r2
 8005700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005702:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005706:	4313      	orrs	r3, r2
 8005708:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	7bdb      	ldrb	r3, [r3, #15]
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	b21a      	sxth	r2, r3
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	7b9b      	ldrb	r3, [r3, #14]
 8005716:	b21b      	sxth	r3, r3
 8005718:	4313      	orrs	r3, r2
 800571a:	b21b      	sxth	r3, r3
 800571c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800571e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <find_volume+0x300>
 8005724:	230d      	movs	r3, #13
 8005726:	e13b      	b.n	80059a0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005728:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	4413      	add	r3, r2
 800572e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005730:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005734:	0912      	lsrs	r2, r2, #4
 8005736:	b292      	uxth	r2, r2
 8005738:	4413      	add	r3, r2
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800573c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	429a      	cmp	r2, r3
 8005742:	d201      	bcs.n	8005748 <find_volume+0x320>
 8005744:	230d      	movs	r3, #13
 8005746:	e12b      	b.n	80059a0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005750:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005754:	fbb3 f3f2 	udiv	r3, r3, r2
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <find_volume+0x33c>
 8005760:	230d      	movs	r3, #13
 8005762:	e11d      	b.n	80059a0 <find_volume+0x578>
	fmt = FS_FAT12;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005770:	4293      	cmp	r3, r2
 8005772:	d902      	bls.n	800577a <find_volume+0x352>
 8005774:	2302      	movs	r3, #2
 8005776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005780:	4293      	cmp	r3, r2
 8005782:	d902      	bls.n	800578a <find_volume+0x362>
 8005784:	2303      	movs	r3, #3
 8005786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1c9a      	adds	r2, r3, #2
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005798:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800579c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a0:	441a      	add	r2, r3
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80057a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	441a      	add	r2, r3
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80057b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d121      	bne.n	8005800 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <find_volume+0x3a2>
 80057c6:	230d      	movs	r3, #13
 80057c8:	e0ea      	b.n	80059a0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057d0:	061a      	lsls	r2, r3, #24
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	4313      	orrs	r3, r2
 80057dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057de:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80057e2:	0212      	lsls	r2, r2, #8
 80057e4:	4313      	orrs	r3, r2
 80057e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80057ec:	431a      	orrs	r2, r3
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	647b      	str	r3, [r7, #68]	; 0x44
 80057fe:	e025      	b.n	800584c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <find_volume+0x3e6>
 800580a:	230d      	movs	r3, #13
 800580c:	e0c8      	b.n	80059a0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005816:	441a      	add	r2, r3
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800581e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005822:	2b02      	cmp	r3, #2
 8005824:	d104      	bne.n	8005830 <find_volume+0x408>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	e00c      	b.n	800584a <find_volume+0x422>
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	085a      	lsrs	r2, r3, #1
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800584a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005854:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005858:	0a5b      	lsrs	r3, r3, #9
 800585a:	429a      	cmp	r2, r3
 800585c:	d201      	bcs.n	8005862 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800585e:	230d      	movs	r3, #13
 8005860:	e09e      	b.n	80059a0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	f04f 32ff 	mov.w	r2, #4294967295
 8005868:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005884:	2b03      	cmp	r3, #3
 8005886:	d177      	bne.n	8005978 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	b21a      	sxth	r2, r3
 8005892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005898:	b21b      	sxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b21b      	sxth	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d16a      	bne.n	8005978 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80058a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a4:	3301      	adds	r3, #1
 80058a6:	4619      	mov	r1, r3
 80058a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058aa:	f7fe fd42 	bl	8004332 <move_window>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d161      	bne.n	8005978 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	b21a      	sxth	r2, r3
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	4a35      	ldr	r2, [pc, #212]	; (80059a8 <find_volume+0x580>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d14f      	bne.n	8005978 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	78db      	ldrb	r3, [r3, #3]
 80058dc:	061a      	lsls	r2, r3, #24
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	789b      	ldrb	r3, [r3, #2]
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	4313      	orrs	r3, r2
 80058e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e8:	7852      	ldrb	r2, [r2, #1]
 80058ea:	0212      	lsls	r2, r2, #8
 80058ec:	4313      	orrs	r3, r2
 80058ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <find_volume+0x584>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d13e      	bne.n	8005978 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005900:	061a      	lsls	r2, r3, #24
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	4313      	orrs	r3, r2
 800590c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005912:	0212      	lsls	r2, r2, #8
 8005914:	4313      	orrs	r3, r2
 8005916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005918:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800591c:	4313      	orrs	r3, r2
 800591e:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <find_volume+0x588>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d129      	bne.n	8005978 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800592a:	061a      	lsls	r2, r3, #24
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	4313      	orrs	r3, r2
 8005936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005938:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800593c:	0212      	lsls	r2, r2, #8
 800593e:	4313      	orrs	r3, r2
 8005940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005942:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005946:	431a      	orrs	r2, r3
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005954:	061a      	lsls	r2, r3, #24
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	4313      	orrs	r3, r2
 8005960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005962:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005966:	0212      	lsls	r2, r2, #8
 8005968:	4313      	orrs	r3, r2
 800596a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800596c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005970:	431a      	orrs	r2, r3
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800597e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <find_volume+0x58c>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <find_volume+0x58c>)
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <find_volume+0x58c>)
 8005990:	881a      	ldrh	r2, [r3, #0]
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800599a:	f7fe fc57 	bl	800424c <clear_lock>
#endif

	return FR_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3758      	adds	r7, #88	; 0x58
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	ffffaa55 	.word	0xffffaa55
 80059ac:	41615252 	.word	0x41615252
 80059b0:	61417272 	.word	0x61417272
 80059b4:	20004334 	.word	0x20004334

080059b8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d022      	beq.n	8005a10 <validate+0x58>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01d      	beq.n	8005a10 <validate+0x58>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <validate+0x58>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059e8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d10c      	bne.n	8005a10 <validate+0x58>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059fc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe f983 	bl	8003d0c <disk_status>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005a10:	2309      	movs	r3, #9
 8005a12:	e000      	b.n	8005a16 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fc48 	bl	80052cc <get_ldnumber>
 8005a3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da01      	bge.n	8005a48 <f_mount+0x28>
 8005a44:	230b      	movs	r3, #11
 8005a46:	e02d      	b.n	8005aa4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005a48:	4a18      	ldr	r2, [pc, #96]	; (8005aac <f_mount+0x8c>)
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005a58:	69b8      	ldr	r0, [r7, #24]
 8005a5a:	f7fe fbf7 	bl	800424c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	490d      	ldr	r1, [pc, #52]	; (8005aac <f_mount+0x8c>)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <f_mount+0x6a>
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d001      	beq.n	8005a8e <f_mount+0x6e>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e00a      	b.n	8005aa4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005a8e:	f107 0108 	add.w	r1, r7, #8
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	2200      	movs	r2, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fcc5 	bl	8005428 <find_volume>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20004330 	.word	0x20004330

08005ab0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005abc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ac6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005aca:	6019      	str	r1, [r3, #0]
 8005acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ad0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005ad4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ada:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <f_open+0x38>
 8005ae4:	2309      	movs	r3, #9
 8005ae6:	e257      	b.n	8005f98 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8005ae8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005aec:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005afc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005b00:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005b04:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	f002 021f 	and.w	r2, r2, #31
 8005b0e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005b10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b14:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f023 0301 	bic.w	r3, r3, #1
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	f107 0320 	add.w	r3, r7, #32
 8005b28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fc7b 	bl	8005428 <find_volume>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005b38:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 8229 	bne.w	8005f94 <f_open+0x4e4>
		INIT_BUF(dj);
 8005b42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b46:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b4a:	f107 0214 	add.w	r2, r7, #20
 8005b4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b56:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	f107 0320 	add.w	r3, r7, #32
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fb44 	bl	80051f0 <follow_path>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8005b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b72:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005b76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b7a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b7e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11d      	bne.n	8005bc2 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8005b86:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8005b8e:	2306      	movs	r3, #6
 8005b90:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005b94:	e015      	b.n	8005bc2 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005b9a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f107 0320 	add.w	r3, r7, #32
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe f9be 	bl	8003f38 <chk_lock>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005bc6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	f003 031c 	and.w	r3, r3, #28
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80e6 	beq.w	8005da2 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8005bd6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d027      	beq.n	8005c2e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005bde:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d10e      	bne.n	8005c04 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005be6:	f7fe fa13 	bl	8004010 <enq_lock>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d006      	beq.n	8005bfe <f_open+0x14e>
 8005bf0:	f107 0320 	add.w	r3, r7, #32
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fa02 	bl	8004ffe <dir_register>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	e000      	b.n	8005c00 <f_open+0x150>
 8005bfe:	2312      	movs	r3, #18
 8005c00:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c08:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005c0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005c10:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	f042 0208 	orr.w	r2, r2, #8
 8005c1a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c20:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005c24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c28:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005c2c:	e017      	b.n	8005c5e <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005c2e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005c32:	330b      	adds	r3, #11
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 0311 	and.w	r3, r3, #17
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <f_open+0x196>
					res = FR_DENIED;
 8005c3e:	2307      	movs	r3, #7
 8005c40:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005c44:	e00b      	b.n	8005c5e <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c4a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <f_open+0x1ae>
						res = FR_EXIST;
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005c5e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f040 80c1 	bne.w	8005dea <f_open+0x33a>
 8005c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005c6c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80b7 	beq.w	8005dea <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8005c7c:	f7fd ffa4 	bl	8003bc8 <get_fattime>
 8005c80:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005c84:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005c88:	330e      	adds	r3, #14
 8005c8a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ca0:	330f      	adds	r3, #15
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005caa:	0c1a      	lsrs	r2, r3, #16
 8005cac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cb0:	3310      	adds	r3, #16
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005cba:	0e1a      	lsrs	r2, r3, #24
 8005cbc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cc0:	3311      	adds	r3, #17
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005cc6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cca:	330b      	adds	r3, #11
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005cd0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cd4:	331c      	adds	r3, #28
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cde:	331d      	adds	r3, #29
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ce8:	331e      	adds	r3, #30
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005cf2:	331f      	adds	r3, #31
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005cfc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d04:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff f8d6 	bl	8004eba <ld_clust>
 8005d0e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8005d12:	2100      	movs	r1, #0
 8005d14:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8005d18:	f7ff f8fc 	bl	8004f14 <st_clust>
				dj.fs->wflag = 1;
 8005d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d20:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005d2e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d059      	beq.n	8005dea <f_open+0x33a>
					dw = dj.fs->winsect;
 8005d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d3a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d42:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005d46:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8005d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d4e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d56:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fdad 	bl	80048ba <remove_chain>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8005d66:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d13d      	bne.n	8005dea <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d72:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d7a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d88:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d90:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe facc 	bl	8004332 <move_window>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005da0:	e023      	b.n	8005dea <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005da2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11f      	bne.n	8005dea <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005daa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005dae:	330b      	adds	r3, #11
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <f_open+0x312>
					res = FR_NO_FILE;
 8005dba:	2304      	movs	r3, #4
 8005dbc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005dc0:	e013      	b.n	8005dea <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005dc6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <f_open+0x33a>
 8005dd4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005dd8:	330b      	adds	r3, #11
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <f_open+0x33a>
						res = FR_DENIED;
 8005de4:	2307      	movs	r3, #7
 8005de6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8005dea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d153      	bne.n	8005e9a <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005df2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005df6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <f_open+0x36c>
				mode |= FA__WRITTEN;
 8005e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e08:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005e0c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005e10:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005e14:	7812      	ldrb	r2, [r2, #0]
 8005e16:	f042 0220 	orr.w	r2, r2, #32
 8005e1a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e20:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005e24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e28:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e30:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8005e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e3e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005e48:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e50:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	f107 0320 	add.w	r3, r7, #32
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe f8f3 	bl	8004058 <inc_lock>
 8005e72:	4602      	mov	r2, r0
 8005e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e78:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8005e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005e86:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <f_open+0x3ea>
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005e9a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d178      	bne.n	8005f94 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8005ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ea6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005eb0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8005eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ebe:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ece:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ed6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe ffed 	bl	8004eba <ld_clust>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ee6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005ef0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005ef4:	331f      	adds	r3, #31
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	061a      	lsls	r2, r3, #24
 8005efa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005efe:	331e      	adds	r3, #30
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	041b      	lsls	r3, r3, #16
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005f0a:	321d      	adds	r2, #29
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	0212      	lsls	r2, r2, #8
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8005f16:	321c      	adds	r2, #28
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f20:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8005f2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f2e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8005f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f3e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f4e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005f66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f6a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8005f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f78:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f82:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005f8a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8005f94:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08c      	sub	sp, #48	; 0x30
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fcfc 	bl	80059b8 <validate>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005fc4:	7ffb      	ldrb	r3, [r7, #31]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <f_read+0x2c>
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	e150      	b.n	8006270 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8005fde:	e147      	b.n	8006270 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005fee:	2307      	movs	r3, #7
 8005ff0:	e13e      	b.n	8006270 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	429a      	cmp	r2, r3
 8006008:	f240 812d 	bls.w	8006266 <f_read+0x2c4>
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006010:	e129      	b.n	8006266 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 80f2 	bne.w	8006206 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006028:	0a5b      	lsrs	r3, r3, #9
 800602a:	b2da      	uxtb	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006032:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006036:	3b01      	subs	r3, #1
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4013      	ands	r3, r2
 800603c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d139      	bne.n	80060b8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006056:	e018      	b.n	800608a <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006068:	4619      	mov	r1, r3
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7fe fd1c 	bl	8004aa8 <clmt_clust>
 8006070:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006072:	e00a      	b.n	800608a <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7fe fa51 	bl	800452a <get_fat>
 8006088:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d805      	bhi.n	800609c <f_read+0xfa>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006098:	2302      	movs	r3, #2
 800609a:	e0e9      	b.n	8006270 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d105      	bne.n	80060b0 <f_read+0x10e>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0df      	b.n	8006270 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe fa0e 	bl	80044e8 <clust2sect>
 80060cc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d105      	bne.n	80060e0 <f_read+0x13e>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80060dc:	2302      	movs	r3, #2
 80060de:	e0c7      	b.n	8006270 <f_read+0x2ce>
			sect += csect;
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4413      	add	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	0a5b      	lsrs	r3, r3, #9
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d046      	beq.n	8006182 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80060f4:	7dfa      	ldrb	r2, [r7, #23]
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	4413      	add	r3, r2
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006100:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006104:	4293      	cmp	r3, r2
 8006106:	d908      	bls.n	800611a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800610e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006112:	461a      	mov	r2, r3
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006120:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	6a39      	ldr	r1, [r7, #32]
 800612a:	f7fd fe2f 	bl	8003d8c <disk_read>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800613c:	2301      	movs	r3, #1
 800613e:	e097      	b.n	8006270 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d015      	beq.n	800617a <f_read+0x1d8>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615a:	429a      	cmp	r2, r3
 800615c:	d90d      	bls.n	800617a <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	025b      	lsls	r3, r3, #9
 800616a:	6a3a      	ldr	r2, [r7, #32]
 800616c:	4413      	add	r3, r2
 800616e:	68f9      	ldr	r1, [r7, #12]
 8006170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006174:	4618      	mov	r0, r3
 8006176:	f7fd fe67 	bl	8003e48 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	025b      	lsls	r3, r3, #9
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006180:	e05b      	b.n	800623a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	d037      	beq.n	80061fe <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01d      	beq.n	80061d8 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061a2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80061ae:	2301      	movs	r3, #1
 80061b0:	f7fd fe0c 	bl	8003dcc <disk_write>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80061c2:	2301      	movs	r3, #1
 80061c4:	e054      	b.n	8006270 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80061cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061de:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	2301      	movs	r3, #1
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	f7fd fdd0 	bl	8003d8c <disk_read>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80061fa:	2301      	movs	r3, #1
 80061fc:	e038      	b.n	8006270 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800620c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006210:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	429a      	cmp	r2, r3
 800621c:	d901      	bls.n	8006222 <f_read+0x280>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006232:	4619      	mov	r1, r3
 8006234:	6a38      	ldr	r0, [r7, #32]
 8006236:	f7fd fe07 	bl	8003e48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	4413      	add	r3, r2
 8006240:	623b      	str	r3, [r7, #32]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	441a      	add	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f47f aed2 	bne.w	8006012 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3730      	adds	r7, #48	; 0x30
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fb99 	bl	80059b8 <validate>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800628a:	7dfb      	ldrb	r3, [r7, #23]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 80a8 	bne.w	80063e2 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80a0 	beq.w	80063e2 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80062c2:	2301      	movs	r3, #1
 80062c4:	f7fd fd82 	bl	8003dcc <disk_write>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80062ce:	2301      	movs	r3, #1
 80062d0:	e088      	b.n	80063e4 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80062d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe f81d 	bl	8004332 <move_window>
 80062f8:	4603      	mov	r3, r0
 80062fa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d16f      	bne.n	80063e2 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006308:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	330b      	adds	r3, #11
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	330b      	adds	r3, #11
 8006314:	f042 0220 	orr.w	r2, r2, #32
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	331c      	adds	r3, #28
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006330:	b29b      	uxth	r3, r3
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	b29a      	uxth	r2, r3
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	331d      	adds	r3, #29
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006344:	0c1a      	lsrs	r2, r3, #16
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	331e      	adds	r3, #30
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006354:	0e1a      	lsrs	r2, r3, #24
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	331f      	adds	r3, #31
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006364:	4619      	mov	r1, r3
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f7fe fdd4 	bl	8004f14 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800636c:	f7fd fc2c 	bl	8003bc8 <get_fattime>
 8006370:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3316      	adds	r3, #22
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	b29b      	uxth	r3, r3
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	b29a      	uxth	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	3317      	adds	r3, #23
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	0c1a      	lsrs	r2, r3, #16
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	3318      	adds	r3, #24
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	0e1a      	lsrs	r2, r3, #24
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3319      	adds	r3, #25
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3312      	adds	r3, #18
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	3313      	adds	r3, #19
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80063ba:	f023 0320 	bic.w	r3, r3, #32
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fd ffd8 	bl	800438e <sync_fs>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ff3f 	bl	8006278 <f_sync>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d116      	bne.n	8006432 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff fad7 	bl	80059b8 <validate>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10e      	bne.n	8006432 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800641a:	4618      	mov	r0, r3
 800641c:	f7fd fed2 	bl	80041c4 <dec_lock>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d103      	bne.n	8006432 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006452:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 8006454:	7a5b      	ldrb	r3, [r3, #9]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d831      	bhi.n	80064c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800645c:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 800645e:	7a5b      	ldrb	r3, [r3, #9]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 8006466:	2100      	movs	r1, #0
 8006468:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 800646c:	7a5b      	ldrb	r3, [r3, #9]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800647a:	4b14      	ldr	r3, [pc, #80]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 800647c:	7a5b      	ldrb	r3, [r3, #9]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 8006484:	4413      	add	r3, r2
 8006486:	79fa      	ldrb	r2, [r7, #7]
 8006488:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 800648c:	7a5b      	ldrb	r3, [r3, #9]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	b2d1      	uxtb	r1, r2
 8006494:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <FATFS_LinkDriverEx+0x90>)
 8006496:	7251      	strb	r1, [r2, #9]
 8006498:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	3330      	adds	r3, #48	; 0x30
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3301      	adds	r3, #1
 80064a8:	223a      	movs	r2, #58	; 0x3a
 80064aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3302      	adds	r3, #2
 80064b0:	222f      	movs	r2, #47	; 0x2f
 80064b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3303      	adds	r3, #3
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	20004350 	.word	0x20004350

080064d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80064da:	2200      	movs	r2, #0
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ffac 	bl	800643c <FATFS_LinkDriverEx>
 80064e4:	4603      	mov	r3, r0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <SD_initialize+0x38>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8006500:	f7fd fb6a 	bl	8003bd8 <BSP_SD_Init>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d107      	bne.n	800651a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <SD_initialize+0x38>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	b2da      	uxtb	r2, r3
 8006516:	4b04      	ldr	r3, [pc, #16]	; (8006528 <SD_initialize+0x38>)
 8006518:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800651a:	4b03      	ldr	r3, [pc, #12]	; (8006528 <SD_initialize+0x38>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	b2db      	uxtb	r3, r3
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000009 	.word	0x20000009

0800652c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <SD_status+0x38>)
 8006538:	2201      	movs	r2, #1
 800653a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800653c:	f7fd fba0 	bl	8003c80 <BSP_SD_GetCardState>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d107      	bne.n	8006556 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006546:	4b07      	ldr	r3, [pc, #28]	; (8006564 <SD_status+0x38>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4b04      	ldr	r3, [pc, #16]	; (8006564 <SD_status+0x38>)
 8006554:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8006556:	4b03      	ldr	r3, [pc, #12]	; (8006564 <SD_status+0x38>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b2db      	uxtb	r3, r3
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000009 	.word	0x20000009

08006568 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <SD_read+0x54>)
 800657e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <SD_read+0x58>)
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	68b8      	ldr	r0, [r7, #8]
 8006588:	f7fd fb3e 	bl	8003c08 <BSP_SD_ReadBlocks>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10e      	bne.n	80065b0 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006592:	e006      	b.n	80065a2 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	613a      	str	r2, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <SD_read+0x3a>
      {
        return RES_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e007      	b.n	80065b2 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80065a2:	f7fd fb6d 	bl	8003c80 <BSP_SD_GetCardState>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f3      	bne.n	8006594 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	000186a0 	.word	0x000186a0
 80065c0:	05f5e100 	.word	0x05f5e100

080065c4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <SD_write+0x54>)
 80065da:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80065dc:	4b0f      	ldr	r3, [pc, #60]	; (800661c <SD_write+0x58>)
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	68b8      	ldr	r0, [r7, #8]
 80065e4:	f7fd fb2e 	bl	8003c44 <BSP_SD_WriteBlocks>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10e      	bne.n	800660c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80065ee:	e006      	b.n	80065fe <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1e5a      	subs	r2, r3, #1
 80065f4:	613a      	str	r2, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <SD_write+0x3a>
      {
        return RES_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e007      	b.n	800660e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80065fe:	f7fd fb3f 	bl	8003c80 <BSP_SD_GetCardState>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1f3      	bne.n	80065f0 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	000186a0 	.word	0x000186a0
 800661c:	05f5e100 	.word	0x05f5e100

08006620 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08c      	sub	sp, #48	; 0x30
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	603a      	str	r2, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
 800662c:	460b      	mov	r3, r1
 800662e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <SD_ioctl+0xa8>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <SD_ioctl+0x28>
 8006644:	2303      	movs	r3, #3
 8006646:	e03b      	b.n	80066c0 <SD_ioctl+0xa0>
  
  switch (cmd)
 8006648:	79bb      	ldrb	r3, [r7, #6]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d833      	bhi.n	80066b6 <SD_ioctl+0x96>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <SD_ioctl+0x34>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006665 	.word	0x08006665
 8006658:	0800666d 	.word	0x0800666d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800669f 	.word	0x0800669f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800666a:	e027      	b.n	80066bc <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800666c:	f107 030c 	add.w	r3, r7, #12
 8006670:	4618      	mov	r0, r3
 8006672:	f7fd fb15 	bl	8003ca0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006682:	e01b      	b.n	80066bc <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006684:	f107 030c 	add.w	r3, r7, #12
 8006688:	4618      	mov	r0, r3
 800668a:	f7fd fb09 	bl	8003ca0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	b29a      	uxth	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800669c:	e00e      	b.n	80066bc <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800669e:	f107 030c 	add.w	r3, r7, #12
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fd fafc 	bl	8003ca0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80066a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80066b4:	e002      	b.n	80066bc <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 80066b6:	2304      	movs	r3, #4
 80066b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 80066bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3730      	adds	r7, #48	; 0x30
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000009 	.word	0x20000009

080066cc <__libc_init_array>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	2600      	movs	r6, #0
 80066d0:	4d0c      	ldr	r5, [pc, #48]	; (8006704 <__libc_init_array+0x38>)
 80066d2:	4c0d      	ldr	r4, [pc, #52]	; (8006708 <__libc_init_array+0x3c>)
 80066d4:	1b64      	subs	r4, r4, r5
 80066d6:	10a4      	asrs	r4, r4, #2
 80066d8:	42a6      	cmp	r6, r4
 80066da:	d109      	bne.n	80066f0 <__libc_init_array+0x24>
 80066dc:	f000 f832 	bl	8006744 <_init>
 80066e0:	2600      	movs	r6, #0
 80066e2:	4d0a      	ldr	r5, [pc, #40]	; (800670c <__libc_init_array+0x40>)
 80066e4:	4c0a      	ldr	r4, [pc, #40]	; (8006710 <__libc_init_array+0x44>)
 80066e6:	1b64      	subs	r4, r4, r5
 80066e8:	10a4      	asrs	r4, r4, #2
 80066ea:	42a6      	cmp	r6, r4
 80066ec:	d105      	bne.n	80066fa <__libc_init_array+0x2e>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f4:	4798      	blx	r3
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7ee      	b.n	80066d8 <__libc_init_array+0xc>
 80066fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fe:	4798      	blx	r3
 8006700:	3601      	adds	r6, #1
 8006702:	e7f2      	b.n	80066ea <__libc_init_array+0x1e>
 8006704:	080068a4 	.word	0x080068a4
 8006708:	080068a4 	.word	0x080068a4
 800670c:	080068a4 	.word	0x080068a4
 8006710:	080068a8 	.word	0x080068a8

08006714 <memcmp>:
 8006714:	b510      	push	{r4, lr}
 8006716:	3901      	subs	r1, #1
 8006718:	4402      	add	r2, r0
 800671a:	4290      	cmp	r0, r2
 800671c:	d101      	bne.n	8006722 <memcmp+0xe>
 800671e:	2000      	movs	r0, #0
 8006720:	e005      	b.n	800672e <memcmp+0x1a>
 8006722:	7803      	ldrb	r3, [r0, #0]
 8006724:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006728:	42a3      	cmp	r3, r4
 800672a:	d001      	beq.n	8006730 <memcmp+0x1c>
 800672c:	1b18      	subs	r0, r3, r4
 800672e:	bd10      	pop	{r4, pc}
 8006730:	3001      	adds	r0, #1
 8006732:	e7f2      	b.n	800671a <memcmp+0x6>

08006734 <memset>:
 8006734:	4603      	mov	r3, r0
 8006736:	4402      	add	r2, r0
 8006738:	4293      	cmp	r3, r2
 800673a:	d100      	bne.n	800673e <memset+0xa>
 800673c:	4770      	bx	lr
 800673e:	f803 1b01 	strb.w	r1, [r3], #1
 8006742:	e7f9      	b.n	8006738 <memset+0x4>

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
