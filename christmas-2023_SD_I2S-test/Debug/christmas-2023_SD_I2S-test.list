
christmas-2023_SD_I2S-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000424c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000000c  080044c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080044c4  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c78a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002477  00000000  00000000  0002c7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac26  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f07b  00000000  00000000  0004aeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e60  00000000  00000000  00059f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efd91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e64  00000000  00000000  000efde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004418 	.word	0x08004418

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004418 	.word	0x08004418

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fa7f 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f82f 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f8d1 	bl	80003d8 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000236:	f000 f8af 	bl	8000398 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800023a:	f003 f9ef 	bl	800361c <MX_FATFS_Init>
  MX_I2S2_Init();
 800023e:	f000 f883 	bl	8000348 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  FRESULT res = f_mount(&fs, "XMAS-23", 1);
 8000242:	2201      	movs	r2, #1
 8000244:	490e      	ldr	r1, [pc, #56]	; (8000280 <main+0x5c>)
 8000246:	480f      	ldr	r0, [pc, #60]	; (8000284 <main+0x60>)
 8000248:	f003 ff2a 	bl	80040a0 <f_mount>
 800024c:	4603      	mov	r3, r0
 800024e:	73fb      	strb	r3, [r7, #15]
     if(res != FR_OK) {
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <main+0x36>
         return EXIT_FAILURE;
 8000256:	2301      	movs	r3, #1
 8000258:	e00e      	b.n	8000278 <main+0x54>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t data[4] = {0x2c4d, 0xffff, 0xf321, 0x5432};
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <main+0x64>)
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000262:	e883 0003 	stmia.w	r3, {r0, r1}

  while (1)
  {
	  HAL_StatusTypeDef tx = HAL_I2S_Transmit(&hi2s2, (uint16_t*)data, sizeof(data)/sizeof(data[0]), 100);
 8000266:	1d39      	adds	r1, r7, #4
 8000268:	2364      	movs	r3, #100	; 0x64
 800026a:	2204      	movs	r2, #4
 800026c:	4807      	ldr	r0, [pc, #28]	; (800028c <main+0x68>)
 800026e:	f000 fe71 	bl	8000f54 <HAL_I2S_Transmit>
 8000272:	4603      	mov	r3, r0
 8000274:	73bb      	strb	r3, [r7, #14]
  {
 8000276:	e7f6      	b.n	8000266 <main+0x42>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000278:	4618      	mov	r0, r3
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	0800444c 	.word	0x0800444c
 8000284:	200000e8 	.word	0x200000e8
 8000288:	08004454 	.word	0x08004454
 800028c:	20000028 	.word	0x20000028

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b096      	sub	sp, #88	; 0x58
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029a:	2228      	movs	r2, #40	; 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 f8b2 	bl	8004408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
 80002c2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c4:	2301      	movs	r3, #1
 80002c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 ff5c 	bl	80011a8 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002f6:	f000 f8f3 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2302      	movs	r3, #2
 8000300:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000310:	f107 031c 	add.w	r3, r7, #28
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f001 f9c8 	bl	80016ac <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000322:	f000 f8dd 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8000326:	2304      	movs	r3, #4
 8000328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4618      	mov	r0, r3
 8000332:	f001 fb37 	bl	80019a4 <HAL_RCCEx_PeriphCLKConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800033c:	f000 f8d0 	bl	80004e0 <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3758      	adds	r7, #88	; 0x58
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_I2S2_Init+0x48>)
 800034e:	4a11      	ldr	r2, [pc, #68]	; (8000394 <MX_I2S2_Init+0x4c>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_I2S2_Init+0x48>)
 8000354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000358:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <MX_I2S2_Init+0x48>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_I2S2_Init+0x48>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <MX_I2S2_Init+0x48>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_I2S2_Init+0x48>)
 800036e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000372:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_I2S2_Init+0x48>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_I2S2_Init+0x48>)
 800037c:	f000 fd04 	bl	8000d88 <HAL_I2S_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000386:	f000 f8ab 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028
 8000394:	40003800 	.word	0x40003800

08000398 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <MX_SDIO_SD_Init+0x3c>)
 80003a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <MX_SDIO_SD_Init+0x38>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000064 	.word	0x20000064
 80003d4:	40018000 	.word	0x40018000

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <MX_GPIO_Init+0xfc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <MX_GPIO_Init+0xfc>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <MX_GPIO_Init+0xfc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <MX_GPIO_Init+0xfc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <MX_GPIO_Init+0xfc>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <MX_GPIO_Init+0xfc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_GPIO_Init+0xfc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <MX_GPIO_Init+0xfc>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_GPIO_Init+0xfc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_GPIO_Init+0xfc>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <MX_GPIO_Init+0xfc>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_GPIO_Init+0xfc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2S_AMP_SD_GPIO_Port, I2S_AMP_SD_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2104      	movs	r1, #4
 8000450:	4821      	ldr	r0, [pc, #132]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000452:	f000 fc80 	bl	8000d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2120      	movs	r1, #32
 800045a:	4820      	ldr	r0, [pc, #128]	; (80004dc <MX_GPIO_Init+0x104>)
 800045c:	f000 fc7b 	bl	8000d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2S_AMP_SD_Pin */
  GPIO_InitStruct.Pin = I2S_AMP_SD_Pin;
 8000460:	2304      	movs	r3, #4
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S_AMP_SD_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4818      	ldr	r0, [pc, #96]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000478:	f000 fac2 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 800047c:	2320      	movs	r3, #32
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2302      	movs	r3, #2
 800048a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4812      	ldr	r0, [pc, #72]	; (80004dc <MX_GPIO_Init+0x104>)
 8000494:	f000 fab4 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_GPIO_Init+0x104>)
 80004ac:	f000 faa8 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_FAKE_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_FAKE_Pin;
 80004b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CD_FAKE_GPIO_Port, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_GPIO_Init+0x100>)
 80004c6:	f000 fa9b 	bl	8000a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40011000 	.word	0x40011000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <HAL_I2S_MspInit+0x74>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d124      	bne.n	80005ba <HAL_I2S_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_I2S_MspInit+0x78>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <HAL_I2S_MspInit+0x78>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	61d3      	str	r3, [r2, #28]
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_I2S_MspInit+0x78>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_I2S_MspInit+0x78>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_I2S_MspInit+0x78>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_I2S_MspInit+0x78>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0308 	and.w	r3, r3, #8
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005a0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <HAL_I2S_MspInit+0x7c>)
 80005b6:	f000 fa23 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40003800 	.word	0x40003800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a22      	ldr	r2, [pc, #136]	; (8000674 <HAL_SD_MspInit+0xa4>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d13c      	bne.n	800066a <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <HAL_SD_MspInit+0xa8>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a20      	ldr	r2, [pc, #128]	; (8000678 <HAL_SD_MspInit+0xa8>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fa:	6153      	str	r3, [r2, #20]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <HAL_SD_MspInit+0xa8>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_SD_MspInit+0xa8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <HAL_SD_MspInit+0xa8>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <HAL_SD_MspInit+0xa8>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0310 	and.w	r3, r3, #16
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_SD_MspInit+0xa8>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_SD_MspInit+0xa8>)
 8000626:	f043 0320 	orr.w	r3, r3, #32
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_SD_MspInit+0xa8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0320 	and.w	r3, r3, #32
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000638:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <HAL_SD_MspInit+0xac>)
 800064e:	f000 f9d7 	bl	8000a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000652:	2304      	movs	r3, #4
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4619      	mov	r1, r3
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <HAL_SD_MspInit+0xb0>)
 8000666:	f000 f9cb 	bl	8000a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800066a:	bf00      	nop
 800066c:	3728      	adds	r7, #40	; 0x28
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40018000 	.word	0x40018000
 8000678:	40021000 	.word	0x40021000
 800067c:	40011000 	.word	0x40011000
 8000680:	40011400 	.word	0x40011400

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ca:	f000 f875 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e0:	f7ff fff7 	bl	80006d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006e6:	490c      	ldr	r1, [pc, #48]	; (8000718 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006fc:	4c09      	ldr	r4, [pc, #36]	; (8000724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f003 fe59 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff fd89 	bl	8000224 <main>
  bx lr
 8000712:	4770      	bx	lr
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800071c:	080044b8 	.word	0x080044b8
  ldr r2, =_sbss
 8000720:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000724:	20000350 	.word	0x20000350

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f92b 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	200f      	movs	r0, #15
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff fed0 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f935 	bl	80009e6 <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 f90b 	bl	80009ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x1c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_IncTick+0x20>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <HAL_IncTick+0x20>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000318 	.word	0x20000318

080007dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <HAL_GetTick+0x10>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000318 	.word	0x20000318

080007f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff fff0 	bl	80007dc <HAL_GetTick>
 80007fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000808:	d005      	beq.n	8000816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_Delay+0x44>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000816:	bf00      	nop
 8000818:	f7ff ffe0 	bl	80007dc <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	429a      	cmp	r2, r3
 8000826:	d8f7      	bhi.n	8000818 <HAL_Delay+0x28>
  {
  }
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff90 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff49 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff5e 	bl	8000880 <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff90 	bl	80008f0 <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5f 	bl	800089c <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffb0 	bl	8000954 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	e179      	b.n	8000d08 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a14:	2201      	movs	r2, #1
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	4013      	ands	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	f040 8168 	bne.w	8000d02 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4a96      	ldr	r2, [pc, #600]	; (8000c90 <HAL_GPIO_Init+0x290>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d05e      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a3c:	4a94      	ldr	r2, [pc, #592]	; (8000c90 <HAL_GPIO_Init+0x290>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d875      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a42:	4a94      	ldr	r2, [pc, #592]	; (8000c94 <HAL_GPIO_Init+0x294>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d058      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a48:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <HAL_GPIO_Init+0x294>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d86f      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a4e:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_GPIO_Init+0x298>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d052      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a54:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <HAL_GPIO_Init+0x298>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d869      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a5a:	4a90      	ldr	r2, [pc, #576]	; (8000c9c <HAL_GPIO_Init+0x29c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d04c      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a60:	4a8e      	ldr	r2, [pc, #568]	; (8000c9c <HAL_GPIO_Init+0x29c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d863      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a66:	4a8e      	ldr	r2, [pc, #568]	; (8000ca0 <HAL_GPIO_Init+0x2a0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d046      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
 8000a6c:	4a8c      	ldr	r2, [pc, #560]	; (8000ca0 <HAL_GPIO_Init+0x2a0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d85d      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a72:	2b12      	cmp	r3, #18
 8000a74:	d82a      	bhi.n	8000acc <HAL_GPIO_Init+0xcc>
 8000a76:	2b12      	cmp	r3, #18
 8000a78:	d859      	bhi.n	8000b2e <HAL_GPIO_Init+0x12e>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <HAL_GPIO_Init+0x80>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000ad5 	.word	0x08000ad5
 8000a88:	08000ae7 	.word	0x08000ae7
 8000a8c:	08000b29 	.word	0x08000b29
 8000a90:	08000b2f 	.word	0x08000b2f
 8000a94:	08000b2f 	.word	0x08000b2f
 8000a98:	08000b2f 	.word	0x08000b2f
 8000a9c:	08000b2f 	.word	0x08000b2f
 8000aa0:	08000b2f 	.word	0x08000b2f
 8000aa4:	08000b2f 	.word	0x08000b2f
 8000aa8:	08000b2f 	.word	0x08000b2f
 8000aac:	08000b2f 	.word	0x08000b2f
 8000ab0:	08000b2f 	.word	0x08000b2f
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b2f 	.word	0x08000b2f
 8000abc:	08000b2f 	.word	0x08000b2f
 8000ac0:	08000b2f 	.word	0x08000b2f
 8000ac4:	08000add 	.word	0x08000add
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	4a75      	ldr	r2, [pc, #468]	; (8000ca4 <HAL_GPIO_Init+0x2a4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d013      	beq.n	8000afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ad2:	e02c      	b.n	8000b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e029      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e024      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	3308      	adds	r3, #8
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e01f      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	330c      	adds	r3, #12
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e01a      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b02:	2304      	movs	r3, #4
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e013      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d105      	bne.n	8000b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	611a      	str	r2, [r3, #16]
          break;
 8000b1a:	e009      	b.n	8000b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	615a      	str	r2, [r3, #20]
          break;
 8000b26:	e003      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e000      	b.n	8000b30 <HAL_GPIO_Init+0x130>
          break;
 8000b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	2bff      	cmp	r3, #255	; 0xff
 8000b34:	d801      	bhi.n	8000b3a <HAL_GPIO_Init+0x13a>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	e001      	b.n	8000b3e <HAL_GPIO_Init+0x13e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	2bff      	cmp	r3, #255	; 0xff
 8000b44:	d802      	bhi.n	8000b4c <HAL_GPIO_Init+0x14c>
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x152>
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	210f      	movs	r1, #15
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	401a      	ands	r2, r3
 8000b64:	6a39      	ldr	r1, [r7, #32]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 80c1 	beq.w	8000d02 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b80:	4b49      	ldr	r3, [pc, #292]	; (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a48      	ldr	r2, [pc, #288]	; (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <HAL_GPIO_Init+0x2a8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b98:	4a44      	ldr	r2, [pc, #272]	; (8000cac <HAL_GPIO_Init+0x2ac>)
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a3c      	ldr	r2, [pc, #240]	; (8000cb0 <HAL_GPIO_Init+0x2b0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d01f      	beq.n	8000c04 <HAL_GPIO_Init+0x204>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a3b      	ldr	r2, [pc, #236]	; (8000cb4 <HAL_GPIO_Init+0x2b4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d019      	beq.n	8000c00 <HAL_GPIO_Init+0x200>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <HAL_GPIO_Init+0x2b8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d013      	beq.n	8000bfc <HAL_GPIO_Init+0x1fc>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a39      	ldr	r2, [pc, #228]	; (8000cbc <HAL_GPIO_Init+0x2bc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d00d      	beq.n	8000bf8 <HAL_GPIO_Init+0x1f8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a38      	ldr	r2, [pc, #224]	; (8000cc0 <HAL_GPIO_Init+0x2c0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d007      	beq.n	8000bf4 <HAL_GPIO_Init+0x1f4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <HAL_GPIO_Init+0x2c4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d101      	bne.n	8000bf0 <HAL_GPIO_Init+0x1f0>
 8000bec:	2305      	movs	r3, #5
 8000bee:	e00a      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	e008      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x206>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c16:	4925      	ldr	r1, [pc, #148]	; (8000cac <HAL_GPIO_Init+0x2ac>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4920      	ldr	r1, [pc, #128]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	491a      	ldr	r1, [pc, #104]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	60cb      	str	r3, [r1, #12]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	4916      	ldr	r1, [pc, #88]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d025      	beq.n	8000ccc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4910      	ldr	r1, [pc, #64]	; (8000cc8 <HAL_GPIO_Init+0x2c8>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
 8000c8c:	e025      	b.n	8000cda <HAL_GPIO_Init+0x2da>
 8000c8e:	bf00      	nop
 8000c90:	10320000 	.word	0x10320000
 8000c94:	10310000 	.word	0x10310000
 8000c98:	10220000 	.word	0x10220000
 8000c9c:	10210000 	.word	0x10210000
 8000ca0:	10120000 	.word	0x10120000
 8000ca4:	10110000 	.word	0x10110000
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40011400 	.word	0x40011400
 8000cc0:	40011800 	.word	0x40011800
 8000cc4:	40011c00 	.word	0x40011c00
 8000cc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_GPIO_Init+0x324>)
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4913      	ldr	r1, [pc, #76]	; (8000d24 <HAL_GPIO_Init+0x324>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_GPIO_Init+0x324>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <HAL_GPIO_Init+0x324>)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_GPIO_Init+0x324>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4909      	ldr	r1, [pc, #36]	; (8000d24 <HAL_GPIO_Init+0x324>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	3301      	adds	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f47f ae7e 	bne.w	8000a14 <HAL_GPIO_Init+0x14>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	372c      	adds	r7, #44	; 0x2c
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e001      	b.n	8000d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	807b      	strh	r3, [r7, #2]
 8000d62:	4613      	mov	r3, r2
 8000d64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d66:	787b      	ldrb	r3, [r7, #1]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d6c:	887a      	ldrh	r2, [r7, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d72:	e003      	b.n	8000d7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	041a      	lsls	r2, r3, #16
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	611a      	str	r2, [r3, #16]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0d2      	b.n	8000f40 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fbce 	bl	8000550 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6812      	ldr	r2, [r2, #0]
 8000dc6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000dca:	f023 030f 	bic.w	r3, r3, #15
 8000dce:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d073      	beq.n	8000ec8 <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000de8:	2310      	movs	r3, #16
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e001      	b.n	8000df2 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000dee:	2320      	movs	r3, #32
 8000df0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b20      	cmp	r3, #32
 8000df8:	d802      	bhi.n	8000e00 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a50      	ldr	r2, [pc, #320]	; (8000f48 <HAL_I2S_Init+0x1c0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d104      	bne.n	8000e14 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8000e0a:	2004      	movs	r0, #4
 8000e0c:	f000 fe80 	bl	8001b10 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	e00c      	b.n	8000e2e <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <HAL_I2S_Init+0x1c4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d104      	bne.n	8000e28 <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f000 fe76 	bl	8001b10 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	e002      	b.n	8000e2e <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 8000e28:	f000 fd2a 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8000e2c:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e36:	d125      	bne.n	8000e84 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d010      	beq.n	8000e62 <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5c:	3305      	adds	r3, #5
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	e01f      	b.n	8000ea2 <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	461a      	mov	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	3305      	adds	r3, #5
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	e00e      	b.n	8000ea2 <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	3305      	adds	r3, #5
 8000ea0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <HAL_I2S_Init+0x1c8>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	e003      	b.n	8000ed0 <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d902      	bls.n	8000edc <HAL_I2S_Init+0x154>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	2bff      	cmp	r3, #255	; 0xff
 8000eda:	d907      	bls.n	8000eec <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee0:	f043 0210 	orr.w	r2, r3, #16
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e029      	b.n	8000f40 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	ea42 0103 	orr.w	r1, r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000f0a:	f023 030f 	bic.w	r3, r3, #15
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6851      	ldr	r1, [r2, #4]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6892      	ldr	r2, [r2, #8]
 8000f16:	4311      	orrs	r1, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68d2      	ldr	r2, [r2, #12]
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6992      	ldr	r2, [r2, #24]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f2e:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40003800 	.word	0x40003800
 8000f4c:	40003c00 	.word	0x40003c00
 8000f50:	cccccccd 	.word	0xcccccccd

08000f54 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <HAL_I2S_Transmit+0x1c>
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0dc      	b.n	800112e <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_I2S_Transmit+0x30>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e0d4      	b.n	800112e <HAL_I2S_Transmit+0x1da>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e0c4      	b.n	800112e <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d002      	beq.n	8000fd0 <HAL_I2S_Transmit+0x7c>
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d10a      	bne.n	8000fe6 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	845a      	strh	r2, [r3, #34]	; 0x22
 8000fe4:	e005      	b.n	8000ff2 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	88fa      	ldrh	r2, [r7, #6]
 8000ff0:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001008:	d007      	beq.n	800101a <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001018:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	2102      	movs	r1, #2
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 f888 	bl	8001136 <I2S_WaitFlagStateUntilTimeout>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d04e      	beq.n	80010ca <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    __HAL_UNLOCK(hi2s);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e070      	b.n	800112e <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	1c9a      	adds	r2, r3, #2
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001066:	b29b      	uxth	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	2102      	movs	r1, #2
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 f85d 	bl	8001136 <I2S_WaitFlagStateUntilTimeout>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00f      	beq.n	80010a2 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e045      	b.n	800112e <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d10c      	bne.n	80010ca <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c2:	f043 0204 	orr.w	r2, r3, #4
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1bb      	bne.n	800104c <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010e8:	d118      	bne.n	800111c <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f820 	bl	8001136 <I2S_WaitFlagStateUntilTimeout>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001100:	f043 0201 	orr.w	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e008      	b.n	800112e <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hi2s);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	4613      	mov	r3, r2
 8001144:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001146:	f7ff fb49 	bl	80007dc <HAL_GetTick>
 800114a:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800114c:	e018      	b.n	8001180 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d014      	beq.n	8001180 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8001156:	f7ff fb41 	bl	80007dc <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d902      	bls.n	800116c <I2S_WaitFlagStateUntilTimeout+0x36>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e00f      	b.n	80011a0 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4013      	ands	r3, r2
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	429a      	cmp	r2, r3
 800119c:	d1d7      	bne.n	800114e <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e272      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8087 	beq.w	80012d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c8:	4b92      	ldr	r3, [pc, #584]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d00c      	beq.n	80011ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d4:	4b8f      	ldr	r3, [pc, #572]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d112      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
 80011e0:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d10b      	bne.n	8001206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	4b89      	ldr	r3, [pc, #548]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d06c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x12c>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d168      	bne.n	80012d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e24c      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x76>
 8001210:	4b80      	ldr	r3, [pc, #512]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a7f      	ldr	r2, [pc, #508]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e02e      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x98>
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a7a      	ldr	r2, [pc, #488]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b78      	ldr	r3, [pc, #480]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a77      	ldr	r2, [pc, #476]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0xbc>
 800124a:	4b72      	ldr	r3, [pc, #456]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a71      	ldr	r2, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xd4>
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a67      	ldr	r2, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff faaa 	bl	80007dc <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff faa6 	bl	80007dc <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e200      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xe4>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fa96 	bl	80007dc <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fa92 	bl	80007dc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1ec      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x10c>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d11c      	bne.n	8001334 <HAL_RCC_OscConfig+0x18c>
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d116      	bne.n	8001334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x176>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e1c0      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4939      	ldr	r1, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	e03a      	b.n	80013aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fa4b 	bl	80007dc <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fa47 	bl	80007dc <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1a1      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4927      	ldr	r1, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_OscConfig+0x270>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fa2a 	bl	80007dc <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fa26 	bl	80007dc <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e180      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03a      	beq.n	800142c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d019      	beq.n	80013f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_RCC_OscConfig+0x274>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fa0a 	bl	80007dc <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fa06 	bl	80007dc <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e160      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f000 fabc 	bl	8001968 <RCC_Delay>
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_RCC_OscConfig+0x274>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff f9f0 	bl	80007dc <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fe:	e00f      	b.n	8001420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff f9ec 	bl	80007dc <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d908      	bls.n	8001420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e146      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	42420000 	.word	0x42420000
 800141c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e9      	bne.n	8001400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a6 	beq.w	8001586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a87      	ldr	r2, [pc, #540]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7e      	ldr	r2, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff f9ad 	bl	80007dc <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff f9a9 	bl	80007dc <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e103      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x4c8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x312>
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a6e      	ldr	r2, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e02d      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x334>
 80014c2:	4b6a      	ldr	r3, [pc, #424]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a69      	ldr	r2, [pc, #420]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a66      	ldr	r2, [pc, #408]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	e01c      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x356>
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a60      	ldr	r2, [pc, #384]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	4b5e      	ldr	r3, [pc, #376]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a5d      	ldr	r2, [pc, #372]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e00b      	b.n	8001516 <HAL_RCC_OscConfig+0x36e>
 80014fe:	4b5b      	ldr	r3, [pc, #364]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a5a      	ldr	r2, [pc, #360]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a57      	ldr	r2, [pc, #348]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d015      	beq.n	800154a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff f95d 	bl	80007dc <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff f959 	bl	80007dc <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0b1      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0ee      	beq.n	8001526 <HAL_RCC_OscConfig+0x37e>
 8001548:	e014      	b.n	8001574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff f947 	bl	80007dc <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff f943 	bl	80007dc <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e09b      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	4b40      	ldr	r3, [pc, #256]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ee      	bne.n	8001552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d105      	bne.n	8001586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a3b      	ldr	r2, [pc, #236]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8087 	beq.w	800169e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d061      	beq.n	8001660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d146      	bne.n	8001632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x4cc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff f917 	bl	80007dc <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff f913 	bl	80007dc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e06d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d108      	bne.n	80015ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4921      	ldr	r1, [pc, #132]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a19      	ldr	r1, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	430b      	orrs	r3, r1
 80015fe:	491b      	ldr	r1, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff f8e7 	bl	80007dc <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff f8e3 	bl	80007dc <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e03d      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x46a>
 8001630:	e035      	b.n	800169e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_RCC_OscConfig+0x4cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff f8d0 	bl	80007dc <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f8cc 	bl	80007dc <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e026      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_RCC_OscConfig+0x4c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x498>
 800165e:	e01e      	b.n	800169e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e019      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
 800166c:	40021000 	.word	0x40021000
 8001670:	40007000 	.word	0x40007000
 8001674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_OscConfig+0x500>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	429a      	cmp	r2, r3
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0d0      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d910      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b67      	ldr	r3, [pc, #412]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4965      	ldr	r1, [pc, #404]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b63      	ldr	r3, [pc, #396]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0b8      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d020      	beq.n	800173e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001708:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800172a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	494d      	ldr	r1, [pc, #308]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d040      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d115      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e07f      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e073      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177a:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06b      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f023 0203 	bic.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4936      	ldr	r1, [pc, #216]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff f81e 	bl	80007dc <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff f81a 	bl	80007dc <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e053      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1eb      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d210      	bcs.n	80017fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 0207 	bic.w	r2, r3, #7
 80017e2:	4922      	ldr	r1, [pc, #136]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e032      	b.n	8001862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4916      	ldr	r1, [pc, #88]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	490e      	ldr	r1, [pc, #56]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183a:	f000 f821 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 800183e:	4602      	mov	r2, r0
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	490a      	ldr	r1, [pc, #40]	; (8001874 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	5ccb      	ldrb	r3, [r1, r3]
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	4a09      	ldr	r2, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1cc>)
 8001854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x1d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe ff7c 	bl	8000758 <HAL_InitTick>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	0800445c 	.word	0x0800445c
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_GetSysClockFreq+0x94>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d002      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x30>
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x36>
 80018ae:	e027      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 80018b2:	613b      	str	r3, [r7, #16]
      break;
 80018b4:	e027      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	0c9b      	lsrs	r3, r3, #18
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_GetSysClockFreq+0x94>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	0c5b      	lsrs	r3, r3, #17
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_RCC_GetSysClockFreq+0x98>)
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e004      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	613b      	str	r3, [r7, #16]
      break;
 80018fe:	e002      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001902:	613b      	str	r3, [r7, #16]
      break;
 8001904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001906:	693b      	ldr	r3, [r7, #16]
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	00b71b00 	.word	0x00b71b00
 800191c:	08004474 	.word	0x08004474
 8001920:	08004484 	.word	0x08004484
 8001924:	003d0900 	.word	0x003d0900
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <HAL_RCC_GetHCLKFreq+0x10>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001944:	f7ff fff2 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0adb      	lsrs	r3, r3, #11
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4903      	ldr	r1, [pc, #12]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	0800446c 	.word	0x0800446c

08001968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <RCC_Delay+0x34>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <RCC_Delay+0x38>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a5b      	lsrs	r3, r3, #9
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001984:	bf00      	nop
  }
  while (Delay --);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	60fa      	str	r2, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f9      	bne.n	8001984 <RCC_Delay+0x1c>
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	20000000 	.word	0x20000000
 80019a0:	10624dd3 	.word	0x10624dd3

080019a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d07d      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019da:	61d3      	str	r3, [r2, #28]
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e8:	2301      	movs	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d118      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a04:	f7fe feea 	bl	80007dc <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0a:	e008      	b.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0c:	f7fe fee6 	bl	80007dc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e06d      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a2a:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02e      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d027      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a5e:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d014      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7fe feb5 	bl	80007dc <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe feb1 	bl	80007dc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e036      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4917      	ldr	r1, [pc, #92]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	490b      	ldr	r1, [pc, #44]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	4904      	ldr	r1, [pc, #16]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	42420440 	.word	0x42420440

08001b10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	f200 80ae 	bhi.w	8001c92 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8001b36:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001c13 	.word	0x08001c13
 8001b40:	08001c77 	.word	0x08001c77
 8001b44:	08001c93 	.word	0x08001c93
 8001b48:	08001c03 	.word	0x08001c03
 8001b4c:	08001c93 	.word	0x08001c93
 8001b50:	08001c93 	.word	0x08001c93
 8001b54:	08001c93 	.word	0x08001c93
 8001b58:	08001c0b 	.word	0x08001c0b
 8001b5c:	08001c93 	.word	0x08001c93
 8001b60:	08001c93 	.word	0x08001c93
 8001b64:	08001c93 	.word	0x08001c93
 8001b68:	08001c93 	.word	0x08001c93
 8001b6c:	08001c93 	.word	0x08001c93
 8001b70:	08001c93 	.word	0x08001c93
 8001b74:	08001c93 	.word	0x08001c93
 8001b78:	08001b7d 	.word	0x08001b7d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001b82:	4b49      	ldr	r3, [pc, #292]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8083 	beq.w	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	0c9b      	lsrs	r3, r3, #18
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	4a44      	ldr	r2, [pc, #272]	; (8001cac <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c5b      	lsrs	r3, r3, #17
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	4a3f      	ldr	r2, [pc, #252]	; (8001cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001bc2:	4a3c      	ldr	r2, [pc, #240]	; (8001cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e004      	b.n	8001bde <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8001bf0:	e051      	b.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	61bb      	str	r3, [r7, #24]
      break;
 8001c00:	e049      	b.n	8001c96 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8001c02:	f7ff fe3d 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8001c06:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8001c08:	e048      	b.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8001c0a:	f7ff fe39 	bl	8001880 <HAL_RCC_GetSysClockFreq>
 8001c0e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8001c10:	e044      	b.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c22:	d108      	bne.n	8001c36 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8001c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e01e      	b.n	8001c74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c40:	d109      	bne.n	8001c56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8001c4e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e00e      	b.n	8001c74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c60:	d11b      	bne.n	8001c9a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d015      	beq.n	8001c9a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8001c70:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8001c72:	e012      	b.n	8001c9a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8001c74:	e011      	b.n	8001c9a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001c76:	f7ff fe63 	bl	8001940 <HAL_RCC_GetPCLK2Freq>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0b9b      	lsrs	r3, r3, #14
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	61bb      	str	r3, [r7, #24]
      break;
 8001c90:	e004      	b.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 8001c92:	bf00      	nop
 8001c94:	e002      	b.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8001c9a:	bf00      	nop
    }
  }
  return (frequency);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08004488 	.word	0x08004488
 8001cb0:	08004498 	.word	0x08004498
 8001cb4:	00b71b00 	.word	0x00b71b00
 8001cb8:	003d0900 	.word	0x003d0900
 8001cbc:	aaaaaaab 	.word	0xaaaaaaab
 8001cc0:	00016e36 	.word	0x00016e36

08001cc4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e022      	b.n	8001d1c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7fe fc71 	bl	80005d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f814 	bl	8001d24 <HAL_SD_InitCard>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00a      	b.n	8001d1c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b08e      	sub	sp, #56	; 0x38
 8001d28:	af04      	add	r7, sp, #16
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001d40:	2376      	movs	r3, #118	; 0x76
 8001d42:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681d      	ldr	r5, [r3, #0]
 8001d48:	466c      	mov	r4, sp
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f000 ff39 	bl	8002bd4 <SDIO_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e04f      	b.n	8001e14 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_SD_InitCard+0xf8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 ff6e 	bl	8002c60 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_SD_InitCard+0xf8>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7fe fd30 	bl	80007f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fe69 	bl	8002a68 <SD_PowerON>
 8001d96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e02e      	b.n	8001e14 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fd87 	bl	80028ca <SD_InitCard>
 8001dbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00b      	beq.n	8001ddc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e01b      	b.n	8001e14 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 ffc7 	bl	8002d78 <SDMMC_CmdBlockLength>
 8001dea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00f      	beq.n	8001e12 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_SD_InitCard+0xfc>)
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1c:	423000a0 	.word	0x423000a0
 8001e20:	004005ff 	.word	0x004005ff

08001e24 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b092      	sub	sp, #72	; 0x48
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001e32:	f7fe fcd3 	bl	80007dc <HAL_GetTick>
 8001e36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1bd      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	f040 81b0 	bne.w	80021c4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	441a      	add	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d907      	bls.n	8001e88 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e1a4      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d002      	beq.n	8001ea6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea2:	025b      	lsls	r3, r3, #9
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001eb2:	2390      	movs	r3, #144	; 0x90
 8001eb4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f107 0214 	add.w	r2, r7, #20
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 ff28 	bl	8002d22 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d90a      	bls.n	8001eee <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2202      	movs	r2, #2
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 ff8b 	bl	8002e00 <SDMMC_CmdReadMultiBlock>
 8001eea:	6478      	str	r0, [r7, #68]	; 0x44
 8001eec:	e009      	b.n	8001f02 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 ff5e 	bl	8002dbc <SDMMC_CmdReadSingleBlock>
 8001f00:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d012      	beq.n	8001f2e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a7a      	ldr	r2, [pc, #488]	; (80020f8 <HAL_SD_ReadBlocks+0x2d4>)
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e151      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f32:	e061      	b.n	8001ff8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03c      	beq.n	8001fbc <HAL_SD_ReadBlocks+0x198>
 8001f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d039      	beq.n	8001fbc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4c:	e033      	b.n	8001fb6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fe68 	bl	8002c28 <SDIO_ReadFIFO>
 8001f58:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	3301      	adds	r3, #1
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f80:	3b01      	subs	r3, #1
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	0c1b      	lsrs	r3, r3, #16
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	3301      	adds	r3, #1
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f96:	3b01      	subs	r3, #1
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	0e1b      	lsrs	r3, r3, #24
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fac:	3b01      	subs	r3, #1
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	d9c8      	bls.n	8001f4e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001fbc:	f7fe fc0e 	bl	80007dc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d902      	bls.n	8001fd2 <HAL_SD_ReadBlocks+0x1ae>
 8001fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d112      	bne.n	8001ff8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_SD_ReadBlocks+0x2d4>)
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0ec      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	f240 332a 	movw	r3, #810	; 0x32a
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d095      	beq.n	8001f34 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d022      	beq.n	800205c <HAL_SD_ReadBlocks+0x238>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d91f      	bls.n	800205c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	2b03      	cmp	r3, #3
 8002022:	d01b      	beq.n	800205c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 ff4f 	bl	8002ecc <SDMMC_CmdStopTransfer>
 800202e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	2b00      	cmp	r3, #0
 8002034:	d012      	beq.n	800205c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <HAL_SD_ReadBlocks+0x2d4>)
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002044:	431a      	orrs	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0ba      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_SD_ReadBlocks+0x2d4>)
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	f043 0208 	orr.w	r2, r3, #8
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0a0      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_SD_ReadBlocks+0x2d4>)
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e086      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_SD_ReadBlocks+0x2d4>)
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e06c      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
 80020f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fd91 	bl	8002c28 <SDIO_ReadFIFO>
 8002106:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	b2da      	uxtb	r2, r3
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	3301      	adds	r3, #1
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002118:	3b01      	subs	r3, #1
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b2da      	uxtb	r2, r3
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	3301      	adds	r3, #1
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800212c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212e:	3b01      	subs	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	b2da      	uxtb	r2, r3
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	3301      	adds	r3, #1
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002144:	3b01      	subs	r3, #1
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	0e1b      	lsrs	r3, r3, #24
 800214c:	b2da      	uxtb	r2, r3
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	3301      	adds	r3, #1
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	3b01      	subs	r3, #1
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800215e:	f7fe fb3d 	bl	80007dc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800216a:	429a      	cmp	r2, r3
 800216c:	d902      	bls.n	8002174 <HAL_SD_ReadBlocks+0x350>
 800216e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002170:	2b00      	cmp	r3, #0
 8002172:	d112      	bne.n	800219a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_SD_ReadBlocks+0x3b8>)
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e01b      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_SD_ReadBlocks+0x38a>
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1a6      	bne.n	80020fc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e006      	b.n	80021d2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3748      	adds	r7, #72	; 0x48
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	004005ff 	.word	0x004005ff

080021e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b092      	sub	sp, #72	; 0x48
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80021ee:	f7fe faf5 	bl	80007dc <HAL_GetTick>
 80021f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e166      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	f040 8159 	bne.w	80024d2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	429a      	cmp	r2, r3
 8002232:	d907      	bls.n	8002244 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e14d      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2203      	movs	r2, #3
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	2b01      	cmp	r3, #1
 800225a:	d002      	beq.n	8002262 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800226e:	2390      	movs	r3, #144	; 0x90
 8002270:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800227a:	2301      	movs	r3, #1
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f107 0218 	add.w	r2, r7, #24
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fd4a 	bl	8002d22 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d90a      	bls.n	80022aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fdf1 	bl	8002e88 <SDMMC_CmdWriteMultiBlock>
 80022a6:	6478      	str	r0, [r7, #68]	; 0x44
 80022a8:	e009      	b.n	80022be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2210      	movs	r2, #16
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fdc4 	bl	8002e44 <SDMMC_CmdWriteSingleBlock>
 80022bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80022be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d012      	beq.n	80022ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a87      	ldr	r2, [pc, #540]	; (80024e8 <HAL_SD_WriteBlocks+0x308>)
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d2:	431a      	orrs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0fa      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80022ee:	e065      	b.n	80023bc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d040      	beq.n	8002380 <HAL_SD_WriteBlocks+0x1a0>
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03d      	beq.n	8002380 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002304:	2300      	movs	r3, #0
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
 8002308:	e037      	b.n	800237a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	3301      	adds	r3, #1
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002318:	3b01      	subs	r3, #1
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	021a      	lsls	r2, r3, #8
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	3301      	adds	r3, #1
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002330:	3b01      	subs	r3, #1
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	3301      	adds	r3, #1
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002348:	3b01      	subs	r3, #1
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	061a      	lsls	r2, r3, #24
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	3301      	adds	r3, #1
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800235e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002360:	3b01      	subs	r3, #1
 8002362:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f107 0214 	add.w	r2, r7, #20
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fc66 	bl	8002c40 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002376:	3301      	adds	r3, #1
 8002378:	643b      	str	r3, [r7, #64]	; 0x40
 800237a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237c:	2b07      	cmp	r3, #7
 800237e:	d9c4      	bls.n	800230a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002380:	f7fe fa2c 	bl	80007dc <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800238c:	429a      	cmp	r2, r3
 800238e:	d902      	bls.n	8002396 <HAL_SD_WriteBlocks+0x1b6>
 8002390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002392:	2b00      	cmp	r3, #0
 8002394:	d112      	bne.n	80023bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a53      	ldr	r2, [pc, #332]	; (80024e8 <HAL_SD_WriteBlocks+0x308>)
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a4:	431a      	orrs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e091      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c2:	f240 331a 	movw	r3, #794	; 0x31a
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d091      	beq.n	80022f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d022      	beq.n	8002420 <HAL_SD_WriteBlocks+0x240>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d91f      	bls.n	8002420 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d01b      	beq.n	8002420 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd6d 	bl	8002ecc <SDMMC_CmdStopTransfer>
 80023f2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80023f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <HAL_SD_WriteBlocks+0x308>)
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e05f      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <HAL_SD_WriteBlocks+0x308>)
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	f043 0208 	orr.w	r2, r3, #8
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e045      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_SD_WriteBlocks+0x308>)
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e02b      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_SD_WriteBlocks+0x308>)
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	f043 0210 	orr.w	r2, r3, #16
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e011      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e006      	b.n	80024e0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3748      	adds	r7, #72	; 0x48
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	004005ff 	.word	0x004005ff

080024ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	0f9b      	lsrs	r3, r3, #30
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	b2da      	uxtb	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002518:	0e1b      	lsrs	r3, r3, #24
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	b2da      	uxtb	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	b2da      	uxtb	r2, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	b2da      	uxtb	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002542:	b2da      	uxtb	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800254c:	0d1b      	lsrs	r3, r3, #20
 800254e:	b29a      	uxth	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	b2da      	uxtb	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800256a:	0bdb      	lsrs	r3, r3, #15
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800257c:	0b9b      	lsrs	r3, r3, #14
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800258e:	0b5b      	lsrs	r3, r3, #13
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a0:	0b1b      	lsrs	r3, r3, #12
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2200      	movs	r2, #0
 80025b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d163      	bne.n	8002684 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c0:	009a      	lsls	r2, r3, #2
 80025c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c6:	4013      	ands	r3, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80025cc:	0f92      	lsrs	r2, r2, #30
 80025ce:	431a      	orrs	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	0edb      	lsrs	r3, r3, #27
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ea:	0e1b      	lsrs	r3, r3, #24
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fc:	0d5b      	lsrs	r3, r3, #21
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	b2da      	uxtb	r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	b2da      	uxtb	r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002620:	0bdb      	lsrs	r3, r3, #15
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	b2da      	uxtb	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	3302      	adds	r3, #2
 8002644:	2201      	movs	r2, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7a1b      	ldrb	r3, [r3, #8]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002670:	0a52      	lsrs	r2, r2, #9
 8002672:	fb03 f202 	mul.w	r2, r3, r2
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002680:	661a      	str	r2, [r3, #96]	; 0x60
 8002682:	e031      	b.n	80026e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	2b01      	cmp	r3, #1
 800268a:	d11d      	bne.n	80026c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	3301      	adds	r3, #1
 80026a8:	029a      	lsls	r2, r3, #10
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	661a      	str	r2, [r3, #96]	; 0x60
 80026c6:	e00f      	b.n	80026e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_SD_GetCardCSD+0x344>)
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e09d      	b.n	8002824 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	0b9b      	lsrs	r3, r3, #14
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fe:	09db      	lsrs	r3, r3, #7
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002706:	b2da      	uxtb	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002716:	b2da      	uxtb	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	0fdb      	lsrs	r3, r3, #31
 8002722:	b2da      	uxtb	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	0f5b      	lsrs	r3, r3, #29
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	b2da      	uxtb	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	0d9b      	lsrs	r3, r3, #22
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	b2da      	uxtb	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	0d5b      	lsrs	r3, r3, #21
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	b2da      	uxtb	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	0bdb      	lsrs	r3, r3, #15
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	0b9b      	lsrs	r3, r3, #14
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	0b5b      	lsrs	r3, r3, #13
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	0b1b      	lsrs	r3, r3, #12
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002812:	b2da      	uxtb	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	004005ff 	.word	0x004005ff

08002834 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f971 	bl	8002b84 <SD_SendStatus>
 80028a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	0a5b      	lsrs	r3, r3, #9
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80028c0:	693b      	ldr	r3, [r7, #16]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80028ca:	b5b0      	push	{r4, r5, r7, lr}
 80028cc:	b094      	sub	sp, #80	; 0x50
 80028ce:	af04      	add	r7, sp, #16
 80028d0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80028d2:	2301      	movs	r3, #1
 80028d4:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f9cd 	bl	8002c7a <SDIO_GetPowerState>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80028e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028ea:	e0b8      	b.n	8002a5e <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d02f      	beq.n	8002954 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fbae 	bl	800305a <SDMMC_CmdSendCID>
 80028fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SD_InitCard+0x40>
    {
      return errorstate;
 8002906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002908:	e0a9      	b.n	8002a5e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f9f4 	bl	8002cfe <SDIO_GetResponse>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2104      	movs	r1, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f9eb 	bl	8002cfe <SDIO_GetResponse>
 8002928:	4602      	mov	r2, r0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2108      	movs	r1, #8
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f9e2 	bl	8002cfe <SDIO_GetResponse>
 800293a:	4602      	mov	r2, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	210c      	movs	r1, #12
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f9d9 	bl	8002cfe <SDIO_GetResponse>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	2b03      	cmp	r3, #3
 800295a:	d00d      	beq.n	8002978 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f107 020e 	add.w	r2, r7, #14
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fbb4 	bl	80030d4 <SDMMC_CmdSetRelAdd>
 800296c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <SD_InitCard+0xae>
    {
      return errorstate;
 8002974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002976:	e072      	b.n	8002a5e <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	2b03      	cmp	r3, #3
 800297e:	d036      	beq.n	80029ee <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002980:	89fb      	ldrh	r3, [r7, #14]
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	4619      	mov	r1, r3
 8002994:	4610      	mov	r0, r2
 8002996:	f000 fb7e 	bl	8003096 <SDMMC_CmdSendCSD>
 800299a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <SD_InitCard+0xdc>
    {
      return errorstate;
 80029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a4:	e05b      	b.n	8002a5e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f9a6 	bl	8002cfe <SDIO_GetResponse>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2104      	movs	r1, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f99d 	bl	8002cfe <SDIO_GetResponse>
 80029c4:	4602      	mov	r2, r0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2108      	movs	r1, #8
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f994 	bl	8002cfe <SDIO_GetResponse>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	210c      	movs	r1, #12
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f98b 	bl	8002cfe <SDIO_GetResponse>
 80029e8:	4602      	mov	r2, r0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2104      	movs	r1, #4
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f982 	bl	8002cfe <SDIO_GetResponse>
 80029fa:	4603      	mov	r3, r0
 80029fc:	0d1a      	lsrs	r2, r3, #20
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fd6f 	bl	80024ec <HAL_SD_GetCardCSD>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a18:	e021      	b.n	8002a5e <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	2200      	movs	r2, #0
 8002a26:	461c      	mov	r4, r3
 8002a28:	4615      	mov	r5, r2
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	4608      	mov	r0, r1
 8002a30:	f000 fa6e 	bl	8002f10 <SDMMC_CmdSelDesel>
 8002a34:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SD_InitCard+0x176>
  {
    return errorstate;
 8002a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3e:	e00e      	b.n	8002a5e <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681d      	ldr	r5, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	466c      	mov	r4, sp
 8002a48:	f103 0210 	add.w	r2, r3, #16
 8002a4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a52:	3304      	adds	r3, #4
 8002a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a56:	4628      	mov	r0, r5
 8002a58:	f000 f8bc 	bl	8002bd4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3740      	adds	r7, #64	; 0x40
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa68 	bl	8002f56 <SDMMC_CmdGoIdleState>
 8002a86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	e072      	b.n	8002b78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fa7b 	bl	8002f92 <SDMMC_CmdOperCond>
 8002a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fa51 	bl	8002f56 <SDMMC_CmdGoIdleState>
 8002ab4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	e05b      	b.n	8002b78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d137      	bne.n	8002b3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fa7b 	bl	8002fd0 <SDMMC_CmdAppCommand>
 8002ada:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02d      	beq.n	8002b3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ae6:	e047      	b.n	8002b78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa6e 	bl	8002fd0 <SDMMC_CmdAppCommand>
 8002af4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <SD_PowerON+0x98>
    {
      return errorstate;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	e03b      	b.n	8002b78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	491e      	ldr	r1, [pc, #120]	; (8002b80 <SD_PowerON+0x118>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fa84 	bl	8003014 <SDMMC_CmdAppOperCommand>
 8002b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b18:	e02e      	b.n	8002b78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f8ec 	bl	8002cfe <SDIO_GetResponse>
 8002b26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	0fdb      	lsrs	r3, r3, #31
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <SD_PowerON+0xcc>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <SD_PowerON+0xce>
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]

    count++;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d802      	bhi.n	8002b4e <SD_PowerON+0xe6>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0cc      	beq.n	8002ae8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d902      	bls.n	8002b5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b5c:	e00c      	b.n	8002b78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002b6e:	e002      	b.n	8002b76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	c1100000 	.word	0xc1100000

08002b84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b98:	e018      	b.n	8002bcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 fab5 	bl	8003116 <SDMMC_CmdSendStatus>
 8002bac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	e009      	b.n	8002bcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f89d 	bl	8002cfe <SDIO_GetResponse>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	f107 001c 	add.w	r0, r7, #28
 8002be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002bea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002bec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002bee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002bf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8002bf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002bfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002bfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002c0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	b004      	add	sp, #16
 8002c26:	4770      	bx	lr

08002c28 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0303 	and.w	r3, r3, #3
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002cb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002cb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002cbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	b2db      	uxtb	r3, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
}  
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d48:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002d4e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002d54:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0

}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002d86:	2310      	movs	r3, #16
 8002d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d8a:	2340      	movs	r3, #64	; 0x40
 8002d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff78 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	2110      	movs	r1, #16
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9d6 	bl	800315c <SDMMC_GetCmdResp1>
 8002db0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002db2:	69fb      	ldr	r3, [r7, #28]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002dca:	2311      	movs	r3, #17
 8002dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dce:	2340      	movs	r3, #64	; 0x40
 8002dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ddc:	f107 0308 	add.w	r3, r7, #8
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff56 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dec:	2111      	movs	r1, #17
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9b4 	bl	800315c <SDMMC_GetCmdResp1>
 8002df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002df6:	69fb      	ldr	r3, [r7, #28]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002e0e:	2312      	movs	r3, #18
 8002e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e12:	2340      	movs	r3, #64	; 0x40
 8002e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff34 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	2112      	movs	r1, #18
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f992 	bl	800315c <SDMMC_GetCmdResp1>
 8002e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002e52:	2318      	movs	r3, #24
 8002e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e56:	2340      	movs	r3, #64	; 0x40
 8002e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff12 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	2118      	movs	r1, #24
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f970 	bl	800315c <SDMMC_GetCmdResp1>
 8002e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002e96:	2319      	movs	r3, #25
 8002e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fef0 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	2119      	movs	r1, #25
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f94e 	bl	800315c <SDMMC_GetCmdResp1>
 8002ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002ed8:	230c      	movs	r3, #12
 8002eda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002edc:	2340      	movs	r3, #64	; 0x40
 8002ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fecf 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <SDMMC_CmdStopTransfer+0x40>)
 8002ef8:	210c      	movs	r1, #12
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f92e 	bl	800315c <SDMMC_GetCmdResp1>
 8002f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f02:	69fb      	ldr	r3, [r7, #28]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	05f5e100 	.word	0x05f5e100

08002f10 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	; 0x28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002f20:	2307      	movs	r3, #7
 8002f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f24:	2340      	movs	r3, #64	; 0x40
 8002f26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f30:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff feab 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	2107      	movs	r1, #7
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f909 	bl	800315c <SDMMC_GetCmdResp1>
 8002f4a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b088      	sub	sp, #32
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fe8a 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb21 	bl	80035c8 <SDMMC_GetCmdError>
 8002f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f88:	69fb      	ldr	r3, [r7, #28]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b088      	sub	sp, #32
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002f9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fa4:	2340      	movs	r3, #64	; 0x40
 8002fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fb2:	f107 0308 	add.w	r3, r7, #8
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff fe6b 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fab4 	bl	800352c <SDMMC_GetCmdResp7>
 8002fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002fde:	2337      	movs	r3, #55	; 0x37
 8002fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fe2:	2340      	movs	r3, #64	; 0x40
 8002fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fe4c 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	2137      	movs	r1, #55	; 0x37
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8aa 	bl	800315c <SDMMC_GetCmdResp1>
 8003008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800300a:	69fb      	ldr	r3, [r7, #28]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800302a:	2329      	movs	r3, #41	; 0x29
 800302c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800302e:	2340      	movs	r3, #64	; 0x40
 8003030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800303c:	f107 0308 	add.w	r3, r7, #8
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fe26 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f9bd 	bl	80033c8 <SDMMC_GetCmdResp3>
 800304e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003050:	69fb      	ldr	r3, [r7, #28]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b088      	sub	sp, #32
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003066:	2302      	movs	r3, #2
 8003068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800306a:	23c0      	movs	r3, #192	; 0xc0
 800306c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fe08 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f957 	bl	8003338 <SDMMC_GetCmdResp2>
 800308a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800308c:	69fb      	ldr	r3, [r7, #28]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b088      	sub	sp, #32
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80030a4:	2309      	movs	r3, #9
 80030a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80030a8:	23c0      	movs	r3, #192	; 0xc0
 80030aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fde9 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f938 	bl	8003338 <SDMMC_GetCmdResp2>
 80030c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80030ca:	69fb      	ldr	r3, [r7, #28]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80030e2:	2303      	movs	r3, #3
 80030e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030e6:	2340      	movs	r3, #64	; 0x40
 80030e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fdca 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	2103      	movs	r1, #3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f99b 	bl	8003440 <SDMMC_GetCmdResp6>
 800310a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800310c:	69fb      	ldr	r3, [r7, #28]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b088      	sub	sp, #32
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003124:	230d      	movs	r3, #13
 8003126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003128:	2340      	movs	r3, #64	; 0x40
 800312a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003134:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fda9 	bl	8002c94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	210d      	movs	r1, #13
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f807 	bl	800315c <SDMMC_GetCmdResp1>
 800314e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003150:	69fb      	ldr	r3, [r7, #28]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	460b      	mov	r3, r1
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <SDMMC_GetCmdResp1+0x1d0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a70      	ldr	r2, [pc, #448]	; (8003330 <SDMMC_GetCmdResp1+0x1d4>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0a5a      	lsrs	r2, r3, #9
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800318c:	e0c9      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ef      	beq.n	800317e <SDMMC_GetCmdResp1+0x22>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ea      	bne.n	800317e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2204      	movs	r2, #4
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80031ba:	2304      	movs	r3, #4
 80031bc:	e0b1      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0a6      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	22c5      	movs	r2, #197	; 0xc5
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff fd83 	bl	8002ce6 <SDIO_GetCommandResponse>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d001      	beq.n	80031ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e099      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80031ee:	2100      	movs	r1, #0
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fd84 	bl	8002cfe <SDIO_GetResponse>
 80031f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <SDMMC_GetCmdResp1+0x1d8>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003202:	2300      	movs	r3, #0
 8003204:	e08d      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	da02      	bge.n	8003212 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800320c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003210:	e087      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800321c:	2340      	movs	r3, #64	; 0x40
 800321e:	e080      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	e079      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800323c:	e071      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324c:	e069      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325c:	e061      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800326c:	e059      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327c:	e051      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328c:	e049      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003298:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800329c:	e041      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80032a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ac:	e039      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80032b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032bc:	e031      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80032c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032cc:	e029      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80032d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032dc:	e021      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80032e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ec:	e019      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80032f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032fc:	e011      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003308:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800330c:	e009      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003318:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800331c:	e001      	b.n	8003322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800331e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000000 	.word	0x20000000
 8003330:	10624dd3 	.word	0x10624dd3
 8003334:	fdffe008 	.word	0xfdffe008

08003338 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <SDMMC_GetCmdResp2+0x88>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <SDMMC_GetCmdResp2+0x8c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	60fa      	str	r2, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003364:	e026      	b.n	80033b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ef      	beq.n	8003356 <SDMMC_GetCmdResp2+0x1e>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ea      	bne.n	8003356 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003392:	2304      	movs	r3, #4
 8003394:	e00e      	b.n	80033b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e003      	b.n	80033b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	22c5      	movs	r2, #197	; 0xc5
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <SDMMC_GetCmdResp3+0x70>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <SDMMC_GetCmdResp3+0x74>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0a5b      	lsrs	r3, r3, #9
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	60fa      	str	r2, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80033f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033f4:	e01b      	b.n	800342e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ef      	beq.n	80033e6 <SDMMC_GetCmdResp3+0x1e>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ea      	bne.n	80033e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2204      	movs	r2, #4
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003422:	2304      	movs	r3, #4
 8003424:	e003      	b.n	800342e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	22c5      	movs	r2, #197	; 0xc5
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	20000000 	.word	0x20000000
 800343c:	10624dd3 	.word	0x10624dd3

08003440 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	460b      	mov	r3, r1
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800344e:	4b35      	ldr	r3, [pc, #212]	; (8003524 <SDMMC_GetCmdResp6+0xe4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a35      	ldr	r2, [pc, #212]	; (8003528 <SDMMC_GetCmdResp6+0xe8>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0a5b      	lsrs	r3, r3, #9
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	1e5a      	subs	r2, r3, #1
 8003468:	61fa      	str	r2, [r7, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800346e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003472:	e052      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ef      	beq.n	8003464 <SDMMC_GetCmdResp6+0x24>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ea      	bne.n	8003464 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2204      	movs	r2, #4
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034a0:	2304      	movs	r3, #4
 80034a2:	e03a      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e02f      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fc13 	bl	8002ce6 <SDIO_GetCommandResponse>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d001      	beq.n	80034ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e025      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	22c5      	movs	r2, #197	; 0xc5
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80034d4:	2100      	movs	r1, #0
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fc11 	bl	8002cfe <SDIO_GetResponse>
 80034dc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e011      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003504:	e009      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003514:	e001      	b.n	800351a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000000 	.word	0x20000000
 8003528:	10624dd3 	.word	0x10624dd3

0800352c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <SDMMC_GetCmdResp7+0x94>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <SDMMC_GetCmdResp7+0x98>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0a5b      	lsrs	r3, r3, #9
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	60fa      	str	r2, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003558:	e02c      	b.n	80035b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ef      	beq.n	800354a <SDMMC_GetCmdResp7+0x1e>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ea      	bne.n	800354a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2204      	movs	r2, #4
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003586:	2304      	movs	r3, #4
 8003588:	e014      	b.n	80035b4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800359c:	2301      	movs	r3, #1
 800359e:	e009      	b.n	80035b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80035b2:	2300      	movs	r3, #0
  
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000
 80035c4:	10624dd3 	.word	0x10624dd3

080035c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <SDMMC_GetCmdError+0x4c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <SDMMC_GetCmdError+0x50>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e5a      	subs	r2, r3, #1
 80035ea:	60fa      	str	r2, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80035f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035f4:	e009      	b.n	800360a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f1      	beq.n	80035e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	22c5      	movs	r2, #197	; 0xc5
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	20000000 	.word	0x20000000
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003620:	4904      	ldr	r1, [pc, #16]	; (8003634 <MX_FATFS_Init+0x18>)
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <MX_FATFS_Init+0x1c>)
 8003624:	f000 fdce 	bl	80041c4 <FATFS_LinkDriver>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <MX_FATFS_Init+0x20>)
 800362e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000320 	.word	0x20000320
 8003638:	0800449c 	.word	0x0800449c
 800363c:	2000031c 	.word	0x2000031c

08003640 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800364a:	f000 f86b 	bl	8003724 <BSP_SD_IsDetected>
 800364e:	4603      	mov	r3, r0
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e005      	b.n	8003664 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <BSP_SD_Init+0x2c>)
 800365a:	f7fe fb33 	bl	8001cc4 <HAL_SD_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8003662:	79fb      	ldrb	r3, [r7, #7]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000064 	.word	0x20000064

08003670 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	4806      	ldr	r0, [pc, #24]	; (80036a8 <BSP_SD_ReadBlocks+0x38>)
 800368e:	f7fe fbc9 	bl	8001e24 <HAL_SD_ReadBlocks>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000064 	.word	0x20000064

080036ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	4806      	ldr	r0, [pc, #24]	; (80036e4 <BSP_SD_WriteBlocks+0x38>)
 80036ca:	f7fe fd89 	bl	80021e0 <HAL_SD_WriteBlocks>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000064 	.word	0x20000064

080036e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <BSP_SD_GetCardState+0x1c>)
 80036ee:	f7ff f8cc 	bl	800288a <HAL_SD_GetCardState>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
}
 80036fe:	4618      	mov	r0, r3
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000064 	.word	0x20000064

08003708 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4803      	ldr	r0, [pc, #12]	; (8003720 <BSP_SD_GetCardInfo+0x18>)
 8003714:	f7ff f88e 	bl	8002834 <HAL_SD_GetCardInfo>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000064 	.word	0x20000064

08003724 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800372a:	2301      	movs	r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800372e:	f000 f80b 	bl	8003748 <BSP_PlatformIsDetected>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8003738:	2300      	movs	r3, #0
 800373a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	b2db      	uxtb	r3, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800374e:	2301      	movs	r3, #1
 8003750:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	4806      	ldr	r0, [pc, #24]	; (8003770 <BSP_PlatformIsDetected+0x28>)
 8003756:	f7fd fae7 	bl	8000d28 <HAL_GPIO_ReadPin>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8003760:	2300      	movs	r3, #0
 8003762:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8003764:	79fb      	ldrb	r3, [r7, #7]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40011000 	.word	0x40011000

08003774 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <disk_status+0x30>)
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	79fa      	ldrb	r2, [r7, #7]
 800378c:	4905      	ldr	r1, [pc, #20]	; (80037a4 <disk_status+0x30>)
 800378e:	440a      	add	r2, r1
 8003790:	7a12      	ldrb	r2, [r2, #8]
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
  return stat;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000344 	.word	0x20000344

080037a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <disk_initialize+0x48>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d111      	bne.n	80037e4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <disk_initialize+0x48>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <disk_initialize+0x48>)
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	79fa      	ldrb	r2, [r7, #7]
 80037d6:	4906      	ldr	r1, [pc, #24]	; (80037f0 <disk_initialize+0x48>)
 80037d8:	440a      	add	r2, r1
 80037da:	7a12      	ldrb	r2, [r2, #8]
 80037dc:	4610      	mov	r0, r2
 80037de:	4798      	blx	r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000344 	.word	0x20000344

080037f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <disk_read+0x3c>)
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	689c      	ldr	r4, [r3, #8]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <disk_read+0x3c>)
 8003814:	4413      	add	r3, r2
 8003816:	7a18      	ldrb	r0, [r3, #8]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	47a0      	blx	r4
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]
  return res;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	20000344 	.word	0x20000344

08003834 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <disk_write+0x3c>)
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68dc      	ldr	r4, [r3, #12]
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <disk_write+0x3c>)
 8003854:	4413      	add	r3, r2
 8003856:	7a18      	ldrb	r0, [r3, #8]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	47a0      	blx	r4
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]
  return res;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
}
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}
 800386e:	bf00      	nop
 8003870:	20000344 	.word	0x20000344

08003874 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e016      	b.n	80038b0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003882:	4910      	ldr	r1, [pc, #64]	; (80038c4 <clear_lock+0x50>)
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d108      	bne.n	80038aa <clear_lock+0x36>
 8003898:	490a      	ldr	r1, [pc, #40]	; (80038c4 <clear_lock+0x50>)
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3301      	adds	r3, #1
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d9e5      	bls.n	8003882 <clear_lock+0xe>
	}
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	2000032c 	.word	0x2000032c

080038c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d038      	beq.n	8003950 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80038e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	2301      	movs	r3, #1
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	f7ff ff9f 	bl	8003834 <disk_write>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <sync_window+0x3a>
			res = FR_DISK_ERR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e026      	b.n	8003950 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	1ad2      	subs	r2, r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800391a:	429a      	cmp	r2, r3
 800391c:	d218      	bcs.n	8003950 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e010      	b.n	800394a <sync_window+0x82>
					wsect += fs->fsize;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4413      	add	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	2301      	movs	r3, #1
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	f7ff ff78 	bl	8003834 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	3b01      	subs	r3, #1
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d8eb      	bhi.n	8003928 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d01b      	beq.n	80039ac <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffa7 	bl	80038c8 <sync_window>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d113      	bne.n	80039ac <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	2301      	movs	r3, #1
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	f7ff ff30 	bl	80037f4 <disk_read>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d031      	beq.n	8003a30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e002      	b.n	80039da <get_ldnumber+0x24>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3301      	adds	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d903      	bls.n	80039ea <get_ldnumber+0x34>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b3a      	cmp	r3, #58	; 0x3a
 80039e8:	d1f4      	bne.n	80039d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b3a      	cmp	r3, #58	; 0x3a
 80039f0:	d11c      	bne.n	8003a2c <get_ldnumber+0x76>
			tp = *path;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	60fa      	str	r2, [r7, #12]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	3b30      	subs	r3, #48	; 0x30
 8003a02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b09      	cmp	r3, #9
 8003a08:	d80e      	bhi.n	8003a28 <get_ldnumber+0x72>
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10a      	bne.n	8003a28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <get_ldnumber+0x72>
					vol = (int)i;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	e002      	b.n	8003a32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003a30:	693b      	ldr	r3, [r7, #16]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003a58:	6839      	ldr	r1, [r7, #0]
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff7d 	bl	800395a <move_window>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <check_fs+0x2e>
		return 3;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e04a      	b.n	8003b00 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003a70:	3301      	adds	r3, #1
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	b21a      	sxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <check_fs+0xcc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d001      	beq.n	8003a8e <check_fs+0x52>
		return 2;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e038      	b.n	8003b00 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3336      	adds	r3, #54	; 0x36
 8003a92:	3303      	adds	r3, #3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	061a      	lsls	r2, r3, #24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3336      	adds	r3, #54	; 0x36
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	3236      	adds	r2, #54	; 0x36
 8003aa8:	3201      	adds	r2, #1
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	0212      	lsls	r2, r2, #8
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <check_fs+0xd0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <check_fs+0x8a>
		return 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e01c      	b.n	8003b00 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3352      	adds	r3, #82	; 0x52
 8003aca:	3303      	adds	r3, #3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	061a      	lsls	r2, r3, #24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3352      	adds	r3, #82	; 0x52
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	4313      	orrs	r3, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	3252      	adds	r2, #82	; 0x52
 8003ae0:	3201      	adds	r2, #1
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	0212      	lsls	r2, r2, #8
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <check_fs+0xd0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d101      	bne.n	8003afe <check_fs+0xc2>
		return 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <check_fs+0xc4>

	return 1;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	ffffaa55 	.word	0xffffaa55
 8003b0c:	00544146 	.word	0x00544146

08003b10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b096      	sub	sp, #88	; 0x58
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003b24:	68b8      	ldr	r0, [r7, #8]
 8003b26:	f7ff ff46 	bl	80039b6 <get_ldnumber>
 8003b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da01      	bge.n	8003b36 <find_volume+0x26>
 8003b32:	230b      	movs	r3, #11
 8003b34:	e2a8      	b.n	8004088 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003b36:	4a9d      	ldr	r2, [pc, #628]	; (8003dac <find_volume+0x29c>)
 8003b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <find_volume+0x3a>
 8003b46:	230c      	movs	r3, #12
 8003b48:	e29e      	b.n	8004088 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01b      	beq.n	8003b92 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fe07 	bl	8003774 <disk_status>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10c      	bne.n	8003b92 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <find_volume+0x7e>
 8003b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	e27c      	b.n	8004088 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e27a      	b.n	8004088 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fdfc 	bl	80037a8 <disk_initialize>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e260      	b.n	8004088 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <find_volume+0xcc>
 8003bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8003bd8:	230a      	movs	r3, #10
 8003bda:	e255      	b.n	8004088 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003be0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003be2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003be4:	f7ff ff2a 	bl	8003a3c <check_fs>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d153      	bne.n	8003c9e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bfa:	e028      	b.n	8003c4e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8003bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003c06:	4413      	add	r3, r2
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <find_volume+0x12a>
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	330b      	adds	r3, #11
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	061a      	lsls	r2, r3, #24
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	330a      	adds	r3, #10
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	4313      	orrs	r3, r2
 8003c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c28:	3209      	adds	r2, #9
 8003c2a:	7812      	ldrb	r2, [r2, #0]
 8003c2c:	0212      	lsls	r2, r2, #8
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c32:	3208      	adds	r2, #8
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	e000      	b.n	8003c3c <find_volume+0x12c>
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	3358      	adds	r3, #88	; 0x58
 8003c42:	443b      	add	r3, r7
 8003c44:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d9d3      	bls.n	8003bfc <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003c54:	2300      	movs	r3, #0
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <find_volume+0x154>
 8003c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c60:	3b01      	subs	r3, #1
 8003c62:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	3358      	adds	r3, #88	; 0x58
 8003c6a:	443b      	add	r3, r7
 8003c6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003c70:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <find_volume+0x174>
 8003c78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c7c:	f7ff fede 	bl	8003a3c <check_fs>
 8003c80:	4603      	mov	r3, r0
 8003c82:	e000      	b.n	8003c86 <find_volume+0x176>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003c8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <find_volume+0x18e>
 8003c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c94:	3301      	adds	r3, #1
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d9e2      	bls.n	8003c64 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d101      	bne.n	8003caa <find_volume+0x19a>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e1ee      	b.n	8004088 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <find_volume+0x1a6>
 8003cb2:	230d      	movs	r3, #13
 8003cb4:	e1e8      	b.n	8004088 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	7b1b      	ldrb	r3, [r3, #12]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	7adb      	ldrb	r3, [r3, #11]
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ccc:	d001      	beq.n	8003cd2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8003cce:	230d      	movs	r3, #13
 8003cd0:	e1da      	b.n	8004088 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	7ddb      	ldrb	r3, [r3, #23]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	7d9b      	ldrb	r3, [r3, #22]
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8003ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d112      	bne.n	8003d14 <find_volume+0x204>
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003cf4:	061a      	lsls	r2, r3, #24
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d02:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003d06:	0212      	lsls	r2, r2, #8
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d0c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003d10:	4313      	orrs	r3, r2
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	7c1a      	ldrb	r2, [r3, #16]
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d006      	beq.n	8003d3e <find_volume+0x22e>
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d001      	beq.n	8003d3e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8003d3a:	230d      	movs	r3, #13
 8003d3c:	e1a4      	b.n	8004088 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003d44:	461a      	mov	r2, r3
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	7b5a      	ldrb	r2, [r3, #13]
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <find_volume+0x268>
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003d70:	3b01      	subs	r3, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8003d78:	230d      	movs	r3, #13
 8003d7a:	e185      	b.n	8004088 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	7c9b      	ldrb	r3, [r3, #18]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	b21a      	sxth	r2, r3
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	7c5b      	ldrb	r3, [r3, #17]
 8003d88:	b21b      	sxth	r3, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b21b      	sxth	r3, r3
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8003da6:	230d      	movs	r3, #13
 8003da8:	e16e      	b.n	8004088 <find_volume+0x578>
 8003daa:	bf00      	nop
 8003dac:	20000324 	.word	0x20000324

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	7d1b      	ldrb	r3, [r3, #20]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	b21a      	sxth	r2, r3
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	7cdb      	ldrb	r3, [r3, #19]
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b21b      	sxth	r3, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d112      	bne.n	8003df2 <find_volume+0x2e2>
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003dd2:	061a      	lsls	r2, r3, #24
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003de4:	0212      	lsls	r2, r2, #8
 8003de6:	4313      	orrs	r3, r2
 8003de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	7bdb      	ldrb	r3, [r3, #15]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	b21a      	sxth	r2, r3
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	7b9b      	ldrb	r3, [r3, #14]
 8003dfe:	b21b      	sxth	r3, r3
 8003e00:	4313      	orrs	r3, r2
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8003e06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <find_volume+0x300>
 8003e0c:	230d      	movs	r3, #13
 8003e0e:	e13b      	b.n	8004088 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003e10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e14:	4413      	add	r3, r2
 8003e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e18:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8003e1c:	0912      	lsrs	r2, r2, #4
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	4413      	add	r3, r2
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003e24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d201      	bcs.n	8003e30 <find_volume+0x320>
 8003e2c:	230d      	movs	r3, #13
 8003e2e:	e12b      	b.n	8004088 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e38:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <find_volume+0x33c>
 8003e48:	230d      	movs	r3, #13
 8003e4a:	e11d      	b.n	8004088 <find_volume+0x578>
	fmt = FS_FAT12;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d902      	bls.n	8003e62 <find_volume+0x352>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d902      	bls.n	8003e72 <find_volume+0x362>
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003e84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e88:	441a      	add	r2, r3
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8003e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	441a      	add	r2, r3
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8003e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d121      	bne.n	8003ee8 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <find_volume+0x3a2>
 8003eae:	230d      	movs	r3, #13
 8003eb0:	e0ea      	b.n	8004088 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003eb8:	061a      	lsls	r2, r3, #24
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8003eca:	0212      	lsls	r2, r2, #8
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee6:	e025      	b.n	8003f34 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <find_volume+0x3e6>
 8003ef2:	230d      	movs	r3, #13
 8003ef4:	e0c8      	b.n	8004088 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	441a      	add	r2, r3
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d104      	bne.n	8003f18 <find_volume+0x408>
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	e00c      	b.n	8003f32 <find_volume+0x422>
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	085a      	lsrs	r2, r3, #1
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003f32:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f40:	0a5b      	lsrs	r3, r3, #9
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d201      	bcs.n	8003f4a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8003f46:	230d      	movs	r3, #13
 8003f48:	e09e      	b.n	8004088 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003f68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d177      	bne.n	8004060 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d16a      	bne.n	8004060 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f92:	f7ff fce2 	bl	800395a <move_window>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d161      	bne.n	8004060 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	b21a      	sxth	r2, r3
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b21b      	sxth	r3, r3
 8003fba:	4a35      	ldr	r2, [pc, #212]	; (8004090 <find_volume+0x580>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d14f      	bne.n	8004060 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	78db      	ldrb	r3, [r3, #3]
 8003fc4:	061a      	lsls	r2, r3, #24
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	789b      	ldrb	r3, [r3, #2]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd0:	7852      	ldrb	r2, [r2, #1]
 8003fd2:	0212      	lsls	r2, r2, #8
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	4a2d      	ldr	r2, [pc, #180]	; (8004094 <find_volume+0x584>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d13e      	bne.n	8004060 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8003fe8:	061a      	lsls	r2, r3, #24
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ff6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8003ffa:	0212      	lsls	r2, r2, #8
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004000:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004004:	4313      	orrs	r3, r2
 8004006:	4a24      	ldr	r2, [pc, #144]	; (8004098 <find_volume+0x588>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d129      	bne.n	8004060 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004012:	061a      	lsls	r2, r3, #24
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	4313      	orrs	r3, r2
 800401e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004020:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004024:	0212      	lsls	r2, r2, #8
 8004026:	4313      	orrs	r3, r2
 8004028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800402a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800402e:	431a      	orrs	r2, r3
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800403c:	061a      	lsls	r2, r3, #24
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	4313      	orrs	r3, r2
 8004048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800404a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800404e:	0212      	lsls	r2, r2, #8
 8004050:	4313      	orrs	r3, r2
 8004052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004054:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004058:	431a      	orrs	r2, r3
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004066:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <find_volume+0x58c>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	3301      	adds	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <find_volume+0x58c>)
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <find_volume+0x58c>)
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004082:	f7ff fbf7 	bl	8003874 <clear_lock>
#endif

	return FR_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3758      	adds	r7, #88	; 0x58
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	ffffaa55 	.word	0xffffaa55
 8004094:	41615252 	.word	0x41615252
 8004098:	61417272 	.word	0x61417272
 800409c:	20000328 	.word	0x20000328

080040a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80040b2:	f107 0310 	add.w	r3, r7, #16
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fc7d 	bl	80039b6 <get_ldnumber>
 80040bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da01      	bge.n	80040c8 <f_mount+0x28>
 80040c4:	230b      	movs	r3, #11
 80040c6:	e02d      	b.n	8004124 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <f_mount+0x8c>)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80040d8:	69b8      	ldr	r0, [r7, #24]
 80040da:	f7ff fbcb 	bl	8003874 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	490d      	ldr	r1, [pc, #52]	; (800412c <f_mount+0x8c>)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <f_mount+0x6a>
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <f_mount+0x6e>
 800410a:	2300      	movs	r3, #0
 800410c:	e00a      	b.n	8004124 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800410e:	f107 0108 	add.w	r1, r7, #8
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	2200      	movs	r2, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fcf9 	bl	8003b10 <find_volume>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004122:	7dfb      	ldrb	r3, [r7, #23]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000324 	.word	0x20000324

08004130 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004146:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004148:	7a5b      	ldrb	r3, [r3, #9]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d831      	bhi.n	80041b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004152:	7a5b      	ldrb	r3, [r3, #9]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004160:	7a5b      	ldrb	r3, [r3, #9]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004170:	7a5b      	ldrb	r3, [r3, #9]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004178:	4413      	add	r3, r2
 800417a:	79fa      	ldrb	r2, [r7, #7]
 800417c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 8004180:	7a5b      	ldrb	r3, [r3, #9]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	b2d1      	uxtb	r1, r2
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <FATFS_LinkDriverEx+0x90>)
 800418a:	7251      	strb	r1, [r2, #9]
 800418c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800418e:	7dbb      	ldrb	r3, [r7, #22]
 8004190:	3330      	adds	r3, #48	; 0x30
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	3301      	adds	r3, #1
 800419c:	223a      	movs	r2, #58	; 0x3a
 800419e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	3302      	adds	r3, #2
 80041a4:	222f      	movs	r2, #47	; 0x2f
 80041a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	3303      	adds	r3, #3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	20000344 	.word	0x20000344

080041c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff ffac 	bl	8004130 <FATFS_LinkDriverEx>
 80041d8:	4603      	mov	r3, r0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <SD_initialize+0x38>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80041f4:	f7ff fa24 	bl	8003640 <BSP_SD_Init>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <SD_initialize+0x38>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b04      	ldr	r3, [pc, #16]	; (800421c <SD_initialize+0x38>)
 800420c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800420e:	4b03      	ldr	r3, [pc, #12]	; (800421c <SD_initialize+0x38>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000009 	.word	0x20000009

08004220 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <SD_status+0x38>)
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004230:	f7ff fa5a 	bl	80036e8 <BSP_SD_GetCardState>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <SD_status+0x38>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <SD_status+0x38>)
 8004248:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800424a:	4b03      	ldr	r3, [pc, #12]	; (8004258 <SD_status+0x38>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000009 	.word	0x20000009

0800425c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4603      	mov	r3, r0
 800426a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <SD_read+0x54>)
 8004272:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <SD_read+0x58>)
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	68b8      	ldr	r0, [r7, #8]
 800427c:	f7ff f9f8 	bl	8003670 <BSP_SD_ReadBlocks>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004286:	e006      	b.n	8004296 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	613a      	str	r2, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <SD_read+0x3a>
      {
        return RES_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e007      	b.n	80042a6 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004296:	f7ff fa27 	bl	80036e8 <BSP_SD_GetCardState>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f3      	bne.n	8004288 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	000186a0 	.word	0x000186a0
 80042b4:	05f5e100 	.word	0x05f5e100

080042b8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <SD_write+0x54>)
 80042ce:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <SD_write+0x58>)
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	68b8      	ldr	r0, [r7, #8]
 80042d8:	f7ff f9e8 	bl	80036ac <BSP_SD_WriteBlocks>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10e      	bne.n	8004300 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80042e2:	e006      	b.n	80042f2 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1e5a      	subs	r2, r3, #1
 80042e8:	613a      	str	r2, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <SD_write+0x3a>
      {
        return RES_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80042f2:	f7ff f9f9 	bl	80036e8 <BSP_SD_GetCardState>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f3      	bne.n	80042e4 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8004300:	7dfb      	ldrb	r3, [r7, #23]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	000186a0 	.word	0x000186a0
 8004310:	05f5e100 	.word	0x05f5e100

08004314 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	; 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	603a      	str	r2, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
 8004320:	460b      	mov	r3, r1
 8004322:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <SD_ioctl+0xa8>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <SD_ioctl+0x28>
 8004338:	2303      	movs	r3, #3
 800433a:	e03b      	b.n	80043b4 <SD_ioctl+0xa0>
  
  switch (cmd)
 800433c:	79bb      	ldrb	r3, [r7, #6]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d833      	bhi.n	80043aa <SD_ioctl+0x96>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <SD_ioctl+0x34>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	08004359 	.word	0x08004359
 800434c:	08004361 	.word	0x08004361
 8004350:	08004379 	.word	0x08004379
 8004354:	08004393 	.word	0x08004393
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800435e:	e027      	b.n	80043b0 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004360:	f107 030c 	add.w	r3, r7, #12
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f9cf 	bl	8003708 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004376:	e01b      	b.n	80043b0 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff f9c3 	bl	8003708 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	b29a      	uxth	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004390:	e00e      	b.n	80043b0 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f9b6 	bl	8003708 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800439c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80043a8:	e002      	b.n	80043b0 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 80043aa:	2304      	movs	r3, #4
 80043ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 80043b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3730      	adds	r7, #48	; 0x30
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000009 	.word	0x20000009

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	2600      	movs	r6, #0
 80043c4:	4d0c      	ldr	r5, [pc, #48]	; (80043f8 <__libc_init_array+0x38>)
 80043c6:	4c0d      	ldr	r4, [pc, #52]	; (80043fc <__libc_init_array+0x3c>)
 80043c8:	1b64      	subs	r4, r4, r5
 80043ca:	10a4      	asrs	r4, r4, #2
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	f000 f822 	bl	8004418 <_init>
 80043d4:	2600      	movs	r6, #0
 80043d6:	4d0a      	ldr	r5, [pc, #40]	; (8004400 <__libc_init_array+0x40>)
 80043d8:	4c0a      	ldr	r4, [pc, #40]	; (8004404 <__libc_init_array+0x44>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	080044b0 	.word	0x080044b0
 80043fc:	080044b0 	.word	0x080044b0
 8004400:	080044b0 	.word	0x080044b0
 8004404:	080044b4 	.word	0x080044b4

08004408 <memset>:
 8004408:	4603      	mov	r3, r0
 800440a:	4402      	add	r2, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	d100      	bne.n	8004412 <memset+0xa>
 8004410:	4770      	bx	lr
 8004412:	f803 1b01 	strb.w	r1, [r3], #1
 8004416:	e7f9      	b.n	800440c <memset+0x4>

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
