
christmas-2023_SD-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d8  080062d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080062d8  080062d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062d8  080062d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080062ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080062ec  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae3e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208d  00000000  00000000  0002ae73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002cf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a465  00000000  00000000  0002e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d42a  00000000  00000000  0004872d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f8c  00000000  00000000  00055b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9ae3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  000e9b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08006184 	.word	0x08006184

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08006184 	.word	0x08006184

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	f5ad 6dad 	sub.w	sp, sp, #1384	; 0x568
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 fa2e 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f87c 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f000 f8e0 	bl	80003f8 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000238:	f000 f8be 	bl	80003b8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800023c:	f003 f826 	bl	800328c <MX_FATFS_Init>
  //HAL_Delay(1000);

  FATFS FatFs;					// File System object structure
  FIL fil;						// File object structure act upon files in file system
  FRESULT res;					// Return code for file operations
  UINT count = 0;				// Counter for
 8000240:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8000244:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
   * &FatFs = FATFS system pointer.
   * "" = Drive number to mount - is this the name of the SD card?
   * 0 = delayed mount, 1 = mount immediately
   * It seems that not delaying the mount returns a "not ready" message. Not sure if this is how it's supposed to be.
   */
  res = f_mount(&FatFs, "XMAS-23", 1);
 800024c:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8000250:	2201      	movs	r2, #1
 8000252:	4932      	ldr	r1, [pc, #200]	; (800031c <main+0xf8>)
 8000254:	4618      	mov	r0, r3
 8000256:	f004 ff65 	bl	8005124 <f_mount>
 800025a:	4603      	mov	r3, r0
 800025c:	f887 3567 	strb.w	r3, [r7, #1383]	; 0x567
  //HAL_Delay(1000);
  if (res != FR_OK)
 8000260:	f897 3567 	ldrb.w	r3, [r7, #1383]	; 0x567
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <main+0x48>
	  return EXIT_FAILURE;
 8000268:	2301      	movs	r3, #1
 800026a:	e051      	b.n	8000310 <main+0xec>

  // Read test
	  char line[256];							// Variable to store reading in of line

	  res = f_open(&fil, "test.txt", FA_READ);	// Open *.txt file in read mode using pointer to file object structure.
 800026c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000270:	2201      	movs	r2, #1
 8000272:	492b      	ldr	r1, [pc, #172]	; (8000320 <main+0xfc>)
 8000274:	4618      	mov	r0, r3
 8000276:	f004 ff9d 	bl	80051b4 <f_open>
 800027a:	4603      	mov	r3, r0
 800027c:	f887 3567 	strb.w	r3, [r7, #1383]	; 0x567
	  HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f000 fa64 	bl	8000750 <HAL_Delay>
	  if (res != FR_OK)
 8000288:	f897 3567 	ldrb.w	r3, [r7, #1383]	; 0x567
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <main+0x70>
		  return EXIT_FAILURE;
 8000290:	2301      	movs	r3, #1
 8000292:	e03d      	b.n	8000310 <main+0xec>
	   * Read first line of file using pointer to file object structure.
	   * Records in data buffer named line
	   * Reads number of bytes in line
	   * count is a bytes read counter
	   */
	  f_read(&fil, line, sizeof(line), &count);
 8000294:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000298:	1d39      	adds	r1, r7, #4
 800029a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800029e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002a2:	f005 fa00 	bl	80056a6 <f_read>
	  //HAL_UART_Transmit(&huart2, (uint8_t*)line, count, 100);

	  res = f_close(&fil);
 80002a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002aa:	4618      	mov	r0, r3
 80002ac:	f005 fdcd 	bl	8005e4a <f_close>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f887 3567 	strb.w	r3, [r7, #1383]	; 0x567
	  if (res != FR_OK)
 80002b6:	f897 3567 	ldrb.w	r3, [r7, #1383]	; 0x567
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <main+0x9e>
	  return EXIT_FAILURE;
 80002be:	2301      	movs	r3, #1
 80002c0:	e026      	b.n	8000310 <main+0xec>

  // WRITE TEST
	res = f_open(&fil, "w_test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80002c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002c6:	220a      	movs	r2, #10
 80002c8:	4916      	ldr	r1, [pc, #88]	; (8000324 <main+0x100>)
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 ff72 	bl	80051b4 <f_open>
 80002d0:	4603      	mov	r3, r0
 80002d2:	f887 3567 	strb.w	r3, [r7, #1383]	; 0x567
	if (res != FR_OK)
 80002d6:	f897 3567 	ldrb.w	r3, [r7, #1383]	; 0x567
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <main+0xbe>
	  return EXIT_FAILURE;
 80002de:	2301      	movs	r3, #1
 80002e0:	e016      	b.n	8000310 <main+0xec>

	f_write(&fil, "Nucleo : SD card write test\n\r", 29, &count);
 80002e2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80002e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80002ea:	221d      	movs	r2, #29
 80002ec:	490e      	ldr	r1, [pc, #56]	; (8000328 <main+0x104>)
 80002ee:	f005 fb45 	bl	800597c <f_write>

	res = f_close(&fil);
 80002f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002f6:	4618      	mov	r0, r3
 80002f8:	f005 fda7 	bl	8005e4a <f_close>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f887 3567 	strb.w	r3, [r7, #1383]	; 0x567
	if (res != FR_OK)
 8000302:	f897 3567 	ldrb.w	r3, [r7, #1383]	; 0x567
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <main+0xea>
	  return EXIT_FAILURE;
 800030a:	2301      	movs	r3, #1
 800030c:	e000      	b.n	8000310 <main+0xec>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030e:	e7fe      	b.n	800030e <main+0xea>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000310:	4618      	mov	r0, r3
 8000312:	f507 67ad 	add.w	r7, r7, #1384	; 0x568
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	0800619c 	.word	0x0800619c
 8000320:	080061a4 	.word	0x080061a4
 8000324:	080061b0 	.word	0x080061b0
 8000328:	080061bc 	.word	0x080061bc

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f005 ff1a 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800036a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fcb7 	bl	8000ce8 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000380:	f000 f89e 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 ff24 	bl	80011ec <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 f889 	bl	80004c0 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <MX_SDIO_SD_Init+0x3c>)
 80003c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003da:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 80003e2:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <MX_SDIO_SD_Init+0x38>)
 80003e4:	2210      	movs	r2, #16
 80003e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	20000028 	.word	0x20000028
 80003f4:	40018000 	.word	0x40018000

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MX_GPIO_Init+0xbc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a28      	ldr	r2, [pc, #160]	; (80004b4 <MX_GPIO_Init+0xbc>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_GPIO_Init+0xbc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <MX_GPIO_Init+0xbc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <MX_GPIO_Init+0xbc>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <MX_GPIO_Init+0xbc>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_GPIO_Init+0xbc>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <MX_GPIO_Init+0xbc>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_GPIO_Init+0xbc>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2120      	movs	r1, #32
 8000458:	4817      	ldr	r0, [pc, #92]	; (80004b8 <MX_GPIO_Init+0xc0>)
 800045a:	f000 fc2c 	bl	8000cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 800045e:	2320      	movs	r3, #32
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4810      	ldr	r0, [pc, #64]	; (80004b8 <MX_GPIO_Init+0xc0>)
 8000476:	f000 fa73 	bl	8000960 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	480a      	ldr	r0, [pc, #40]	; (80004b8 <MX_GPIO_Init+0xc0>)
 800048e:	f000 fa67 	bl	8000960 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_FAKE_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_FAKE_Pin;
 8000492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049c:	2301      	movs	r3, #1
 800049e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CD_FAKE_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_GPIO_Init+0xc4>)
 80004a8:	f000 fa5a 	bl	8000960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40011000 	.word	0x40011000
 80004bc:	40010800 	.word	0x40010800

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <HAL_SD_MspInit+0xa4>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d13c      	bne.n	80005ca <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 8000556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055a:	6153      	str	r3, [r2, #20]
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0310 	and.w	r3, r3, #16
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 8000586:	f043 0320 	orr.w	r3, r3, #32
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_SD_MspInit+0xa8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0320 	and.w	r3, r3, #32
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000598:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800059c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a2:	2303      	movs	r3, #3
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4619      	mov	r1, r3
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <HAL_SD_MspInit+0xac>)
 80005ae:	f000 f9d7 	bl	8000960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b2:	2304      	movs	r3, #4
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4619      	mov	r1, r3
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <HAL_SD_MspInit+0xb0>)
 80005c6:	f000 f9cb 	bl	8000960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40018000 	.word	0x40018000
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40011000 	.word	0x40011000
 80005e0:	40011400 	.word	0x40011400

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <NMI_Handler+0x4>

080005ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <MemManage_Handler+0x4>

080005f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <UsageFault_Handler+0x4>

08000602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 f875 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
	...

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000640:	f7ff fff7 	bl	8000632 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000646:	490c      	ldr	r1, [pc, #48]	; (8000678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <LoopFillZerobss+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800065c:	4c09      	ldr	r4, [pc, #36]	; (8000684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f005 fd5f 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fdd9 	bl	8000224 <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800067c:	080062e0 	.word	0x080062e0
  ldr r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000684:	200000e4 	.word	0x200000e4

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f92b 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff ff10 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f935 	bl	8000946 <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f000 f90b 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	20000008 	.word	0x20000008
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a03      	ldr	r2, [pc, #12]	; (8000738 <HAL_IncTick+0x20>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000008 	.word	0x20000008
 8000738:	200000ac 	.word	0x200000ac

0800073c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	200000ac 	.word	0x200000ac

08000750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff fff0 	bl	800073c <HAL_GetTick>
 800075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000768:	d005      	beq.n	8000776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_Delay+0x44>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000776:	bf00      	nop
 8000778:	f7ff ffe0 	bl	800073c <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8f7      	bhi.n	8000778 <HAL_Delay+0x28>
  {
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	; (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	; (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	; (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	; 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff90 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff49 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5e 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff90 	bl	8000850 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5f 	bl	80007fc <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e179      	b.n	8000c68 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000974:	2201      	movs	r2, #1
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	429a      	cmp	r2, r3
 800098e:	f040 8168 	bne.w	8000c62 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a96      	ldr	r2, [pc, #600]	; (8000bf0 <HAL_GPIO_Init+0x290>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d05e      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 800099c:	4a94      	ldr	r2, [pc, #592]	; (8000bf0 <HAL_GPIO_Init+0x290>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d875      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009a2:	4a94      	ldr	r2, [pc, #592]	; (8000bf4 <HAL_GPIO_Init+0x294>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d058      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009a8:	4a92      	ldr	r2, [pc, #584]	; (8000bf4 <HAL_GPIO_Init+0x294>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d86f      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ae:	4a92      	ldr	r2, [pc, #584]	; (8000bf8 <HAL_GPIO_Init+0x298>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d052      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009b4:	4a90      	ldr	r2, [pc, #576]	; (8000bf8 <HAL_GPIO_Init+0x298>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d869      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ba:	4a90      	ldr	r2, [pc, #576]	; (8000bfc <HAL_GPIO_Init+0x29c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d04c      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009c0:	4a8e      	ldr	r2, [pc, #568]	; (8000bfc <HAL_GPIO_Init+0x29c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d863      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009c6:	4a8e      	ldr	r2, [pc, #568]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d046      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009cc:	4a8c      	ldr	r2, [pc, #560]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d85d      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d82a      	bhi.n	8000a2c <HAL_GPIO_Init+0xcc>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d859      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <HAL_GPIO_Init+0x80>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a35 	.word	0x08000a35
 80009e8:	08000a47 	.word	0x08000a47
 80009ec:	08000a89 	.word	0x08000a89
 80009f0:	08000a8f 	.word	0x08000a8f
 80009f4:	08000a8f 	.word	0x08000a8f
 80009f8:	08000a8f 	.word	0x08000a8f
 80009fc:	08000a8f 	.word	0x08000a8f
 8000a00:	08000a8f 	.word	0x08000a8f
 8000a04:	08000a8f 	.word	0x08000a8f
 8000a08:	08000a8f 	.word	0x08000a8f
 8000a0c:	08000a8f 	.word	0x08000a8f
 8000a10:	08000a8f 	.word	0x08000a8f
 8000a14:	08000a8f 	.word	0x08000a8f
 8000a18:	08000a8f 	.word	0x08000a8f
 8000a1c:	08000a8f 	.word	0x08000a8f
 8000a20:	08000a8f 	.word	0x08000a8f
 8000a24:	08000a3d 	.word	0x08000a3d
 8000a28:	08000a51 	.word	0x08000a51
 8000a2c:	4a75      	ldr	r2, [pc, #468]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a32:	e02c      	b.n	8000a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e029      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	3304      	adds	r3, #4
 8000a42:	623b      	str	r3, [r7, #32]
          break;
 8000a44:	e024      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e01f      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	330c      	adds	r3, #12
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e01a      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a62:	2304      	movs	r3, #4
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e013      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2308      	movs	r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	611a      	str	r2, [r3, #16]
          break;
 8000a7a:	e009      	b.n	8000a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	615a      	str	r2, [r3, #20]
          break;
 8000a86:	e003      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
          break;
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          break;
 8000a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d801      	bhi.n	8000a9a <HAL_GPIO_Init+0x13a>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	e001      	b.n	8000a9e <HAL_GPIO_Init+0x13e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2bff      	cmp	r3, #255	; 0xff
 8000aa4:	d802      	bhi.n	8000aac <HAL_GPIO_Init+0x14c>
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x152>
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	3b08      	subs	r3, #8
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	210f      	movs	r1, #15
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	6a39      	ldr	r1, [r7, #32]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	431a      	orrs	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 80c1 	beq.w	8000c62 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae0:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a48      	ldr	r2, [pc, #288]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af8:	4a44      	ldr	r2, [pc, #272]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3302      	adds	r3, #2
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <HAL_GPIO_Init+0x2b0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d01f      	beq.n	8000b64 <HAL_GPIO_Init+0x204>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <HAL_GPIO_Init+0x2b4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d019      	beq.n	8000b60 <HAL_GPIO_Init+0x200>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1fc>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a39      	ldr	r2, [pc, #228]	; (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1f8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a38      	ldr	r2, [pc, #224]	; (8000c20 <HAL_GPIO_Init+0x2c0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1f4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <HAL_GPIO_Init+0x2c4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1f0>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e00a      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b50:	2306      	movs	r3, #6
 8000b52:	e008      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x206>
 8000b64:	2300      	movs	r3, #0
 8000b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b76:	4925      	ldr	r1, [pc, #148]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	4924      	ldr	r1, [pc, #144]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	608b      	str	r3, [r1, #8]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4920      	ldr	r1, [pc, #128]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	491a      	ldr	r1, [pc, #104]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60cb      	str	r3, [r1, #12]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4916      	ldr	r1, [pc, #88]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d025      	beq.n	8000c2c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4910      	ldr	r1, [pc, #64]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
 8000bec:	e025      	b.n	8000c3a <HAL_GPIO_Init+0x2da>
 8000bee:	bf00      	nop
 8000bf0:	10320000 	.word	0x10320000
 8000bf4:	10310000 	.word	0x10310000
 8000bf8:	10220000 	.word	0x10220000
 8000bfc:	10210000 	.word	0x10210000
 8000c00:	10120000 	.word	0x10120000
 8000c04:	10110000 	.word	0x10110000
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40011400 	.word	0x40011400
 8000c20:	40011800 	.word	0x40011800
 8000c24:	40011c00 	.word	0x40011c00
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_GPIO_Init+0x324>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4913      	ldr	r1, [pc, #76]	; (8000c84 <HAL_GPIO_Init+0x324>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_GPIO_Init+0x324>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <HAL_GPIO_Init+0x324>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_GPIO_Init+0x324>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4909      	ldr	r1, [pc, #36]	; (8000c84 <HAL_GPIO_Init+0x324>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae7e 	bne.w	8000974 <HAL_GPIO_Init+0x14>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	372c      	adds	r7, #44	; 0x2c
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	807b      	strh	r3, [r7, #2]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cc6:	787b      	ldrb	r3, [r7, #1]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ccc:	887a      	ldrh	r2, [r7, #2]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cd2:	e003      	b.n	8000cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	041a      	lsls	r2, r3, #16
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	611a      	str	r2, [r3, #16]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e272      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8087 	beq.w	8000e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d08:	4b92      	ldr	r3, [pc, #584]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00c      	beq.n	8000d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d14:	4b8f      	ldr	r3, [pc, #572]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d112      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
 8000d20:	4b8c      	ldr	r3, [pc, #560]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d10b      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d06c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x12c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d168      	bne.n	8000e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e24c      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4e:	d106      	bne.n	8000d5e <HAL_RCC_OscConfig+0x76>
 8000d50:	4b80      	ldr	r3, [pc, #512]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a7f      	ldr	r2, [pc, #508]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e02e      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x98>
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a7a      	ldr	r2, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a77      	ldr	r2, [pc, #476]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01d      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0xbc>
 8000d8a:	4b72      	ldr	r3, [pc, #456]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a71      	ldr	r2, [pc, #452]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6e      	ldr	r2, [pc, #440]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000da4:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a67      	ldr	r2, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fcba 	bl	800073c <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fcb6 	bl	800073c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e200      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe4>
 8000dea:	e014      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fca6 	bl	800073c <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fca2 	bl	800073c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1ec      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x10c>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d063      	beq.n	8000eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2e:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d11c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d001      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e1c0      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4939      	ldr	r1, [pc, #228]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	e03a      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d020      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fc5b 	bl	800073c <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fc57 	bl	800073c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e1a1      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4927      	ldr	r1, [pc, #156]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc3a 	bl	800073c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fc36 	bl	800073c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e180      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d03a      	beq.n	8000f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc1a 	bl	800073c <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc16 	bl	800073c <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e160      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fa9e 	bl	800146c <RCC_Delay>
 8000f30:	e01c      	b.n	8000f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc00 	bl	800073c <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	e00f      	b.n	8000f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fbfc 	bl	800073c <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d908      	bls.n	8000f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e146      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420000 	.word	0x42420000
 8000f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f60:	4b92      	ldr	r3, [pc, #584]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e9      	bne.n	8000f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a6 	beq.w	80010c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10d      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b88      	ldr	r3, [pc, #544]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a87      	ldr	r2, [pc, #540]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fbbd 	bl	800073c <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fbb9 	bl	800073c <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e103      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x312>
 8000fec:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a6e      	ldr	r2, [pc, #440]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	e02d      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x334>
 8001002:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a69      	ldr	r2, [pc, #420]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a66      	ldr	r2, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e01c      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d10c      	bne.n	800103e <HAL_RCC_OscConfig+0x356>
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a60      	ldr	r2, [pc, #384]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a5d      	ldr	r2, [pc, #372]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	e00b      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b58      	ldr	r3, [pc, #352]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a57      	ldr	r2, [pc, #348]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fb6d 	bl	800073c <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001066:	f7ff fb69 	bl	800073c <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0b1      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ee      	beq.n	8001066 <HAL_RCC_OscConfig+0x37e>
 8001088:	e014      	b.n	80010b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fb57 	bl	800073c <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fb53 	bl	800073c <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e09b      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ee      	bne.n	8001092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ba:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a3b      	ldr	r2, [pc, #236]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d061      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d146      	bne.n	8001172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fb27 	bl	800073c <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fb23 	bl	800073c <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e06d      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	4921      	ldr	r1, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a19      	ldr	r1, [r3, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	430b      	orrs	r3, r1
 800113e:	491b      	ldr	r1, [pc, #108]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff faf7 	bl	800073c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff faf3 	bl	800073c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e03d      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x46a>
 8001170:	e035      	b.n	80011de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fae0 	bl	800073c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fadc 	bl	800073c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e026      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x498>
 800119e:	e01e      	b.n	80011de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e019      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40007000 	.word	0x40007000
 80011b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_OscConfig+0x500>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0d0      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d910      	bls.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4965      	ldr	r1, [pc, #404]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0b8      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a58      	ldr	r2, [pc, #352]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800126a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	494d      	ldr	r1, [pc, #308]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d040      	beq.n	800130c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e07f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e073      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e06b      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 0203 	bic.w	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4936      	ldr	r1, [pc, #216]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012dc:	f7ff fa2e 	bl	800073c <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff fa2a 	bl	800073c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e053      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 020c 	and.w	r2, r3, #12
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	429a      	cmp	r2, r3
 800130a:	d1eb      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d210      	bcs.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 0207 	bic.w	r2, r3, #7
 8001322:	4922      	ldr	r1, [pc, #136]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d001      	beq.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e032      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4916      	ldr	r1, [pc, #88]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	490e      	ldr	r1, [pc, #56]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800137a:	f000 f821 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	490a      	ldr	r1, [pc, #40]	; (80013b4 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x1d0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f98c 	bl	80006b8 <HAL_InitTick>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	08006220 	.word	0x08006220
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_RCC_GetSysClockFreq+0x94>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d002      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ee:	e027      	b.n	8001440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	e027      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_RCC_GetSysClockFreq+0x94>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c5b      	lsrs	r3, r3, #17
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 8001422:	fb03 f202 	mul.w	r2, r3, r2
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e004      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	613b      	str	r3, [r7, #16]
      break;
 800143e:	e002      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001442:	613b      	str	r3, [r7, #16]
      break;
 8001444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001446:	693b      	ldr	r3, [r7, #16]
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	00b71b00 	.word	0x00b71b00
 800145c:	08006230 	.word	0x08006230
 8001460:	08006240 	.word	0x08006240
 8001464:	003d0900 	.word	0x003d0900
 8001468:	007a1200 	.word	0x007a1200

0800146c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <RCC_Delay+0x34>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <RCC_Delay+0x38>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0a5b      	lsrs	r3, r3, #9
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001488:	bf00      	nop
  }
  while (Delay --);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	60fa      	str	r2, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f9      	bne.n	8001488 <RCC_Delay+0x1c>
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000000 	.word	0x20000000
 80014a4:	10624dd3 	.word	0x10624dd3

080014a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e022      	b.n	8001500 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff f82f 	bl	8000530 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2203      	movs	r2, #3
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f814 	bl	8001508 <HAL_SD_InitCard>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00a      	b.n	8001500 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af04      	add	r7, sp, #16
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001524:	2376      	movs	r3, #118	; 0x76
 8001526:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681d      	ldr	r5, [r3, #0]
 800152c:	466c      	mov	r4, sp
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001540:	4628      	mov	r0, r5
 8001542:	f001 f93c 	bl	80027be <SDIO_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800154c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e04f      	b.n	80015f8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_SD_InitCard+0xf8>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f001 f971 	bl	800284a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <HAL_SD_InitCard+0xf8>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff f8ee 	bl	8000750 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 ff03 	bl	8002380 <SD_PowerON>
 800157a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e02e      	b.n	80015f8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fe22 	bl	80021e4 <SD_InitCard>
 80015a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e01b      	b.n	80015f8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 f9ca 	bl	8002962 <SDMMC_CmdBlockLength>
 80015ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00f      	beq.n	80015f6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_SD_InitCard+0xfc>)
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	423000a0 	.word	0x423000a0
 8001604:	004005ff 	.word	0x004005ff

08001608 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b092      	sub	sp, #72	; 0x48
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001616:	f7ff f891 	bl	800073c <HAL_GetTick>
 800161a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d107      	bne.n	800163a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e1bd      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b01      	cmp	r3, #1
 8001644:	f040 81b0 	bne.w	80019a8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800164e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	441a      	add	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	429a      	cmp	r2, r3
 800165a:	d907      	bls.n	800166c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e1a4      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2203      	movs	r2, #3
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	2b01      	cmp	r3, #1
 8001682:	d002      	beq.n	800168a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001696:	2390      	movs	r3, #144	; 0x90
 8001698:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800169a:	2302      	movs	r3, #2
 800169c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f107 0214 	add.w	r2, r7, #20
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 f92b 	bl	800290c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d90a      	bls.n	80016d2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2202      	movs	r2, #2
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f98e 	bl	80029ea <SDMMC_CmdReadMultiBlock>
 80016ce:	6478      	str	r0, [r7, #68]	; 0x44
 80016d0:	e009      	b.n	80016e6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 f961 	bl	80029a6 <SDMMC_CmdReadSingleBlock>
 80016e4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80016e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d012      	beq.n	8001712 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7a      	ldr	r2, [pc, #488]	; (80018dc <HAL_SD_ReadBlocks+0x2d4>)
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e151      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001716:	e061      	b.n	80017dc <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03c      	beq.n	80017a0 <HAL_SD_ReadBlocks+0x198>
 8001726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d039      	beq.n	80017a0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800172c:	2300      	movs	r3, #0
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
 8001730:	e033      	b.n	800179a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f001 f86b 	bl	8002812 <SDIO_ReadFIFO>
 800173c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	b2da      	uxtb	r2, r3
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	3301      	adds	r3, #1
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800174c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174e:	3b01      	subs	r3, #1
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b2da      	uxtb	r2, r3
 8001758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	3301      	adds	r3, #1
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001764:	3b01      	subs	r3, #1
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	b2da      	uxtb	r2, r3
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	3301      	adds	r3, #1
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800177a:	3b01      	subs	r3, #1
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	0e1b      	lsrs	r3, r3, #24
 8001782:	b2da      	uxtb	r2, r3
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178a:	3301      	adds	r3, #1
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800178e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001790:	3b01      	subs	r3, #1
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001796:	3301      	adds	r3, #1
 8001798:	643b      	str	r3, [r7, #64]	; 0x40
 800179a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800179c:	2b07      	cmp	r3, #7
 800179e:	d9c8      	bls.n	8001732 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80017a0:	f7fe ffcc 	bl	800073c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d902      	bls.n	80017b6 <HAL_SD_ReadBlocks+0x1ae>
 80017b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d112      	bne.n	80017dc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_SD_ReadBlocks+0x2d4>)
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0ec      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e2:	f240 332a 	movw	r3, #810	; 0x32a
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d095      	beq.n	8001718 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d022      	beq.n	8001840 <HAL_SD_ReadBlocks+0x238>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d91f      	bls.n	8001840 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	2b03      	cmp	r3, #3
 8001806:	d01b      	beq.n	8001840 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f001 f953 	bl	8002ab8 <SDMMC_CmdStopTransfer>
 8001812:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001816:	2b00      	cmp	r3, #0
 8001818:	d012      	beq.n	8001840 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <HAL_SD_ReadBlocks+0x2d4>)
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0ba      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d012      	beq.n	8001874 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a22      	ldr	r2, [pc, #136]	; (80018dc <HAL_SD_ReadBlocks+0x2d4>)
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185a:	f043 0208 	orr.w	r2, r3, #8
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0a0      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d012      	beq.n	80018a8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_SD_ReadBlocks+0x2d4>)
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e086      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d063      	beq.n	800197e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_SD_ReadBlocks+0x2d4>)
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e06c      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
 80018dc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 ff94 	bl	8002812 <SDIO_ReadFIFO>
 80018ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80018f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f6:	3301      	adds	r3, #1
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80018fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fc:	3b01      	subs	r3, #1
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b2da      	uxtb	r2, r3
 8001906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001908:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	3301      	adds	r3, #1
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	3b01      	subs	r3, #1
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	b2da      	uxtb	r2, r3
 800191c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001922:	3301      	adds	r3, #1
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001928:	3b01      	subs	r3, #1
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800192c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192e:	0e1b      	lsrs	r3, r3, #24
 8001930:	b2da      	uxtb	r2, r3
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	3301      	adds	r3, #1
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800193c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800193e:	3b01      	subs	r3, #1
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001942:	f7fe fefb 	bl	800073c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800194e:	429a      	cmp	r2, r3
 8001950:	d902      	bls.n	8001958 <HAL_SD_ReadBlocks+0x350>
 8001952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001954:	2b00      	cmp	r3, #0
 8001956:	d112      	bne.n	800197e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_SD_ReadBlocks+0x3b8>)
 800195e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e01b      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <HAL_SD_ReadBlocks+0x38a>
 800198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1a6      	bne.n	80018e0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f240 523a 	movw	r2, #1338	; 0x53a
 800199a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e006      	b.n	80019b6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3748      	adds	r7, #72	; 0x48
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	004005ff 	.word	0x004005ff

080019c4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b092      	sub	sp, #72	; 0x48
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80019d2:	f7fe feb3 	bl	800073c <HAL_GetTick>
 80019d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d107      	bne.n	80019f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e166      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 8159 	bne.w	8001cb6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	441a      	add	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d907      	bls.n	8001a28 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e14d      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d002      	beq.n	8001a46 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a42:	025b      	lsls	r3, r3, #9
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	025b      	lsls	r3, r3, #9
 8001a50:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001a52:	2390      	movs	r3, #144	; 0x90
 8001a54:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f107 0218 	add.w	r2, r7, #24
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 ff4d 	bl	800290c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d90a      	bls.n	8001a8e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fff4 	bl	8002a72 <SDMMC_CmdWriteMultiBlock>
 8001a8a:	6478      	str	r0, [r7, #68]	; 0x44
 8001a8c:	e009      	b.n	8001aa2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2210      	movs	r2, #16
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 ffc7 	bl	8002a2e <SDMMC_CmdWriteSingleBlock>
 8001aa0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d012      	beq.n	8001ace <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a87      	ldr	r2, [pc, #540]	; (8001ccc <HAL_SD_WriteBlocks+0x308>)
 8001aae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0fa      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ad2:	e065      	b.n	8001ba0 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_SD_WriteBlocks+0x1a0>
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d03d      	beq.n	8001b64 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
 8001aec:	e037      	b.n	8001b5e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	3301      	adds	r3, #1
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afc:	3b01      	subs	r3, #1
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	021a      	lsls	r2, r3, #8
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	3301      	adds	r3, #1
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b14:	3b01      	subs	r3, #1
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	3301      	adds	r3, #1
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	061a      	lsls	r2, r3, #24
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3e:	3301      	adds	r3, #1
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	3b01      	subs	r3, #1
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f107 0214 	add.w	r2, r7, #20
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fe69 	bl	800282a <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8001b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b60:	2b07      	cmp	r3, #7
 8001b62:	d9c4      	bls.n	8001aee <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001b64:	f7fe fdea 	bl	800073c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d902      	bls.n	8001b7a <HAL_SD_WriteBlocks+0x1b6>
 8001b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d112      	bne.n	8001ba0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a53      	ldr	r2, [pc, #332]	; (8001ccc <HAL_SD_WriteBlocks+0x308>)
 8001b80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e091      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba6:	f240 331a 	movw	r3, #794	; 0x31a
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d091      	beq.n	8001ad4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d022      	beq.n	8001c04 <HAL_SD_WriteBlocks+0x240>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d91f      	bls.n	8001c04 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d01b      	beq.n	8001c04 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 ff71 	bl	8002ab8 <SDMMC_CmdStopTransfer>
 8001bd6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d012      	beq.n	8001c04 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <HAL_SD_WriteBlocks+0x308>)
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e05f      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_SD_WriteBlocks+0x308>)
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	f043 0208 	orr.w	r2, r3, #8
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e045      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d012      	beq.n	8001c6c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_SD_WriteBlocks+0x308>)
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	f043 0202 	orr.w	r2, r3, #2
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e02b      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_SD_WriteBlocks+0x308>)
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e011      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f240 523a 	movw	r2, #1338	; 0x53a
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e006      	b.n	8001cc4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3748      	adds	r7, #72	; 0x48
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	004005ff 	.word	0x004005ff

08001cd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cde:	0f9b      	lsrs	r3, r3, #30
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cfc:	0e1b      	lsrs	r3, r3, #24
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d30:	0d1b      	lsrs	r3, r3, #20
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d4e:	0bdb      	lsrs	r3, r3, #15
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d60:	0b9b      	lsrs	r3, r3, #14
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d84:	0b1b      	lsrs	r3, r3, #12
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2200      	movs	r2, #0
 8001d96:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d163      	bne.n	8001e68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001da4:	009a      	lsls	r2, r3, #2
 8001da6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001daa:	4013      	ands	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001db0:	0f92      	lsrs	r2, r2, #30
 8001db2:	431a      	orrs	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dbc:	0edb      	lsrs	r3, r3, #27
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dce:	0e1b      	lsrs	r3, r3, #24
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de0:	0d5b      	lsrs	r3, r3, #21
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e04:	0bdb      	lsrs	r3, r3, #15
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7e1b      	ldrb	r3, [r3, #24]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	3302      	adds	r3, #2
 8001e28:	2201      	movs	r2, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	7a1b      	ldrb	r3, [r3, #8]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e54:	0a52      	lsrs	r2, r2, #9
 8001e56:	fb03 f202 	mul.w	r2, r3, r2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e64:	661a      	str	r2, [r3, #96]	; 0x60
 8001e66:	e031      	b.n	8001ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d11d      	bne.n	8001eac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e7e:	0c1b      	lsrs	r3, r3, #16
 8001e80:	431a      	orrs	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	029a      	lsls	r2, r3, #10
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	661a      	str	r2, [r3, #96]	; 0x60
 8001eaa:	e00f      	b.n	8001ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_SD_GetCardCSD+0x344>)
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e09d      	b.n	8002008 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed0:	0b9b      	lsrs	r3, r3, #14
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee2:	09db      	lsrs	r3, r3, #7
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	0fdb      	lsrs	r3, r3, #31
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	0f5b      	lsrs	r3, r3, #29
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	0d9b      	lsrs	r3, r3, #22
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	0d5b      	lsrs	r3, r3, #21
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	0bdb      	lsrs	r3, r3, #15
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	0b9b      	lsrs	r3, r3, #14
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	0b1b      	lsrs	r3, r3, #12
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	004005ff 	.word	0x004005ff

08002018 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af04      	add	r7, sp, #16
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	2b03      	cmp	r3, #3
 800208e:	d02e      	beq.n	80020ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002096:	d106      	bne.n	80020a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
 80020a4:	e029      	b.n	80020fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ac:	d10a      	bne.n	80020c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fa1c 	bl	80024ec <SD_WideBus_Enable>
 80020b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
 80020c2:	e01a      	b.n	80020fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa59 	bl	8002582 <SD_WideBus_Disable>
 80020d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
 80020de:	e00c      	b.n	80020fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
 80020ec:	e005      	b.n	80020fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002118:	e01f      	b.n	800215a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681d      	ldr	r5, [r3, #0]
 8002140:	466c      	mov	r4, sp
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800214a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002154:	4628      	mov	r0, r5
 8002156:	f000 fb32 	bl	80027be <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fbfd 	bl	8002962 <SDMMC_CmdBlockLength>
 8002168:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00c      	beq.n	800218a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002196:	4618      	mov	r0, r3
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bdb0      	pop	{r4, r5, r7, pc}
 800219e:	bf00      	nop
 80021a0:	004005ff 	.word	0x004005ff

080021a4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f970 	bl	800249c <SD_SendStatus>
 80021bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	0a5b      	lsrs	r3, r3, #9
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80021da:	693b      	ldr	r3, [r7, #16]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b094      	sub	sp, #80	; 0x50
 80021e8:	af04      	add	r7, sp, #16
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80021ec:	2301      	movs	r3, #1
 80021ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fb35 	bl	8002864 <SDIO_GetPowerState>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002200:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002204:	e0b8      	b.n	8002378 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	2b03      	cmp	r3, #3
 800220c:	d02f      	beq.n	800226e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fd5a 	bl	8002ccc <SDMMC_CmdSendCID>
 8002218:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SD_InitCard+0x40>
    {
      return errorstate;
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	e0a9      	b.n	8002378 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fb5c 	bl	80028e8 <SDIO_GetResponse>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2104      	movs	r1, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fb53 	bl	80028e8 <SDIO_GetResponse>
 8002242:	4602      	mov	r2, r0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2108      	movs	r1, #8
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fb4a 	bl	80028e8 <SDIO_GetResponse>
 8002254:	4602      	mov	r2, r0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	210c      	movs	r1, #12
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fb41 	bl	80028e8 <SDIO_GetResponse>
 8002266:	4602      	mov	r2, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	2b03      	cmp	r3, #3
 8002274:	d00d      	beq.n	8002292 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f107 020e 	add.w	r2, r7, #14
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fd60 	bl	8002d46 <SDMMC_CmdSetRelAdd>
 8002286:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SD_InitCard+0xae>
    {
      return errorstate;
 800228e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002290:	e072      	b.n	8002378 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	2b03      	cmp	r3, #3
 8002298:	d036      	beq.n	8002308 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fd2a 	bl	8002d08 <SDMMC_CmdSendCSD>
 80022b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80022b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	e05b      	b.n	8002378 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fb0e 	bl	80028e8 <SDIO_GetResponse>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2104      	movs	r1, #4
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fb05 	bl	80028e8 <SDIO_GetResponse>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2108      	movs	r1, #8
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fafc 	bl	80028e8 <SDIO_GetResponse>
 80022f0:	4602      	mov	r2, r0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	210c      	movs	r1, #12
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 faf3 	bl	80028e8 <SDIO_GetResponse>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2104      	movs	r1, #4
 800230e:	4618      	mov	r0, r3
 8002310:	f000 faea 	bl	80028e8 <SDIO_GetResponse>
 8002314:	4603      	mov	r3, r0
 8002316:	0d1a      	lsrs	r2, r3, #20
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fcd4 	bl	8001cd0 <HAL_SD_GetCardCSD>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800232e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002332:	e021      	b.n	8002378 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	2200      	movs	r2, #0
 8002340:	461c      	mov	r4, r3
 8002342:	4615      	mov	r5, r2
 8002344:	4622      	mov	r2, r4
 8002346:	462b      	mov	r3, r5
 8002348:	4608      	mov	r0, r1
 800234a:	f000 fbd7 	bl	8002afc <SDMMC_CmdSelDesel>
 800234e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <SD_InitCard+0x176>
  {
    return errorstate;
 8002356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002358:	e00e      	b.n	8002378 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681d      	ldr	r5, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	466c      	mov	r4, sp
 8002362:	f103 0210 	add.w	r2, r3, #16
 8002366:	ca07      	ldmia	r2, {r0, r1, r2}
 8002368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800236c:	3304      	adds	r3, #4
 800236e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002370:	4628      	mov	r0, r5
 8002372:	f000 fa24 	bl	80027be <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3740      	adds	r7, #64	; 0x40
 800237c:	46bd      	mov	sp, r7
 800237e:	bdb0      	pop	{r4, r5, r7, pc}

08002380 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fbd2 	bl	8002b42 <SDMMC_CmdGoIdleState>
 800239e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	e072      	b.n	8002490 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fbe5 	bl	8002b7e <SDMMC_CmdOperCond>
 80023b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fbbb 	bl	8002b42 <SDMMC_CmdGoIdleState>
 80023cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d004      	beq.n	80023de <SD_PowerON+0x5e>
    {
      return errorstate;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	e05b      	b.n	8002490 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d137      	bne.n	8002456 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fbe5 	bl	8002bbc <SDMMC_CmdAppCommand>
 80023f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02d      	beq.n	8002456 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80023fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80023fe:	e047      	b.n	8002490 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fbd8 	bl	8002bbc <SDMMC_CmdAppCommand>
 800240c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SD_PowerON+0x98>
    {
      return errorstate;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	e03b      	b.n	8002490 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	491e      	ldr	r1, [pc, #120]	; (8002498 <SD_PowerON+0x118>)
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fbee 	bl	8002c00 <SDMMC_CmdAppOperCommand>
 8002424:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800242c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002430:	e02e      	b.n	8002490 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa55 	bl	80028e8 <SDIO_GetResponse>
 800243e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	0fdb      	lsrs	r3, r3, #31
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <SD_PowerON+0xcc>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <SD_PowerON+0xce>
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]

    count++;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3301      	adds	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800245c:	4293      	cmp	r3, r2
 800245e:	d802      	bhi.n	8002466 <SD_PowerON+0xe6>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0cc      	beq.n	8002400 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800246c:	4293      	cmp	r3, r2
 800246e:	d902      	bls.n	8002476 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002474:	e00c      	b.n	8002490 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
 8002486:	e002      	b.n	800248e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	c1100000 	.word	0xc1100000

0800249c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80024ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80024b0:	e018      	b.n	80024e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fc62 	bl	8002d88 <SDMMC_CmdSendStatus>
 80024c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	e009      	b.n	80024e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fa06 	bl	80028e8 <SDIO_GetResponse>
 80024dc:	4602      	mov	r2, r0
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f9f0 	bl	80028e8 <SDIO_GetResponse>
 8002508:	4603      	mov	r3, r0
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002512:	d102      	bne.n	800251a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002518:	e02f      	b.n	800257a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f879 	bl	8002618 <SD_FindSCR>
 8002526:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	e023      	b.n	800257a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01c      	beq.n	8002576 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f000 fb37 	bl	8002bbc <SDMMC_CmdAppCommand>
 800254e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	e00f      	b.n	800257a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fb70 	bl	8002c46 <SDMMC_CmdBusWidth>
 8002566:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	e003      	b.n	800257a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002572:	2300      	movs	r3, #0
 8002574:	e001      	b.n	800257a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002576:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f9a5 	bl	80028e8 <SDIO_GetResponse>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025a8:	d102      	bne.n	80025b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80025aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ae:	e02f      	b.n	8002610 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f82e 	bl	8002618 <SD_FindSCR>
 80025bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	e023      	b.n	8002610 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01c      	beq.n	800260c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 faec 	bl	8002bbc <SDMMC_CmdAppCommand>
 80025e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	e00f      	b.n	8002610 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fb25 	bl	8002c46 <SDMMC_CmdBusWidth>
 80025fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	e003      	b.n	8002610 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002608:	2300      	movs	r3, #0
 800260a:	e001      	b.n	8002610 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800260c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b08f      	sub	sp, #60	; 0x3c
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002622:	f7fe f88b 	bl	800073c <HAL_GetTick>
 8002626:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2108      	movs	r1, #8
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f98f 	bl	8002962 <SDMMC_CmdBlockLength>
 8002644:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <SD_FindSCR+0x38>
  {
    return errorstate;
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	e0b2      	b.n	80027b6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f000 faad 	bl	8002bbc <SDMMC_CmdAppCommand>
 8002662:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <SD_FindSCR+0x56>
  {
    return errorstate;
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	e0a3      	b.n	80027b6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002674:	2308      	movs	r3, #8
 8002676:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002678:	2330      	movs	r3, #48	; 0x30
 800267a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800267c:	2302      	movs	r3, #2
 800267e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f107 0210 	add.w	r2, r7, #16
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f93a 	bl	800290c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 faf4 	bl	8002c8a <SDMMC_CmdSendSCR>
 80026a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d02a      	beq.n	8002700 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	e083      	b.n	80027b6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00f      	beq.n	80026dc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	f107 0208 	add.w	r2, r7, #8
 80026c8:	18d4      	adds	r4, r2, r3
 80026ca:	4608      	mov	r0, r1
 80026cc:	f000 f8a1 	bl	8002812 <SDIO_ReadFIFO>
 80026d0:	4603      	mov	r3, r0
 80026d2:	6023      	str	r3, [r4, #0]
      index++;
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d6:	3301      	adds	r3, #1
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
 80026da:	e006      	b.n	80026ea <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80026ea:	f7fe f827 	bl	800073c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d102      	bne.n	8002700 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80026fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026fe:	e05a      	b.n	80027b6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0cf      	beq.n	80026ae <SD_FindSCR+0x96>
 800270e:	e000      	b.n	8002712 <SD_FindSCR+0xfa>
      break;
 8002710:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002728:	2308      	movs	r3, #8
 800272a:	e044      	b.n	80027b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2202      	movs	r2, #2
 8002740:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002742:	2302      	movs	r3, #2
 8002744:	e037      	b.n	80027b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800275c:	2320      	movs	r3, #32
 800275e:	e02a      	b.n	80027b6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f240 523a 	movw	r2, #1338	; 0x53a
 8002768:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	061a      	lsls	r2, r3, #24
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002776:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002780:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0e1b      	lsrs	r3, r3, #24
 8002786:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	601a      	str	r2, [r3, #0]
    scr++;
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	3304      	adds	r3, #4
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	061a      	lsls	r2, r3, #24
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800279e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80027a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0e1b      	lsrs	r3, r3, #24
 80027ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	373c      	adds	r7, #60	; 0x3c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}

080027be <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80027be:	b084      	sub	sp, #16
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	f107 001c 	add.w	r0, r7, #28
 80027cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80027d4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80027d6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80027d8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80027dc:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80027e0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80027e4:	431a      	orrs	r2, r3
             Init.ClockDiv
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80027e8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80027f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	b004      	add	sp, #16
 8002810:	4770      	bx	lr

08002812 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0303 	and.w	r3, r3, #3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800289c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80028a2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80028a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80028b8:	f023 030f 	bic.w	r3, r3, #15
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	b2db      	uxtb	r3, r3
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3314      	adds	r3, #20
 80028f6:	461a      	mov	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
}  
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002932:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002938:	431a      	orrs	r2, r3
                       Data->DPSM);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800293e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002956:	2300      	movs	r3, #0

}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b088      	sub	sp, #32
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002970:	2310      	movs	r3, #16
 8002972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002974:	2340      	movs	r3, #64	; 0x40
 8002976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff78 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	2110      	movs	r1, #16
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fa19 	bl	8002dcc <SDMMC_GetCmdResp1>
 800299a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800299c:	69fb      	ldr	r3, [r7, #28]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80029b4:	2311      	movs	r3, #17
 80029b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029b8:	2340      	movs	r3, #64	; 0x40
 80029ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff56 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	2111      	movs	r1, #17
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9f7 	bl	8002dcc <SDMMC_GetCmdResp1>
 80029de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029e0:	69fb      	ldr	r3, [r7, #28]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b088      	sub	sp, #32
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80029f8:	2312      	movs	r3, #18
 80029fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff34 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	2112      	movs	r1, #18
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f9d5 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a24:	69fb      	ldr	r3, [r7, #28]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b088      	sub	sp, #32
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002a3c:	2318      	movs	r3, #24
 8002a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a40:	2340      	movs	r3, #64	; 0x40
 8002a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff12 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	2118      	movs	r1, #24
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f9b3 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a68:	69fb      	ldr	r3, [r7, #28]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b088      	sub	sp, #32
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002a80:	2319      	movs	r3, #25
 8002a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a84:	2340      	movs	r3, #64	; 0x40
 8002a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff fef0 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	2119      	movs	r1, #25
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f991 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002aac:	69fb      	ldr	r3, [r7, #28]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fece 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <SDMMC_CmdStopTransfer+0x40>)
 8002ae4:	210c      	movs	r1, #12
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f970 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002aee:	69fb      	ldr	r3, [r7, #28]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	05f5e100 	.word	0x05f5e100

08002afc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002b0c:	2307      	movs	r3, #7
 8002b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b10:	2340      	movs	r3, #64	; 0x40
 8002b12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	4619      	mov	r1, r3
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff feaa 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	2107      	movs	r1, #7
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f94b 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002b36:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b088      	sub	sp, #32
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b60:	f107 0308 	add.w	r3, r7, #8
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fe89 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fb63 	bl	8003238 <SDMMC_GetCmdError>
 8002b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b74:	69fb      	ldr	r3, [r7, #28]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b088      	sub	sp, #32
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002b86:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fe6a 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 faf6 	bl	800319c <SDMMC_GetCmdResp7>
 8002bb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002bca:	2337      	movs	r3, #55	; 0x37
 8002bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002bce:	2340      	movs	r3, #64	; 0x40
 8002bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fe4b 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	2137      	movs	r1, #55	; 0x37
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8ec 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002c16:	2329      	movs	r3, #41	; 0x29
 8002c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c1a:	2340      	movs	r3, #64	; 0x40
 8002c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fe25 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f9ff 	bl	8003038 <SDMMC_GetCmdResp3>
 8002c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8002c54:	2306      	movs	r3, #6
 8002c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c58:	2340      	movs	r3, #64	; 0x40
 8002c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fe06 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	2106      	movs	r1, #6
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f8a7 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c80:	69fb      	ldr	r3, [r7, #28]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b088      	sub	sp, #32
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002c96:	2333      	movs	r3, #51	; 0x33
 8002c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c9a:	2340      	movs	r3, #64	; 0x40
 8002c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fde5 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	2133      	movs	r1, #51	; 0x33
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f886 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002cdc:	23c0      	movs	r3, #192	; 0xc0
 8002cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fdc4 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f956 	bl	8002fa8 <SDMMC_GetCmdResp2>
 8002cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002d16:	2309      	movs	r3, #9
 8002d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002d1a:	23c0      	movs	r3, #192	; 0xc0
 8002d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d28:	f107 0308 	add.w	r3, r7, #8
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fda5 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f937 	bl	8002fa8 <SDMMC_GetCmdResp2>
 8002d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b088      	sub	sp, #32
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002d54:	2303      	movs	r3, #3
 8002d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d58:	2340      	movs	r3, #64	; 0x40
 8002d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fd86 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	2103      	movs	r1, #3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f99a 	bl	80030b0 <SDMMC_GetCmdResp6>
 8002d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002d96:	230d      	movs	r3, #13
 8002d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fd65 	bl	800287e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	210d      	movs	r1, #13
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f806 	bl	8002dcc <SDMMC_GetCmdResp1>
 8002dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <SDMMC_GetCmdResp1+0x1d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a70      	ldr	r2, [pc, #448]	; (8002fa0 <SDMMC_GetCmdResp1+0x1d4>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	0a5a      	lsrs	r2, r3, #9
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	1e5a      	subs	r2, r3, #1
 8002df2:	61fa      	str	r2, [r7, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002dfc:	e0c9      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ef      	beq.n	8002dee <SDMMC_GetCmdResp1+0x22>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ea      	bne.n	8002dee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2204      	movs	r2, #4
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	e0b1      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0a6      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	22c5      	movs	r2, #197	; 0xc5
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7ff fd40 	bl	80028d0 <SDIO_GetCommandResponse>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d001      	beq.n	8002e5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e099      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002e5e:	2100      	movs	r1, #0
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fd41 	bl	80028e8 <SDIO_GetResponse>
 8002e66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <SDMMC_GetCmdResp1+0x1d8>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e08d      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da02      	bge.n	8002e82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e80:	e087      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002e8c:	2340      	movs	r3, #64	; 0x40
 8002e8e:	e080      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	e079      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eac:	e071      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ebc:	e069      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	e061      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002edc:	e059      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eec:	e051      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002efc:	e049      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002f08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f0c:	e041      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f1c:	e039      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f2c:	e031      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002f38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f3c:	e029      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f4c:	e021      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f5c:	e019      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002f68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f6c:	e011      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f7c:	e009      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002f88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002f8c:	e001      	b.n	8002f92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	10624dd3 	.word	0x10624dd3
 8002fa4:	fdffe008 	.word	0xfdffe008

08002fa8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <SDMMC_GetCmdResp2+0x88>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <SDMMC_GetCmdResp2+0x8c>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	60fa      	str	r2, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fd4:	e026      	b.n	8003024 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0ef      	beq.n	8002fc6 <SDMMC_GetCmdResp2+0x1e>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ea      	bne.n	8002fc6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2204      	movs	r2, #4
 8003000:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003002:	2304      	movs	r3, #4
 8003004:	e00e      	b.n	8003024 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003018:	2301      	movs	r3, #1
 800301a:	e003      	b.n	8003024 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	22c5      	movs	r2, #197	; 0xc5
 8003020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <SDMMC_GetCmdResp3+0x70>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <SDMMC_GetCmdResp3+0x74>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0a5b      	lsrs	r3, r3, #9
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1e5a      	subs	r2, r3, #1
 800305a:	60fa      	str	r2, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003064:	e01b      	b.n	800309e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0ef      	beq.n	8003056 <SDMMC_GetCmdResp3+0x1e>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ea      	bne.n	8003056 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2204      	movs	r2, #4
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003092:	2304      	movs	r3, #4
 8003094:	e003      	b.n	800309e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	22c5      	movs	r2, #197	; 0xc5
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	20000000 	.word	0x20000000
 80030ac:	10624dd3 	.word	0x10624dd3

080030b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	460b      	mov	r3, r1
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030be:	4b35      	ldr	r3, [pc, #212]	; (8003194 <SDMMC_GetCmdResp6+0xe4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a35      	ldr	r2, [pc, #212]	; (8003198 <SDMMC_GetCmdResp6+0xe8>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	0a5b      	lsrs	r3, r3, #9
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	61fa      	str	r2, [r7, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80030de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030e2:	e052      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ef      	beq.n	80030d4 <SDMMC_GetCmdResp6+0x24>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ea      	bne.n	80030d4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2204      	movs	r2, #4
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003110:	2304      	movs	r3, #4
 8003112:	e03a      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003126:	2301      	movs	r3, #1
 8003128:	e02f      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff fbd0 	bl	80028d0 <SDIO_GetCommandResponse>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	4293      	cmp	r3, r2
 8003138:	d001      	beq.n	800313e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800313a:	2301      	movs	r3, #1
 800313c:	e025      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22c5      	movs	r2, #197	; 0xc5
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003144:	2100      	movs	r1, #0
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fbce 	bl	80028e8 <SDIO_GetResponse>
 800314c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003162:	2300      	movs	r3, #0
 8003164:	e011      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003174:	e009      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003184:	e001      	b.n	800318a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <SDMMC_GetCmdResp7+0x94>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a22      	ldr	r2, [pc, #136]	; (8003234 <SDMMC_GetCmdResp7+0x98>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0a5b      	lsrs	r3, r3, #9
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e5a      	subs	r2, r3, #1
 80031be:	60fa      	str	r2, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80031c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031c8:	e02c      	b.n	8003224 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <SDMMC_GetCmdResp7+0x1e>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ea      	bne.n	80031ba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80031f6:	2304      	movs	r3, #4
 80031f8:	e014      	b.n	8003224 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800320c:	2301      	movs	r3, #1
 800320e:	e009      	b.n	8003224 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003222:	2300      	movs	r3, #0
  
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000000 	.word	0x20000000
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <SDMMC_GetCmdError+0x4c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a10      	ldr	r2, [pc, #64]	; (8003288 <SDMMC_GetCmdError+0x50>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	0a5b      	lsrs	r3, r3, #9
 800324c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003250:	fb02 f303 	mul.w	r3, r2, r3
 8003254:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1e5a      	subs	r2, r3, #1
 800325a:	60fa      	str	r2, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003264:	e009      	b.n	800327a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f1      	beq.n	8003256 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	22c5      	movs	r2, #197	; 0xc5
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	20000000 	.word	0x20000000
 8003288:	10624dd3 	.word	0x10624dd3

0800328c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003290:	4904      	ldr	r1, [pc, #16]	; (80032a4 <MX_FATFS_Init+0x18>)
 8003292:	4805      	ldr	r0, [pc, #20]	; (80032a8 <MX_FATFS_Init+0x1c>)
 8003294:	f002 fe4c 	bl	8005f30 <FATFS_LinkDriver>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <MX_FATFS_Init+0x20>)
 800329e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200000b4 	.word	0x200000b4
 80032a8:	080062c4 	.word	0x080062c4
 80032ac:	200000b0 	.word	0x200000b0

080032b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80032b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
	...

080032c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80032ca:	f000 f879 	bl	80033c0 <BSP_SD_IsDetected>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e012      	b.n	80032fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <BSP_SD_Init+0x48>)
 80032da:	f7fe f8e5 	bl	80014a8 <HAL_SD_Init>
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80032e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032ec:	4806      	ldr	r0, [pc, #24]	; (8003308 <BSP_SD_Init+0x48>)
 80032ee:	f7fe febf 	bl	8002070 <HAL_SD_ConfigWideBusOperation>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80032fc:	79fb      	ldrb	r3, [r7, #7]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000028 	.word	0x20000028

0800330c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	4806      	ldr	r0, [pc, #24]	; (8003344 <BSP_SD_ReadBlocks+0x38>)
 800332a:	f7fe f96d 	bl	8001608 <HAL_SD_ReadBlocks>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000028 	.word	0x20000028

08003348 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	4806      	ldr	r0, [pc, #24]	; (8003380 <BSP_SD_WriteBlocks+0x38>)
 8003366:	f7fe fb2d 	bl	80019c4 <HAL_SD_WriteBlocks>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003374:	7dfb      	ldrb	r3, [r7, #23]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000028 	.word	0x20000028

08003384 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003388:	4805      	ldr	r0, [pc, #20]	; (80033a0 <BSP_SD_GetCardState+0x1c>)
 800338a:	f7fe ff0b 	bl	80021a4 <HAL_SD_GetCardState>
 800338e:	4603      	mov	r3, r0
 8003390:	2b04      	cmp	r3, #4
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
}
 800339a:	4618      	mov	r0, r3
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000028 	.word	0x20000028

080033a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4803      	ldr	r0, [pc, #12]	; (80033bc <BSP_SD_GetCardInfo+0x18>)
 80033b0:	f7fe fe32 	bl	8002018 <HAL_SD_GetCardInfo>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000028 	.word	0x20000028

080033c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80033c6:	2301      	movs	r3, #1
 80033c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80033ca:	f000 f80b 	bl	80033e4 <BSP_PlatformIsDetected>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80033d4:	2300      	movs	r3, #0
 80033d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	b2db      	uxtb	r3, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80033ea:	2301      	movs	r3, #1
 80033ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	4806      	ldr	r0, [pc, #24]	; (800340c <BSP_PlatformIsDetected+0x28>)
 80033f2:	f7fd fc49 	bl	8000c88 <HAL_GPIO_ReadPin>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8003400:	79fb      	ldrb	r3, [r7, #7]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40011000 	.word	0x40011000

08003410 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	4a08      	ldr	r2, [pc, #32]	; (8003440 <disk_status+0x30>)
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	4905      	ldr	r1, [pc, #20]	; (8003440 <disk_status+0x30>)
 800342a:	440a      	add	r2, r1
 800342c:	7a12      	ldrb	r2, [r2, #8]
 800342e:	4610      	mov	r0, r2
 8003430:	4798      	blx	r3
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200000d8 	.word	0x200000d8

08003444 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <disk_initialize+0x48>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <disk_initialize+0x48>)
 8003460:	2101      	movs	r1, #1
 8003462:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <disk_initialize+0x48>)
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	79fa      	ldrb	r2, [r7, #7]
 8003472:	4906      	ldr	r1, [pc, #24]	; (800348c <disk_initialize+0x48>)
 8003474:	440a      	add	r2, r1
 8003476:	7a12      	ldrb	r2, [r2, #8]
 8003478:	4610      	mov	r0, r2
 800347a:	4798      	blx	r3
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200000d8 	.word	0x200000d8

08003490 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <disk_read+0x3c>)
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	689c      	ldr	r4, [r3, #8]
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <disk_read+0x3c>)
 80034b0:	4413      	add	r3, r2
 80034b2:	7a18      	ldrb	r0, [r3, #8]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	47a0      	blx	r4
 80034bc:	4603      	mov	r3, r0
 80034be:	75fb      	strb	r3, [r7, #23]
  return res;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200000d8 	.word	0x200000d8

080034d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4603      	mov	r3, r0
 80034de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <disk_write+0x3c>)
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68dc      	ldr	r4, [r3, #12]
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <disk_write+0x3c>)
 80034f0:	4413      	add	r3, r2
 80034f2:	7a18      	ldrb	r0, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	47a0      	blx	r4
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003500:	7dfb      	ldrb	r3, [r7, #23]
}
 8003502:	4618      	mov	r0, r3
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}
 800350a:	bf00      	nop
 800350c:	200000d8 	.word	0x200000d8

08003510 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	603a      	str	r2, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
 800351c:	460b      	mov	r3, r1
 800351e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <disk_ioctl+0x38>)
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	79fa      	ldrb	r2, [r7, #7]
 800352e:	4906      	ldr	r1, [pc, #24]	; (8003548 <disk_ioctl+0x38>)
 8003530:	440a      	add	r2, r1
 8003532:	7a10      	ldrb	r0, [r2, #8]
 8003534:	79b9      	ldrb	r1, [r7, #6]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4798      	blx	r3
 800353a:	4603      	mov	r3, r0
 800353c:	73fb      	strb	r3, [r7, #15]
  return res;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200000d8 	.word	0x200000d8

0800354c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003560:	e007      	b.n	8003572 <mem_cpy+0x26>
		*d++ = *s++;
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	1c53      	adds	r3, r2, #1
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1c59      	adds	r1, r3, #1
 800356c:	6179      	str	r1, [r7, #20]
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f2      	bne.n	8003562 <mem_cpy+0x16>
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003598:	e005      	b.n	80035a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	617a      	str	r2, [r7, #20]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f4      	bne.n	800359a <mem_set+0x12>
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80035d4:	bf00      	nop
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1e5a      	subs	r2, r3, #1
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <mem_cmp+0x40>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	61ba      	str	r2, [r7, #24]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	1acb      	subs	r3, r1, r3
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ec      	beq.n	80035d6 <mem_cmp+0x1a>
	return r;
 80035fc:	697b      	ldr	r3, [r7, #20]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003612:	e002      	b.n	800361a <chk_chr+0x12>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <chk_chr+0x26>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4293      	cmp	r3, r2
 800362c:	d1f2      	bne.n	8003614 <chk_chr+0xc>
	return *str;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e038      	b.n	80036c2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003650:	492f      	ldr	r1, [pc, #188]	; (8003710 <chk_lock+0xd4>)
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d029      	beq.n	80036b8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003664:	492a      	ldr	r1, [pc, #168]	; (8003710 <chk_lock+0xd4>)
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800367a:	429a      	cmp	r2, r3
 800367c:	d11e      	bne.n	80036bc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800367e:	4924      	ldr	r1, [pc, #144]	; (8003710 <chk_lock+0xd4>)
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3304      	adds	r3, #4
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003696:	429a      	cmp	r2, r3
 8003698:	d110      	bne.n	80036bc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800369a:	491d      	ldr	r1, [pc, #116]	; (8003710 <chk_lock+0xd4>)
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3308      	adds	r3, #8
 80036aa:	881a      	ldrh	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d102      	bne.n	80036bc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80036b6:	e007      	b.n	80036c8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80036b8:	2301      	movs	r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3301      	adds	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d9c3      	bls.n	8003650 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d109      	bne.n	80036e2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <chk_lock+0x9e>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d101      	bne.n	80036de <chk_lock+0xa2>
 80036da:	2300      	movs	r3, #0
 80036dc:	e013      	b.n	8003706 <chk_lock+0xca>
 80036de:	2312      	movs	r3, #18
 80036e0:	e011      	b.n	8003706 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <chk_lock+0xc4>
 80036e8:	4909      	ldr	r1, [pc, #36]	; (8003710 <chk_lock+0xd4>)
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	330a      	adds	r3, #10
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d101      	bne.n	8003704 <chk_lock+0xc8>
 8003700:	2310      	movs	r3, #16
 8003702:	e000      	b.n	8003706 <chk_lock+0xca>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	200000c0 	.word	0x200000c0

08003714 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	e002      	b.n	8003726 <enq_lock+0x12>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d809      	bhi.n	8003740 <enq_lock+0x2c>
 800372c:	490a      	ldr	r1, [pc, #40]	; (8003758 <enq_lock+0x44>)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ef      	bne.n	8003720 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	200000c0 	.word	0x200000c0

0800375c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e02b      	b.n	80037c4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800376c:	4955      	ldr	r1, [pc, #340]	; (80038c4 <inc_lock+0x168>)
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003782:	429a      	cmp	r2, r3
 8003784:	d11b      	bne.n	80037be <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8003786:	494f      	ldr	r1, [pc, #316]	; (80038c4 <inc_lock+0x168>)
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3304      	adds	r3, #4
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10d      	bne.n	80037be <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80037a2:	4948      	ldr	r1, [pc, #288]	; (80038c4 <inc_lock+0x168>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3308      	adds	r3, #8
 80037b2:	881a      	ldrh	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d006      	beq.n	80037cc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d9d0      	bls.n	800376c <inc_lock+0x10>
 80037ca:	e000      	b.n	80037ce <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80037cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d145      	bne.n	8003860 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e002      	b.n	80037e0 <inc_lock+0x84>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3301      	adds	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d809      	bhi.n	80037fa <inc_lock+0x9e>
 80037e6:	4937      	ldr	r1, [pc, #220]	; (80038c4 <inc_lock+0x168>)
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ef      	bne.n	80037da <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d101      	bne.n	8003804 <inc_lock+0xa8>
 8003800:	2300      	movs	r3, #0
 8003802:	e05a      	b.n	80038ba <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800380a:	482e      	ldr	r0, [pc, #184]	; (80038c4 <inc_lock+0x168>)
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003820:	4828      	ldr	r0, [pc, #160]	; (80038c4 <inc_lock+0x168>)
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4403      	add	r3, r0
 800382e:	3304      	adds	r3, #4
 8003830:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8003838:	4922      	ldr	r1, [pc, #136]	; (80038c4 <inc_lock+0x168>)
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	3308      	adds	r3, #8
 8003848:	4602      	mov	r2, r0
 800384a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800384c:	491d      	ldr	r1, [pc, #116]	; (80038c4 <inc_lock+0x168>)
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	330a      	adds	r3, #10
 800385c:	2200      	movs	r2, #0
 800385e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <inc_lock+0x124>
 8003866:	4917      	ldr	r1, [pc, #92]	; (80038c4 <inc_lock+0x168>)
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	330a      	adds	r3, #10
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <inc_lock+0x124>
 800387c:	2300      	movs	r3, #0
 800387e:	e01c      	b.n	80038ba <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <inc_lock+0x142>
 8003886:	490f      	ldr	r1, [pc, #60]	; (80038c4 <inc_lock+0x168>)
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	330a      	adds	r3, #10
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	b299      	uxth	r1, r3
 800389c:	e001      	b.n	80038a2 <inc_lock+0x146>
 800389e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038a2:	4808      	ldr	r0, [pc, #32]	; (80038c4 <inc_lock+0x168>)
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4403      	add	r3, r0
 80038b0:	330a      	adds	r3, #10
 80038b2:	460a      	mov	r2, r1
 80038b4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3301      	adds	r3, #1
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	200000c0 	.word	0x200000c0

080038c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d82e      	bhi.n	800393a <dec_lock+0x72>
		n = Files[i].ctr;
 80038dc:	491b      	ldr	r1, [pc, #108]	; (800394c <dec_lock+0x84>)
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	330a      	adds	r3, #10
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d101      	bne.n	80038fc <dec_lock+0x34>
 80038f8:	2300      	movs	r3, #0
 80038fa:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <dec_lock+0x40>
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	3b01      	subs	r3, #1
 8003906:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003908:	4910      	ldr	r1, [pc, #64]	; (800394c <dec_lock+0x84>)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	330a      	adds	r3, #10
 8003918:	89fa      	ldrh	r2, [r7, #14]
 800391a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <dec_lock+0x6c>
 8003922:	490a      	ldr	r1, [pc, #40]	; (800394c <dec_lock+0x84>)
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	737b      	strb	r3, [r7, #13]
 8003938:	e001      	b.n	800393e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800393a:	2302      	movs	r3, #2
 800393c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800393e:	7b7b      	ldrb	r3, [r7, #13]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	200000c0 	.word	0x200000c0

08003950 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e016      	b.n	800398c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800395e:	4910      	ldr	r1, [pc, #64]	; (80039a0 <clear_lock+0x50>)
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	d108      	bne.n	8003986 <clear_lock+0x36>
 8003974:	490a      	ldr	r1, [pc, #40]	; (80039a0 <clear_lock+0x50>)
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d9e5      	bls.n	800395e <clear_lock+0xe>
	}
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	200000c0 	.word	0x200000c0

080039a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d038      	beq.n	8003a2c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80039c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	2301      	movs	r3, #1
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	f7ff fd7f 	bl	80034d0 <disk_write>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <sync_window+0x3a>
			res = FR_DISK_ERR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e026      	b.n	8003a2c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d218      	bcs.n	8003a2c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e010      	b.n	8003a26 <sync_window+0x82>
					wsect += fs->fsize;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	f7ff fd58 	bl	80034d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d8eb      	bhi.n	8003a04 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d01b      	beq.n	8003a88 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ffa7 	bl	80039a4 <sync_window>
 8003a56:	4603      	mov	r3, r0
 8003a58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d113      	bne.n	8003a88 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	f7ff fd10 	bl	8003490 <disk_read>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff82 	bl	80039a4 <sync_window>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 809b 	bne.w	8003be2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	f040 8088 	bne.w	8003bc8 <sync_fs+0x136>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	f040 8082 	bne.w	8003bc8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fd5b 	bl	8003588 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2255      	movs	r2, #85	; 0x55
 8003ad6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	22aa      	movs	r2, #170	; 0xaa
 8003ade:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2252      	movs	r2, #82	; 0x52
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2252      	movs	r2, #82	; 0x52
 8003aec:	705a      	strb	r2, [r3, #1]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2261      	movs	r2, #97	; 0x61
 8003af2:	709a      	strb	r2, [r3, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2241      	movs	r2, #65	; 0x41
 8003af8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2272      	movs	r2, #114	; 0x72
 8003afe:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2272      	movs	r2, #114	; 0x72
 8003b06:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2241      	movs	r2, #65	; 0x41
 8003b0e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2261      	movs	r2, #97	; 0x61
 8003b16:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003b42:	0c1b      	lsrs	r3, r3, #16
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003b52:	0e1b      	lsrs	r3, r3, #24
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003b94:	0e1b      	lsrs	r3, r3, #24
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f7ff fc88 	bl	80034d0 <disk_write>
			fs->fsi_flag = 0;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fc9c 	bl	8003510 <disk_ioctl>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	3b02      	subs	r3, #2
 8003bfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003c02:	3b02      	subs	r3, #2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d301      	bcc.n	8003c0e <clust2sect+0x22>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e00a      	b.n	8003c24 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003c14:	461a      	mov	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	fb03 f202 	mul.w	r2, r3, r2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003c22:	4413      	add	r3, r2
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d905      	bls.n	8003c4a <get_fat+0x1c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <get_fat+0x22>
		val = 1;	/* Internal error */
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e0a3      	b.n	8003d98 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d068      	beq.n	8003d32 <get_fat+0x104>
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	f300 808f 	bgt.w	8003d84 <get_fat+0x156>
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d002      	beq.n	8003c70 <get_fat+0x42>
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d040      	beq.n	8003cf0 <get_fat+0xc2>
 8003c6e:	e089      	b.n	8003d84 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	0a5b      	lsrs	r3, r3, #9
 8003c88:	4413      	add	r3, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fed2 	bl	8003a36 <move_window>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d178      	bne.n	8003d8a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	60fa      	str	r2, [r7, #12]
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	5cd3      	ldrb	r3, [r2, r3]
 8003ca6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	0a5b      	lsrs	r3, r3, #9
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff febd 	bl	8003a36 <move_window>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d165      	bne.n	8003d8e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	5cd3      	ldrb	r3, [r2, r3]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <get_fat+0xb8>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	e002      	b.n	8003cec <get_fat+0xbe>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	617b      	str	r3, [r7, #20]
			break;
 8003cee:	e053      	b.n	8003d98 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe99 	bl	8003a36 <move_window>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d143      	bne.n	8003d92 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	b21a      	sxth	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	617b      	str	r3, [r7, #20]
			break;
 8003d30:	e032      	b.n	8003d98 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	09db      	lsrs	r3, r3, #7
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff fe78 	bl	8003a36 <move_window>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d124      	bne.n	8003d96 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3303      	adds	r3, #3
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	061a      	lsls	r2, r3, #24
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	3302      	adds	r3, #2
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	3201      	adds	r2, #1
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	0212      	lsls	r2, r2, #8
 8003d74:	4313      	orrs	r3, r2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d80:	617b      	str	r3, [r7, #20]
			break;
 8003d82:	e009      	b.n	8003d98 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8003d84:	2301      	movs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e006      	b.n	8003d98 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d8a:	bf00      	nop
 8003d8c:	e004      	b.n	8003d98 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d96:	bf00      	nop
		}
	}

	return val;
 8003d98:	697b      	ldr	r3, [r7, #20]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b088      	sub	sp, #32
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d905      	bls.n	8003dc0 <put_fat+0x1e>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <put_fat+0x24>
		res = FR_INT_ERR;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e0f6      	b.n	8003fb4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	f000 809e 	beq.w	8003f0e <put_fat+0x16c>
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	f300 80e4 	bgt.w	8003fa0 <put_fat+0x1fe>
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d002      	beq.n	8003de2 <put_fat+0x40>
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d06f      	beq.n	8003ec0 <put_fat+0x11e>
 8003de0:	e0de      	b.n	8003fa0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	0a5b      	lsrs	r3, r3, #9
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff fe19 	bl	8003a36 <move_window>
 8003e04:	4603      	mov	r3, r0
 8003e06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e08:	7ffb      	ldrb	r3, [r7, #31]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 80cb 	bne.w	8003fa6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	617a      	str	r2, [r7, #20]
 8003e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <put_fat+0xa4>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	b25a      	sxtb	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	e001      	b.n	8003e4a <put_fat+0xa8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	0a5b      	lsrs	r3, r3, #9
 8003e60:	4413      	add	r3, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff fde6 	bl	8003a36 <move_window>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 809a 	bne.w	8003faa <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <put_fat+0xf2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e00e      	b.n	8003eb2 <put_fat+0x110>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b25b      	sxtb	r3, r3
 8003e9a:	f023 030f 	bic.w	r3, r3, #15
 8003e9e:	b25a      	sxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	b25b      	sxtb	r3, r3
 8003eac:	4313      	orrs	r3, r2
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003ebe:	e079      	b.n	8003fb4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	4413      	add	r3, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff fdb1 	bl	8003a36 <move_window>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ed8:	7ffb      	ldrb	r3, [r7, #31]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d167      	bne.n	8003fae <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	3301      	adds	r3, #1
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003f0c:	e052      	b.n	8003fb4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	09db      	lsrs	r3, r3, #7
 8003f18:	4413      	add	r3, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fd8a 	bl	8003a36 <move_window>
 8003f22:	4603      	mov	r3, r0
 8003f24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d142      	bne.n	8003fb2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	3303      	adds	r3, #3
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	061a      	lsls	r2, r3, #24
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3302      	adds	r3, #2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	3201      	adds	r2, #1
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	0212      	lsls	r2, r2, #8
 8003f54:	4313      	orrs	r3, r2
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0c1a      	lsrs	r2, r3, #16
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	3302      	adds	r3, #2
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0e1a      	lsrs	r2, r3, #24
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3303      	adds	r3, #3
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8003f9e:	e009      	b.n	8003fb4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e006      	b.n	8003fb4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <put_fat+0x212>
			if (res != FR_OK) break;
 8003fb2:	bf00      	nop
		}
	}

	return res;
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d905      	bls.n	8003fda <remove_chain+0x1c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <remove_chain+0x22>
		res = FR_INT_ERR;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	73fb      	strb	r3, [r7, #15]
 8003fde:	e043      	b.n	8004068 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003fe4:	e036      	b.n	8004054 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003fe6:	6839      	ldr	r1, [r7, #0]
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fe20 	bl	8003c2e <get_fat>
 8003fee:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d035      	beq.n	8004062 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d102      	bne.n	8004002 <remove_chain+0x44>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	e032      	b.n	8004068 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d102      	bne.n	8004010 <remove_chain+0x52>
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
 800400e:	e02b      	b.n	8004068 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004010:	2200      	movs	r2, #0
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fec4 	bl	8003da2 <put_fat>
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d120      	bne.n	8004066 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d00f      	beq.n	8004050 <remove_chain+0x92>
				fs->free_clust++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	b2da      	uxtb	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d3c2      	bcc.n	8003fe6 <remove_chain+0x28>
 8004060:	e002      	b.n	8004068 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004066:	bf00      	nop
		}
	}

	return res;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004088:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <create_chain+0x2a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d31c      	bcc.n	80040d6 <create_chain+0x64>
 800409c:	2301      	movs	r3, #1
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	e019      	b.n	80040d6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fdc2 	bl	8003c2e <get_fat>
 80040aa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d801      	bhi.n	80040b6 <create_chain+0x44>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e076      	b.n	80041a4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d101      	bne.n	80040c2 <create_chain+0x50>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	e070      	b.n	80041a4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d201      	bcs.n	80040d2 <create_chain+0x60>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	e068      	b.n	80041a4 <create_chain+0x132>
		scl = clst;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d307      	bcc.n	80040fc <create_chain+0x8a>
			ncl = 2;
 80040ec:	2302      	movs	r3, #2
 80040ee:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d901      	bls.n	80040fc <create_chain+0x8a>
 80040f8:	2300      	movs	r3, #0
 80040fa:	e053      	b.n	80041a4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fd95 	bl	8003c2e <get_fat>
 8004104:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d002      	beq.n	800411a <create_chain+0xa8>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <create_chain+0xac>
			return cs;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	e042      	b.n	80041a4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d1d9      	bne.n	80040da <create_chain+0x68>
 8004126:	2300      	movs	r3, #0
 8004128:	e03c      	b.n	80041a4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800412a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800412c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fe35 	bl	8003da2 <put_fat>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <create_chain+0xe4>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	6839      	ldr	r1, [r7, #0]
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fe28 	bl	8003da2 <put_fat>
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d11a      	bne.n	8004192 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d018      	beq.n	80041a2 <create_chain+0x130>
			fs->free_clust--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004176:	1e5a      	subs	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004190:	e007      	b.n	80041a2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <create_chain+0x12c>
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
 800419c:	e000      	b.n	80041a0 <create_chain+0x12e>
 800419e:	2301      	movs	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80041a2:	697b      	ldr	r3, [r7, #20]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80041bc:	3304      	adds	r3, #4
 80041be:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	0a5b      	lsrs	r3, r3, #9
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80041ca:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80041ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	613a      	str	r2, [r7, #16]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <clmt_clust+0x3c>
 80041e4:	2300      	movs	r3, #0
 80041e6:	e010      	b.n	800420a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d307      	bcc.n	8004200 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3304      	adds	r3, #4
 80041fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041fe:	e7e9      	b.n	80041d4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8004200:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4413      	add	r3, r2
}
 800420a:	4618      	mov	r0, r3
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800422e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d007      	beq.n	8004246 <dir_sdi+0x32>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800423c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	429a      	cmp	r2, r3
 8004244:	d301      	bcc.n	800424a <dir_sdi+0x36>
		return FR_INT_ERR;
 8004246:	2302      	movs	r3, #2
 8004248:	e074      	b.n	8004334 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10c      	bne.n	800426a <dir_sdi+0x56>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004256:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800425a:	2b03      	cmp	r3, #3
 800425c:	d105      	bne.n	800426a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004264:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004268:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d111      	bne.n	8004294 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004276:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800427a:	461a      	mov	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4293      	cmp	r3, r2
 8004280:	d301      	bcc.n	8004286 <dir_sdi+0x72>
			return FR_INT_ERR;
 8004282:	2302      	movs	r3, #2
 8004284:	e056      	b.n	8004334 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800428c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e032      	b.n	80042fa <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800429a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80042a2:	e01e      	b.n	80042e2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fcbe 	bl	8003c2e <get_fat>
 80042b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d101      	bne.n	80042c0 <dir_sdi+0xac>
 80042bc:	2301      	movs	r3, #1
 80042be:	e039      	b.n	8004334 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d907      	bls.n	80042d6 <dir_sdi+0xc2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d301      	bcc.n	80042da <dir_sdi+0xc6>
				return FR_INT_ERR;
 80042d6:	2302      	movs	r3, #2
 80042d8:	e02c      	b.n	8004334 <dir_sdi+0x120>
			idx -= ic;
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d2dc      	bcs.n	80042a4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042f0:	6979      	ldr	r1, [r7, #20]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fc7a 	bl	8003bec <clust2sect>
 80042f8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <dir_sdi+0xf8>
 8004308:	2302      	movs	r3, #2
 800430a:	e013      	b.n	8004334 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	091a      	lsrs	r2, r3, #4
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	441a      	add	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004320:	461a      	mov	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	015b      	lsls	r3, r3, #5
 800432a:	441a      	add	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800434c:	3301      	adds	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <dir_next+0x26>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <dir_next+0x2a>
		return FR_NO_FILE;
 8004362:	2304      	movs	r3, #4
 8004364:	e0dd      	b.n	8004522 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 80c6 	bne.w	80044fe <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004390:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004394:	461a      	mov	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4293      	cmp	r3, r2
 800439a:	f0c0 80b0 	bcc.w	80044fe <dir_next+0x1c2>
				return FR_NO_FILE;
 800439e:	2304      	movs	r3, #4
 80043a0:	e0bf      	b.n	8004522 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80043ac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80043b0:	3a01      	subs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 80a2 	bne.w	80044fe <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f7ff fc30 	bl	8003c2e <get_fat>
 80043ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d801      	bhi.n	80043da <dir_next+0x9e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0a3      	b.n	8004522 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d101      	bne.n	80043e6 <dir_next+0xaa>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e09d      	b.n	8004522 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d374      	bcc.n	80044e0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <dir_next+0xc4>
 80043fc:	2304      	movs	r3, #4
 80043fe:	e090      	b.n	8004522 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f7ff fe2f 	bl	8004072 <create_chain>
 8004414:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <dir_next+0xe4>
 800441c:	2307      	movs	r3, #7
 800441e:	e080      	b.n	8004522 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <dir_next+0xee>
 8004426:	2302      	movs	r3, #2
 8004428:	e07b      	b.n	8004522 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d101      	bne.n	8004436 <dir_next+0xfa>
 8004432:	2301      	movs	r3, #1
 8004434:	e075      	b.n	8004522 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fab1 	bl	80039a4 <sync_window>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <dir_next+0x110>
 8004448:	2301      	movs	r3, #1
 800444a:	e06a      	b.n	8004522 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f895 	bl	8003588 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	4610      	mov	r0, r2
 800446e:	f7ff fbbd 	bl	8003bec <clust2sect>
 8004472:	4603      	mov	r3, r0
 8004474:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e01b      	b.n	80044b6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fa87 	bl	80039a4 <sync_window>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <dir_next+0x164>
 800449c:	2301      	movs	r3, #1
 800449e:	e040      	b.n	8004522 <dir_next+0x1e6>
						dp->fs->winsect++;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044a6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80044aa:	3201      	adds	r2, #1
 80044ac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3301      	adds	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044bc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80044c0:	461a      	mov	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d3da      	bcc.n	800447e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ce:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	1a8a      	subs	r2, r1, r2
 80044dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fb7b 	bl	8003bec <clust2sect>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800450e:	461a      	mov	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	015b      	lsls	r3, r3, #5
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd90      	pop	{r4, r7, pc}

0800452a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004534:	2100      	movs	r1, #0
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff fe6c 	bl	8004214 <dir_sdi>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d131      	bne.n	80045aa <dir_alloc+0x80>
		n = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7ff fa6c 	bl	8003a36 <move_window>
 800455e:	4603      	mov	r3, r0
 8004560:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11f      	bne.n	80045a8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2be5      	cmp	r3, #229	; 0xe5
 8004572:	d005      	beq.n	8004580 <dir_alloc+0x56>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	3301      	adds	r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d102      	bne.n	8004594 <dir_alloc+0x6a>
 800458e:	e00c      	b.n	80045aa <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004594:	2101      	movs	r1, #1
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff fed0 	bl	800433c <dir_next>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0d1      	beq.n	800454a <dir_alloc+0x20>
 80045a6:	e000      	b.n	80045aa <dir_alloc+0x80>
			if (res != FR_OK) break;
 80045a8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d101      	bne.n	80045b4 <dir_alloc+0x8a>
 80045b0:	2307      	movs	r3, #7
 80045b2:	73fb      	strb	r3, [r7, #15]
	return res;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	331b      	adds	r3, #27
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	b21a      	sxth	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	331a      	adds	r3, #26
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b21b      	sxth	r3, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	b21b      	sxth	r3, r3
 80045de:	b29b      	uxth	r3, r3
 80045e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10f      	bne.n	800460c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	3315      	adds	r3, #21
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	b21a      	sxth	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b21b      	sxth	r3, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	b21b      	sxth	r3, r3
 8004602:	b29b      	uxth	r3, r3
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

	return cl;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	331a      	adds	r3, #26
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	0a1b      	lsrs	r3, r3, #8
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	331b      	adds	r3, #27
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	0c1a      	lsrs	r2, r3, #16
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3314      	adds	r3, #20
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b29b      	uxth	r3, r3
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3315      	adds	r3, #21
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800466c:	2100      	movs	r1, #0
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fdd0 	bl	8004214 <dir_sdi>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <dir_find+0x1e>
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	e03b      	b.n	80046fa <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7ff f9d0 	bl	8003a36 <move_window>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d128      	bne.n	80046f2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046a6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d102      	bne.n	80046ba <dir_find+0x56>
 80046b4:	2304      	movs	r3, #4
 80046b6:	75fb      	strb	r3, [r7, #23]
 80046b8:	e01e      	b.n	80046f8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	330b      	adds	r3, #11
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10a      	bne.n	80046de <dir_find+0x7a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046ce:	220b      	movs	r2, #11
 80046d0:	4619      	mov	r1, r3
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f7fe ff72 	bl	80035bc <mem_cmp>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80046de:	2100      	movs	r1, #0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff fe2b 	bl	800433c <dir_next>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0c8      	beq.n	8004682 <dir_find+0x1e>
 80046f0:	e002      	b.n	80046f8 <dir_find+0x94>
		if (res != FR_OK) break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <dir_find+0x94>
			break;
 80046f6:	bf00      	nop

	return res;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800470a:	2101      	movs	r1, #1
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff0c 	bl	800452a <dir_alloc>
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d126      	bne.n	800476a <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7ff f983 	bl	8003a36 <move_window>
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d117      	bne.n	800476a <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004740:	2220      	movs	r2, #32
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe ff1f 	bl	8003588 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004756:	220b      	movs	r2, #11
 8004758:	4619      	mov	r1, r3
 800475a:	f7fe fef7 	bl	800354c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e002      	b.n	800478c <create_name+0x18>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b2f      	cmp	r3, #47	; 0x2f
 8004792:	d0f8      	beq.n	8004786 <create_name+0x12>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b5c      	cmp	r3, #92	; 0x5c
 800479a:	d0f4      	beq.n	8004786 <create_name+0x12>
	sfn = dp->fn;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80047a2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80047a4:	220b      	movs	r2, #11
 80047a6:	2120      	movs	r1, #32
 80047a8:	68b8      	ldr	r0, [r7, #8]
 80047aa:	f7fe feed 	bl	8003588 <mem_set>
	si = i = b = 0; ni = 8;
 80047ae:	2300      	movs	r3, #0
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	2308      	movs	r3, #8
 80047bc:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	617a      	str	r2, [r7, #20]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80047cc:	7fbb      	ldrb	r3, [r7, #30]
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d953      	bls.n	800487a <create_name+0x106>
 80047d2:	7fbb      	ldrb	r3, [r7, #30]
 80047d4:	2b2f      	cmp	r3, #47	; 0x2f
 80047d6:	d050      	beq.n	800487a <create_name+0x106>
 80047d8:	7fbb      	ldrb	r3, [r7, #30]
 80047da:	2b5c      	cmp	r3, #92	; 0x5c
 80047dc:	d04d      	beq.n	800487a <create_name+0x106>
		if (c == '.' || i >= ni) {
 80047de:	7fbb      	ldrb	r3, [r7, #30]
 80047e0:	2b2e      	cmp	r3, #46	; 0x2e
 80047e2:	d003      	beq.n	80047ec <create_name+0x78>
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d30f      	bcc.n	800480c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d102      	bne.n	80047f8 <create_name+0x84>
 80047f2:	7fbb      	ldrb	r3, [r7, #30]
 80047f4:	2b2e      	cmp	r3, #46	; 0x2e
 80047f6:	d001      	beq.n	80047fc <create_name+0x88>
 80047f8:	2306      	movs	r3, #6
 80047fa:	e073      	b.n	80048e4 <create_name+0x170>
			i = 8; ni = 11;
 80047fc:	2308      	movs	r3, #8
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	230b      	movs	r3, #11
 8004802:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004804:	7ffb      	ldrb	r3, [r7, #31]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e035      	b.n	8004878 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800480c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004810:	2b00      	cmp	r3, #0
 8004812:	da08      	bge.n	8004826 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8004814:	7ffb      	ldrb	r3, [r7, #31]
 8004816:	f043 0303 	orr.w	r3, r3, #3
 800481a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800481c:	7fbb      	ldrb	r3, [r7, #30]
 800481e:	3b80      	subs	r3, #128	; 0x80
 8004820:	4a32      	ldr	r2, [pc, #200]	; (80048ec <create_name+0x178>)
 8004822:	5cd3      	ldrb	r3, [r2, r3]
 8004824:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004826:	7fbb      	ldrb	r3, [r7, #30]
 8004828:	4619      	mov	r1, r3
 800482a:	4831      	ldr	r0, [pc, #196]	; (80048f0 <create_name+0x17c>)
 800482c:	f7fe feec 	bl	8003608 <chk_chr>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <create_name+0xc6>
				return FR_INVALID_NAME;
 8004836:	2306      	movs	r3, #6
 8004838:	e054      	b.n	80048e4 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800483a:	7fbb      	ldrb	r3, [r7, #30]
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d907      	bls.n	8004850 <create_name+0xdc>
 8004840:	7fbb      	ldrb	r3, [r7, #30]
 8004842:	2b5a      	cmp	r3, #90	; 0x5a
 8004844:	d804      	bhi.n	8004850 <create_name+0xdc>
				b |= 2;
 8004846:	7ffb      	ldrb	r3, [r7, #31]
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e00c      	b.n	800486a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004850:	7fbb      	ldrb	r3, [r7, #30]
 8004852:	2b60      	cmp	r3, #96	; 0x60
 8004854:	d909      	bls.n	800486a <create_name+0xf6>
 8004856:	7fbb      	ldrb	r3, [r7, #30]
 8004858:	2b7a      	cmp	r3, #122	; 0x7a
 800485a:	d806      	bhi.n	800486a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800485c:	7ffb      	ldrb	r3, [r7, #31]
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	7fbb      	ldrb	r3, [r7, #30]
 8004866:	3b20      	subs	r3, #32
 8004868:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	613a      	str	r2, [r7, #16]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4413      	add	r3, r2
 8004874:	7fba      	ldrb	r2, [r7, #30]
 8004876:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004878:	e7a1      	b.n	80047be <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	441a      	add	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004884:	7fbb      	ldrb	r3, [r7, #30]
 8004886:	2b20      	cmp	r3, #32
 8004888:	d801      	bhi.n	800488e <create_name+0x11a>
 800488a:	2304      	movs	r3, #4
 800488c:	e000      	b.n	8004890 <create_name+0x11c>
 800488e:	2300      	movs	r3, #0
 8004890:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <create_name+0x128>
 8004898:	2306      	movs	r3, #6
 800489a:	e023      	b.n	80048e4 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2be5      	cmp	r3, #229	; 0xe5
 80048a2:	d102      	bne.n	80048aa <create_name+0x136>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2205      	movs	r2, #5
 80048a8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d102      	bne.n	80048b6 <create_name+0x142>
 80048b0:	7ffb      	ldrb	r3, [r7, #31]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80048b6:	7ffb      	ldrb	r3, [r7, #31]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d103      	bne.n	80048c8 <create_name+0x154>
 80048c0:	7fbb      	ldrb	r3, [r7, #30]
 80048c2:	f043 0310 	orr.w	r3, r3, #16
 80048c6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80048c8:	7ffb      	ldrb	r3, [r7, #31]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d103      	bne.n	80048da <create_name+0x166>
 80048d2:	7fbb      	ldrb	r3, [r7, #30]
 80048d4:	f043 0308 	orr.w	r3, r3, #8
 80048d8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	330b      	adds	r3, #11
 80048de:	7fba      	ldrb	r2, [r7, #30]
 80048e0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80048e2:	2300      	movs	r3, #0
#endif
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	08006244 	.word	0x08006244
 80048f0:	080061dc 	.word	0x080061dc

080048f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b2f      	cmp	r3, #47	; 0x2f
 8004904:	d003      	beq.n	800490e <follow_path+0x1a>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b5c      	cmp	r3, #92	; 0x5c
 800490c:	d102      	bne.n	8004914 <follow_path+0x20>
		path++;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b1f      	cmp	r3, #31
 8004922:	d80a      	bhi.n	800493a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8004924:	2100      	movs	r1, #0
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fc74 	bl	8004214 <dir_sdi>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004938:	e045      	b.n	80049c6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800493a:	463b      	mov	r3, r7
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff18 	bl	8004774 <create_name>
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d136      	bne.n	80049bc <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fe88 	bl	8004664 <dir_find>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800495e:	7adb      	ldrb	r3, [r3, #11]
 8004960:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d128      	bne.n	80049c0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d123      	bne.n	80049c0 <follow_path+0xcc>
 8004978:	2305      	movs	r3, #5
 800497a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800497c:	e020      	b.n	80049c0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800497e:	7bbb      	ldrb	r3, [r7, #14]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11d      	bne.n	80049c4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800498e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	330b      	adds	r3, #11
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800499e:	2305      	movs	r3, #5
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e010      	b.n	80049c6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fe06 	bl	80045be <ld_clust>
 80049b2:	4602      	mov	r2, r0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80049ba:	e7be      	b.n	800493a <follow_path+0x46>
			if (res != FR_OK) break;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <follow_path+0xd2>
				break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80049c4:	bf00      	nop
		}
	}

	return res;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d031      	beq.n	8004a4a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e002      	b.n	80049f4 <get_ldnumber+0x24>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3301      	adds	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d903      	bls.n	8004a04 <get_ldnumber+0x34>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b3a      	cmp	r3, #58	; 0x3a
 8004a02:	d1f4      	bne.n	80049ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b3a      	cmp	r3, #58	; 0x3a
 8004a0a:	d11c      	bne.n	8004a46 <get_ldnumber+0x76>
			tp = *path;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	60fa      	str	r2, [r7, #12]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	3b30      	subs	r3, #48	; 0x30
 8004a1c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b09      	cmp	r3, #9
 8004a22:	d80e      	bhi.n	8004a42 <get_ldnumber+0x72>
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d10a      	bne.n	8004a42 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d107      	bne.n	8004a42 <get_ldnumber+0x72>
					vol = (int)i;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	e002      	b.n	8004a4c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004a4a:	693b      	ldr	r3, [r7, #16]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
	...

08004a58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a70:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fe ffdd 	bl	8003a36 <move_window>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <check_fs+0x2e>
		return 3;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e04a      	b.n	8004b1c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	b21a      	sxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004a9a:	b21b      	sxth	r3, r3
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b21b      	sxth	r3, r3
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <check_fs+0xcc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d001      	beq.n	8004aaa <check_fs+0x52>
		return 2;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e038      	b.n	8004b1c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3336      	adds	r3, #54	; 0x36
 8004aae:	3303      	adds	r3, #3
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	061a      	lsls	r2, r3, #24
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3336      	adds	r3, #54	; 0x36
 8004ab8:	3302      	adds	r3, #2
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	041b      	lsls	r3, r3, #16
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	3236      	adds	r2, #54	; 0x36
 8004ac4:	3201      	adds	r2, #1
 8004ac6:	7812      	ldrb	r2, [r2, #0]
 8004ac8:	0212      	lsls	r2, r2, #8
 8004aca:	4313      	orrs	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <check_fs+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <check_fs+0x8a>
		return 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	e01c      	b.n	8004b1c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3352      	adds	r3, #82	; 0x52
 8004ae6:	3303      	adds	r3, #3
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	061a      	lsls	r2, r3, #24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3352      	adds	r3, #82	; 0x52
 8004af0:	3302      	adds	r3, #2
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	4313      	orrs	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	3252      	adds	r2, #82	; 0x52
 8004afc:	3201      	adds	r2, #1
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	0212      	lsls	r2, r2, #8
 8004b02:	4313      	orrs	r3, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <check_fs+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d101      	bne.n	8004b1a <check_fs+0xc2>
		return 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <check_fs+0xc4>

	return 1;
 8004b1a:	2301      	movs	r3, #1
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	ffffaa55 	.word	0xffffaa55
 8004b28:	00544146 	.word	0x00544146

08004b2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b096      	sub	sp, #88	; 0x58
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	f7ff ff45 	bl	80049d0 <get_ldnumber>
 8004b46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da01      	bge.n	8004b52 <find_volume+0x26>
 8004b4e:	230b      	movs	r3, #11
 8004b50:	e2a8      	b.n	80050a4 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004b52:	4a9d      	ldr	r2, [pc, #628]	; (8004dc8 <find_volume+0x29c>)
 8004b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <find_volume+0x3a>
 8004b62:	230c      	movs	r3, #12
 8004b64:	e29e      	b.n	80050a4 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01b      	beq.n	8004bae <find_volume+0x82>
		stat = disk_status(fs->drv);
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fc47 	bl	8003410 <disk_status>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004b88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <find_volume+0x7e>
 8004b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8004ba6:	230a      	movs	r3, #10
 8004ba8:	e27c      	b.n	80050a4 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8004baa:	2300      	movs	r3, #0
 8004bac:	e27a      	b.n	80050a4 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fc3c 	bl	8003444 <disk_initialize>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004bde:	2303      	movs	r3, #3
 8004be0:	e260      	b.n	80050a4 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <find_volume+0xcc>
 8004be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	e255      	b.n	80050a4 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004bfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c00:	f7ff ff2a 	bl	8004a58 <check_fs>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d153      	bne.n	8004cba <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004c12:	2300      	movs	r3, #0
 8004c14:	643b      	str	r3, [r7, #64]	; 0x40
 8004c16:	e028      	b.n	8004c6a <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004c22:	4413      	add	r3, r2
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	3304      	adds	r3, #4
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d012      	beq.n	8004c56 <find_volume+0x12a>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	330b      	adds	r3, #11
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	061a      	lsls	r2, r3, #24
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	330a      	adds	r3, #10
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	4313      	orrs	r3, r2
 8004c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c44:	3209      	adds	r2, #9
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	0212      	lsls	r2, r2, #8
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4e:	3208      	adds	r2, #8
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	e000      	b.n	8004c58 <find_volume+0x12c>
 8004c56:	2200      	movs	r2, #0
 8004c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	3358      	adds	r3, #88	; 0x58
 8004c5e:	443b      	add	r3, r7
 8004c60:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c66:	3301      	adds	r3, #1
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40
 8004c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d9d3      	bls.n	8004c18 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004c70:	2300      	movs	r3, #0
 8004c72:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <find_volume+0x154>
 8004c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	3358      	adds	r3, #88	; 0x58
 8004c86:	443b      	add	r3, r7
 8004c88:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004c8c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <find_volume+0x174>
 8004c94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c98:	f7ff fede 	bl	8004a58 <check_fs>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	e000      	b.n	8004ca2 <find_volume+0x176>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <find_volume+0x18e>
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d9e2      	bls.n	8004c80 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004cba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d101      	bne.n	8004cc6 <find_volume+0x19a>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e1ee      	b.n	80050a4 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <find_volume+0x1a6>
 8004cce:	230d      	movs	r3, #13
 8004cd0:	e1e8      	b.n	80050a4 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	7b1b      	ldrb	r3, [r3, #12]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	b21a      	sxth	r2, r3
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	7adb      	ldrb	r3, [r3, #11]
 8004cde:	b21b      	sxth	r3, r3
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	b21b      	sxth	r3, r3
 8004ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce8:	d001      	beq.n	8004cee <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8004cea:	230d      	movs	r3, #13
 8004cec:	e1da      	b.n	80050a4 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	7ddb      	ldrb	r3, [r3, #23]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	b21a      	sxth	r2, r3
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	7d9b      	ldrb	r3, [r3, #22]
 8004cfa:	b21b      	sxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d112      	bne.n	8004d30 <find_volume+0x204>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d10:	061a      	lsls	r2, r3, #24
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d1e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004d22:	0212      	lsls	r2, r2, #8
 8004d24:	4313      	orrs	r3, r2
 8004d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d28:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	7c1a      	ldrb	r2, [r3, #16]
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d006      	beq.n	8004d5a <find_volume+0x22e>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d001      	beq.n	8004d5a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8004d56:	230d      	movs	r3, #13
 8004d58:	e1a4      	b.n	80050a4 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004d60:	461a      	mov	r2, r3
 8004d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	7b5a      	ldrb	r2, [r3, #13]
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <find_volume+0x268>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004d84:	461a      	mov	r2, r3
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8004d94:	230d      	movs	r3, #13
 8004d96:	e185      	b.n	80050a4 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	7c9b      	ldrb	r3, [r3, #18]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	b21a      	sxth	r2, r3
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	7c5b      	ldrb	r3, [r3, #17]
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	4313      	orrs	r3, r2
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8004dc2:	230d      	movs	r3, #13
 8004dc4:	e16e      	b.n	80050a4 <find_volume+0x578>
 8004dc6:	bf00      	nop
 8004dc8:	200000b8 	.word	0x200000b8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	7d1b      	ldrb	r3, [r3, #20]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	b21a      	sxth	r2, r3
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	7cdb      	ldrb	r3, [r3, #19]
 8004dd8:	b21b      	sxth	r3, r3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	b21b      	sxth	r3, r3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d112      	bne.n	8004e0e <find_volume+0x2e2>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004dee:	061a      	lsls	r2, r3, #24
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004df6:	041b      	lsls	r3, r3, #16
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004e00:	0212      	lsls	r2, r2, #8
 8004e02:	4313      	orrs	r3, r2
 8004e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	7bdb      	ldrb	r3, [r3, #15]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	b21a      	sxth	r2, r3
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	7b9b      	ldrb	r3, [r3, #14]
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004e22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <find_volume+0x300>
 8004e28:	230d      	movs	r3, #13
 8004e2a:	e13b      	b.n	80050a4 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004e2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e30:	4413      	add	r3, r2
 8004e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e34:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8004e38:	0912      	lsrs	r2, r2, #4
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d201      	bcs.n	8004e4c <find_volume+0x320>
 8004e48:	230d      	movs	r3, #13
 8004e4a:	e12b      	b.n	80050a4 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e54:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <find_volume+0x33c>
 8004e64:	230d      	movs	r3, #13
 8004e66:	e11d      	b.n	80050a4 <find_volume+0x578>
	fmt = FS_FAT12;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d902      	bls.n	8004e7e <find_volume+0x352>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d902      	bls.n	8004e8e <find_volume+0x362>
 8004e88:	2303      	movs	r3, #3
 8004e8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004ea0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea4:	441a      	add	r2, r3
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8004eac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	441a      	add	r2, r3
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8004eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d121      	bne.n	8004f04 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <find_volume+0x3a2>
 8004eca:	230d      	movs	r3, #13
 8004ecc:	e0ea      	b.n	80050a4 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ed4:	061a      	lsls	r2, r3, #24
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004ee6:	0212      	lsls	r2, r2, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	647b      	str	r3, [r7, #68]	; 0x44
 8004f02:	e025      	b.n	8004f50 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <find_volume+0x3e6>
 8004f0e:	230d      	movs	r3, #13
 8004f10:	e0c8      	b.n	80050a4 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	441a      	add	r2, r3
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d104      	bne.n	8004f34 <find_volume+0x408>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	e00c      	b.n	8004f4e <find_volume+0x422>
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	085a      	lsrs	r2, r3, #1
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004f4e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f5c:	0a5b      	lsrs	r3, r3, #9
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d201      	bcs.n	8004f66 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8004f62:	230d      	movs	r3, #13
 8004f64:	e09e      	b.n	80050a4 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d177      	bne.n	800507c <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	b21a      	sxth	r2, r3
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f9c:	b21b      	sxth	r3, r3
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	b21b      	sxth	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d16a      	bne.n	800507c <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	3301      	adds	r3, #1
 8004faa:	4619      	mov	r1, r3
 8004fac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fae:	f7fe fd42 	bl	8003a36 <move_window>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d161      	bne.n	800507c <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	b21a      	sxth	r2, r3
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	b21b      	sxth	r3, r3
 8004fd6:	4a35      	ldr	r2, [pc, #212]	; (80050ac <find_volume+0x580>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d14f      	bne.n	800507c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	78db      	ldrb	r3, [r3, #3]
 8004fe0:	061a      	lsls	r2, r3, #24
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	789b      	ldrb	r3, [r3, #2]
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fec:	7852      	ldrb	r2, [r2, #1]
 8004fee:	0212      	lsls	r2, r2, #8
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	4a2d      	ldr	r2, [pc, #180]	; (80050b0 <find_volume+0x584>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d13e      	bne.n	800507c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005004:	061a      	lsls	r2, r3, #24
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	4313      	orrs	r3, r2
 8005010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005012:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005016:	0212      	lsls	r2, r2, #8
 8005018:	4313      	orrs	r3, r2
 800501a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800501c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005020:	4313      	orrs	r3, r2
 8005022:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <find_volume+0x588>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d129      	bne.n	800507c <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800502e:	061a      	lsls	r2, r3, #24
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	4313      	orrs	r3, r2
 800503a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005040:	0212      	lsls	r2, r2, #8
 8005042:	4313      	orrs	r3, r2
 8005044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005046:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800504a:	431a      	orrs	r2, r3
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005058:	061a      	lsls	r2, r3, #24
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	4313      	orrs	r3, r2
 8005064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005066:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800506a:	0212      	lsls	r2, r2, #8
 800506c:	4313      	orrs	r3, r2
 800506e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005070:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005074:	431a      	orrs	r2, r3
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <find_volume+0x58c>)
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <find_volume+0x58c>)
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <find_volume+0x58c>)
 8005094:	881a      	ldrh	r2, [r3, #0]
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800509c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800509e:	f7fe fc57 	bl	8003950 <clear_lock>
#endif

	return FR_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3758      	adds	r7, #88	; 0x58
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	ffffaa55 	.word	0xffffaa55
 80050b0:	41615252 	.word	0x41615252
 80050b4:	61417272 	.word	0x61417272
 80050b8:	200000bc 	.word	0x200000bc

080050bc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d022      	beq.n	8005114 <validate+0x58>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01d      	beq.n	8005114 <validate+0x58>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <validate+0x58>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050ec:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d10c      	bne.n	8005114 <validate+0x58>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005100:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe f983 	bl	8003410 <disk_status>
 800510a:	4603      	mov	r3, r0
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005114:	2309      	movs	r3, #9
 8005116:	e000      	b.n	800511a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005136:	f107 0310 	add.w	r3, r7, #16
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fc48 	bl	80049d0 <get_ldnumber>
 8005140:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	2b00      	cmp	r3, #0
 8005146:	da01      	bge.n	800514c <f_mount+0x28>
 8005148:	230b      	movs	r3, #11
 800514a:	e02d      	b.n	80051a8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800514c:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <f_mount+0x8c>)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005154:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d006      	beq.n	800516a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800515c:	69b8      	ldr	r0, [r7, #24]
 800515e:	f7fe fbf7 	bl	8003950 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	490d      	ldr	r1, [pc, #52]	; (80051b0 <f_mount+0x8c>)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <f_mount+0x6a>
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d001      	beq.n	8005192 <f_mount+0x6e>
 800518e:	2300      	movs	r3, #0
 8005190:	e00a      	b.n	80051a8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005192:	f107 0108 	add.w	r1, r7, #8
 8005196:	f107 030c 	add.w	r3, r7, #12
 800519a:	2200      	movs	r2, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fcc5 	bl	8004b2c <find_volume>
 80051a2:	4603      	mov	r3, r0
 80051a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	200000b8 	.word	0x200000b8

080051b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051c0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80051c4:	6018      	str	r0, [r3, #0]
 80051c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051ca:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80051ce:	6019      	str	r1, [r3, #0]
 80051d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051d4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80051d8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80051da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051de:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <f_open+0x38>
 80051e8:	2309      	movs	r3, #9
 80051ea:	e257      	b.n	800569c <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 80051ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051f0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80051fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005200:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005204:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005208:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	f002 021f 	and.w	r2, r2, #31
 8005212:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005214:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005218:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	f107 0108 	add.w	r1, r7, #8
 8005228:	f107 0320 	add.w	r3, r7, #32
 800522c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fc7b 	bl	8004b2c <find_volume>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800523c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8229 	bne.w	8005698 <f_open+0x4e4>
		INIT_BUF(dj);
 8005246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800524a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800524e:	f107 0214 	add.w	r2, r7, #20
 8005252:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8005256:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800525a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	f107 0320 	add.w	r3, r7, #32
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fb44 	bl	80048f4 <follow_path>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8005272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005276:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800527a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800527e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005282:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11d      	bne.n	80052c6 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800528a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8005292:	2306      	movs	r3, #6
 8005294:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005298:	e015      	b.n	80052c6 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800529a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800529e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	f107 0320 	add.w	r3, r7, #32
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe f9be 	bl	800363c <chk_lock>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80052c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80052ca:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f003 031c 	and.w	r3, r3, #28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80e6 	beq.w	80054a6 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80052da:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d027      	beq.n	8005332 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80052e2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d10e      	bne.n	8005308 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80052ea:	f7fe fa13 	bl	8003714 <enq_lock>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d006      	beq.n	8005302 <f_open+0x14e>
 80052f4:	f107 0320 	add.w	r3, r7, #32
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fa02 	bl	8004702 <dir_register>
 80052fe:	4603      	mov	r3, r0
 8005300:	e000      	b.n	8005304 <f_open+0x150>
 8005302:	2312      	movs	r3, #18
 8005304:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800530c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005310:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005314:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	f042 0208 	orr.w	r2, r2, #8
 800531e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005320:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005324:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800532c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8005330:	e017      	b.n	8005362 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005332:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005336:	330b      	adds	r3, #11
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f003 0311 	and.w	r3, r3, #17
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <f_open+0x196>
					res = FR_DENIED;
 8005342:	2307      	movs	r3, #7
 8005344:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8005348:	e00b      	b.n	8005362 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800534a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800534e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <f_open+0x1ae>
						res = FR_EXIST;
 800535c:	2308      	movs	r3, #8
 800535e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005362:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 80c1 	bne.w	80054ee <f_open+0x33a>
 800536c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005370:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80b7 	beq.w	80054ee <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8005380:	f7fd ff96 	bl	80032b0 <get_fattime>
 8005384:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005388:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800538c:	330e      	adds	r3, #14
 800538e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800539a:	b29b      	uxth	r3, r3
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	b29a      	uxth	r2, r3
 80053a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053a4:	330f      	adds	r3, #15
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80053ae:	0c1a      	lsrs	r2, r3, #16
 80053b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053b4:	3310      	adds	r3, #16
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80053be:	0e1a      	lsrs	r2, r3, #24
 80053c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053c4:	3311      	adds	r3, #17
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80053ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053ce:	330b      	adds	r3, #11
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80053d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053d8:	331c      	adds	r3, #28
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053e2:	331d      	adds	r3, #29
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053ec:	331e      	adds	r3, #30
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80053f6:	331f      	adds	r3, #31
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80053fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005400:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005404:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005408:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff f8d6 	bl	80045be <ld_clust>
 8005412:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8005416:	2100      	movs	r1, #0
 8005418:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800541c:	f7ff f8fc 	bl	8004618 <st_clust>
				dj.fs->wflag = 1;
 8005420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005424:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005428:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005432:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8005436:	2b00      	cmp	r3, #0
 8005438:	d059      	beq.n	80054ee <f_open+0x33a>
					dw = dj.fs->winsect;
 800543a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800543e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005442:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005446:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800544a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800544e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005452:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005456:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800545a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fdad 	bl	8003fbe <remove_chain>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800546a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800546e:	2b00      	cmp	r3, #0
 8005470:	d13d      	bne.n	80054ee <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005472:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005476:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800547a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800547e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8005482:	3a01      	subs	r2, #1
 8005484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800548c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005490:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005494:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005498:	4618      	mov	r0, r3
 800549a:	f7fe facc 	bl	8003a36 <move_window>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80054a4:	e023      	b.n	80054ee <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80054a6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11f      	bne.n	80054ee <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80054ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80054b2:	330b      	adds	r3, #11
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <f_open+0x312>
					res = FR_NO_FILE;
 80054be:	2304      	movs	r3, #4
 80054c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80054c4:	e013      	b.n	80054ee <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80054c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80054ca:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <f_open+0x33a>
 80054d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80054dc:	330b      	adds	r3, #11
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <f_open+0x33a>
						res = FR_DENIED;
 80054e8:	2307      	movs	r3, #7
 80054ea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80054ee:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d153      	bne.n	800559e <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80054f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80054fa:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8005508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800550c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005510:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8005514:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8005518:	7812      	ldrb	r2, [r2, #0]
 800551a:	f042 0220 	orr.w	r2, r2, #32
 800551e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005524:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800552c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005534:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800553e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005542:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800554c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005554:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	f107 0320 	add.w	r3, r7, #32
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe f8f3 	bl	800375c <inc_lock>
 8005576:	4602      	mov	r2, r0
 8005578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800557c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8005586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800558a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <f_open+0x3ea>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800559e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d178      	bne.n	8005698 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80055a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055aa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80055b4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80055be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80055ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80055d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055da:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe ffed 	bl	80045be <ld_clust>
 80055e4:	4602      	mov	r2, r0
 80055e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80055ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80055f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80055f8:	331f      	adds	r3, #31
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	061a      	lsls	r2, r3, #24
 80055fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8005602:	331e      	adds	r3, #30
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	041b      	lsls	r3, r3, #16
 8005608:	4313      	orrs	r3, r2
 800560a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800560e:	321d      	adds	r2, #29
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	0212      	lsls	r2, r2, #8
 8005614:	4313      	orrs	r3, r2
 8005616:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800561a:	321c      	adds	r2, #28
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	431a      	orrs	r2, r3
 8005620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005624:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800562e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005632:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800563e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005642:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2200      	movs	r2, #0
 800564a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800564e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005652:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800565e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005662:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005666:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800566a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800566e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8005678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800567c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005686:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800568a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800568e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8005698:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800569c:	4618      	mov	r0, r3
 800569e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08c      	sub	sp, #48	; 0x30
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fcfc 	bl	80050bc <validate>
 80056c4:	4603      	mov	r3, r0
 80056c6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80056c8:	7ffb      	ldrb	r3, [r7, #31]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <f_read+0x2c>
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	e150      	b.n	8005974 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80056e2:	e147      	b.n	8005974 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80056f2:	2307      	movs	r3, #7
 80056f4:	e13e      	b.n	8005974 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	429a      	cmp	r2, r3
 800570c:	f240 812d 	bls.w	800596a <f_read+0x2c4>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005714:	e129      	b.n	800596a <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 80f2 	bne.w	800590a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800572c:	0a5b      	lsrs	r3, r3, #9
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005736:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800573a:	3b01      	subs	r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	4013      	ands	r3, r2
 8005740:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d139      	bne.n	80057bc <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575a:	e018      	b.n	800578e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7fe fd1c 	bl	80041ac <clmt_clust>
 8005774:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005776:	e00a      	b.n	800578e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fe fa51 	bl	8003c2e <get_fat>
 800578c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d805      	bhi.n	80057a0 <f_read+0xfa>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800579c:	2302      	movs	r3, #2
 800579e:	e0e9      	b.n	8005974 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d105      	bne.n	80057b4 <f_read+0x10e>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0df      	b.n	8005974 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f7fe fa0e 	bl	8003bec <clust2sect>
 80057d0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <f_read+0x13e>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0c7      	b.n	8005974 <f_read+0x2ce>
			sect += csect;
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0a5b      	lsrs	r3, r3, #9
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d046      	beq.n	8005886 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80057f8:	7dfa      	ldrb	r2, [r7, #23]
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	4413      	add	r3, r2
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005804:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005808:	4293      	cmp	r3, r2
 800580a:	d908      	bls.n	800581e <f_read+0x178>
					cc = fp->fs->csize - csect;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005812:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005816:	461a      	mov	r2, r3
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005824:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	6a39      	ldr	r1, [r7, #32]
 800582e:	f7fd fe2f 	bl	8003490 <disk_read>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005840:	2301      	movs	r3, #1
 8005842:	e097      	b.n	8005974 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d015      	beq.n	800587e <f_read+0x1d8>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	429a      	cmp	r2, r3
 8005860:	d90d      	bls.n	800587e <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	025b      	lsls	r3, r3, #9
 800586e:	6a3a      	ldr	r2, [r7, #32]
 8005870:	4413      	add	r3, r2
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005878:	4618      	mov	r0, r3
 800587a:	f7fd fe67 	bl	800354c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005884:	e05b      	b.n	800593e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	429a      	cmp	r2, r3
 8005890:	d037      	beq.n	8005902 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01d      	beq.n	80058dc <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058a6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80058b2:	2301      	movs	r3, #1
 80058b4:	f7fd fe0c 	bl	80034d0 <disk_write>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80058c6:	2301      	movs	r3, #1
 80058c8:	e054      	b.n	8005974 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80058d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	2301      	movs	r3, #1
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	f7fd fdd0 	bl	8003490 <disk_read>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80058fe:	2301      	movs	r3, #1
 8005900:	e038      	b.n	8005974 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005914:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800591a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	429a      	cmp	r2, r3
 8005920:	d901      	bls.n	8005926 <f_read+0x280>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005936:	4619      	mov	r1, r3
 8005938:	6a38      	ldr	r0, [r7, #32]
 800593a:	f7fd fe07 	bl	800354c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	4413      	add	r3, r2
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	441a      	add	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	441a      	add	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f47f aed2 	bne.w	8005716 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3730      	adds	r7, #48	; 0x30
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	; 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fb91 	bl	80050bc <validate>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <f_write+0x2c>
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	e192      	b.n	8005cce <f_write+0x352>
	if (fp->err)							/* Check error */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80059b8:	e189      	b.n	8005cce <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80059c8:	2307      	movs	r3, #7
 80059ca:	e180      	b.n	8005cce <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80059dc:	429a      	cmp	r2, r3
 80059de:	f080 8158 	bcs.w	8005c92 <f_write+0x316>
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80059e6:	e154      	b.n	8005c92 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8114 	bne.w	8005c20 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80059fe:	0a5b      	lsrs	r3, r3, #9
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a08:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	4013      	ands	r3, r2
 8005a12:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d151      	bne.n	8005abe <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10f      	bne.n	8005a44 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d121      	bne.n	8005a76 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fb19 	bl	8004072 <create_chain>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24
 8005a42:	e018      	b.n	8005a76 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005a54:	4619      	mov	r1, r3
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7fe fba8 	bl	80041ac <clmt_clust>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a5e:	e00a      	b.n	8005a76 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe faff 	bl	8004072 <create_chain>
 8005a74:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 810f 	beq.w	8005c9c <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d105      	bne.n	8005a90 <f_write+0x114>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e11e      	b.n	8005cce <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d105      	bne.n	8005aa4 <f_write+0x128>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e114      	b.n	8005cce <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d103      	bne.n	8005abe <f_write+0x142>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01d      	beq.n	8005b08 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ad2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f7fd fcf6 	bl	80034d0 <disk_write>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005af2:	2301      	movs	r3, #1
 8005af4:	e0eb      	b.n	8005cce <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe f868 	bl	8003bec <clust2sect>
 8005b1c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d105      	bne.n	8005b30 <f_write+0x1b4>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e0ce      	b.n	8005cce <f_write+0x352>
			sect += csect;
 8005b30:	7dbb      	ldrb	r3, [r7, #22]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	0a5b      	lsrs	r3, r3, #9
 8005b3c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d048      	beq.n	8005bd6 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005b44:	7dba      	ldrb	r2, [r7, #22]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005b50:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d908      	bls.n	8005b6a <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b5e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b62:	461a      	mov	r2, r3
 8005b64:	7dbb      	ldrb	r3, [r7, #22]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b70:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	f7fd fca9 	bl	80034d0 <disk_write>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e09e      	b.n	8005cce <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d916      	bls.n	8005bce <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	025b      	lsls	r3, r3, #9
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	f7fd fcc8 	bl	800354c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	025b      	lsls	r3, r3, #9
 8005bd2:	623b      	str	r3, [r7, #32]
				continue;
 8005bd4:	e047      	b.n	8005c66 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d01a      	beq.n	8005c18 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d212      	bcs.n	8005c18 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bf8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005bfc:	68f9      	ldr	r1, [r7, #12]
 8005bfe:	2301      	movs	r3, #1
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	f7fd fc45 	bl	8003490 <disk_read>
 8005c06:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8005c14:	2301      	movs	r3, #1
 8005c16:	e05a      	b.n	8005cce <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c2e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005c30:	6a3a      	ldr	r2, [r7, #32]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d901      	bls.n	8005c3c <f_write+0x2c0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	69b9      	ldr	r1, [r7, #24]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fd fc7c 	bl	800354c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	441a      	add	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	441a      	add	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f aea7 	bne.w	80059e8 <f_write+0x6c>
 8005c9a:	e000      	b.n	8005c9e <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c9c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d905      	bls.n	8005cba <f_write+0x33e>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005cc0:	f043 0320 	orr.w	r3, r3, #32
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3728      	adds	r7, #40	; 0x28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff f9ec 	bl	80050bc <validate>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 80a8 	bne.w	8005e40 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80a0 	beq.w	8005e40 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d019      	beq.n	8005d42 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d14:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005d20:	2301      	movs	r3, #1
 8005d22:	f7fd fbd5 	bl	80034d0 <disk_write>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e088      	b.n	8005e42 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f7fd fe70 	bl	8003a36 <move_window>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d16f      	bne.n	8005e40 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005d66:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	330b      	adds	r3, #11
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	330b      	adds	r3, #11
 8005d72:	f042 0220 	orr.w	r2, r2, #32
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	331c      	adds	r3, #28
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	331d      	adds	r3, #29
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005da2:	0c1a      	lsrs	r2, r3, #16
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	331e      	adds	r3, #30
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005db2:	0e1a      	lsrs	r2, r3, #24
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	331f      	adds	r3, #31
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6938      	ldr	r0, [r7, #16]
 8005dc6:	f7fe fc27 	bl	8004618 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005dca:	f7fd fa71 	bl	80032b0 <get_fattime>
 8005dce:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	3316      	adds	r3, #22
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	3317      	adds	r3, #23
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	0c1a      	lsrs	r2, r3, #16
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3318      	adds	r3, #24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	0e1a      	lsrs	r2, r3, #24
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	3319      	adds	r3, #25
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	3312      	adds	r3, #18
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	3313      	adds	r3, #19
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8005e18:	f023 0320 	bic.w	r3, r3, #32
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fd fe2b 	bl	8003a92 <sync_fs>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ff3f 	bl	8005cd6 <f_sync>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d116      	bne.n	8005e90 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff f92a 	bl	80050bc <validate>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10e      	bne.n	8005e90 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fd25 	bl	80038c8 <dec_lock>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005eb2:	4b1e      	ldr	r3, [pc, #120]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005eb4:	7a5b      	ldrb	r3, [r3, #9]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d831      	bhi.n	8005f20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ebc:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005ebe:	7a5b      	ldrb	r3, [r3, #9]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005eca:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005ecc:	7a5b      	ldrb	r3, [r3, #9]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005edc:	7a5b      	ldrb	r3, [r3, #9]
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	79fa      	ldrb	r2, [r7, #7]
 8005ee8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005eec:	7a5b      	ldrb	r3, [r3, #9]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	b2d1      	uxtb	r1, r2
 8005ef4:	4a0d      	ldr	r2, [pc, #52]	; (8005f2c <FATFS_LinkDriverEx+0x90>)
 8005ef6:	7251      	strb	r1, [r2, #9]
 8005ef8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005efa:	7dbb      	ldrb	r3, [r7, #22]
 8005efc:	3330      	adds	r3, #48	; 0x30
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3301      	adds	r3, #1
 8005f08:	223a      	movs	r2, #58	; 0x3a
 8005f0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3302      	adds	r3, #2
 8005f10:	222f      	movs	r2, #47	; 0x2f
 8005f12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	3303      	adds	r3, #3
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	200000d8 	.word	0x200000d8

08005f30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ffac 	bl	8005e9c <FATFS_LinkDriverEx>
 8005f44:	4603      	mov	r3, r0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <SD_initialize+0x38>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8005f60:	f7fd f9ae 	bl	80032c0 <BSP_SD_Init>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <SD_initialize+0x38>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <SD_initialize+0x38>)
 8005f78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f7a:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <SD_initialize+0x38>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000009 	.word	0x20000009

08005f8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	4603      	mov	r3, r0
 8005f94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <SD_status+0x38>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005f9c:	f7fd f9f2 	bl	8003384 <BSP_SD_GetCardState>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <SD_status+0x38>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <SD_status+0x38>)
 8005fb4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <SD_status+0x38>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b2db      	uxtb	r3, r3
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000009 	.word	0x20000009

08005fc8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <SD_read+0x54>)
 8005fde:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <SD_read+0x58>)
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	68b8      	ldr	r0, [r7, #8]
 8005fe8:	f7fd f990 	bl	800330c <BSP_SD_ReadBlocks>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10e      	bne.n	8006010 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005ff2:	e006      	b.n	8006002 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	613a      	str	r2, [r7, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <SD_read+0x3a>
      {
        return RES_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e007      	b.n	8006012 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006002:	f7fd f9bf 	bl	8003384 <BSP_SD_GetCardState>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f3      	bne.n	8005ff4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	000186a0 	.word	0x000186a0
 8006020:	05f5e100 	.word	0x05f5e100

08006024 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <SD_write+0x54>)
 800603a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <SD_write+0x58>)
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	68b8      	ldr	r0, [r7, #8]
 8006044:	f7fd f980 	bl	8003348 <BSP_SD_WriteBlocks>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10e      	bne.n	800606c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800604e:	e006      	b.n	800605e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	1e5a      	subs	r2, r3, #1
 8006054:	613a      	str	r2, [r7, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <SD_write+0x3a>
      {
        return RES_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e007      	b.n	800606e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800605e:	f7fd f991 	bl	8003384 <BSP_SD_GetCardState>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1f3      	bne.n	8006050 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	000186a0 	.word	0x000186a0
 800607c:	05f5e100 	.word	0x05f5e100

08006080 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	; 0x30
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	603a      	str	r2, [r7, #0]
 800608a:	71fb      	strb	r3, [r7, #7]
 800608c:	460b      	mov	r3, r1
 800608e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <SD_ioctl+0xa8>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <SD_ioctl+0x28>
 80060a4:	2303      	movs	r3, #3
 80060a6:	e03b      	b.n	8006120 <SD_ioctl+0xa0>
  
  switch (cmd)
 80060a8:	79bb      	ldrb	r3, [r7, #6]
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d833      	bhi.n	8006116 <SD_ioctl+0x96>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <SD_ioctl+0x34>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060cd 	.word	0x080060cd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ff 	.word	0x080060ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060ca:	e027      	b.n	800611c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80060cc:	f107 030c 	add.w	r3, r7, #12
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd f967 	bl	80033a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80060d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060e2:	e01b      	b.n	800611c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060e4:	f107 030c 	add.w	r3, r7, #12
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fd f95b 	bl	80033a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80060fc:	e00e      	b.n	800611c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060fe:	f107 030c 	add.w	r3, r7, #12
 8006102:	4618      	mov	r0, r3
 8006104:	f7fd f94e 	bl	80033a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8006108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006114:	e002      	b.n	800611c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8006116:	2304      	movs	r3, #4
 8006118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800611c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006120:	4618      	mov	r0, r3
 8006122:	3730      	adds	r7, #48	; 0x30
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000009 	.word	0x20000009

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2600      	movs	r6, #0
 8006130:	4d0c      	ldr	r5, [pc, #48]	; (8006164 <__libc_init_array+0x38>)
 8006132:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	f000 f822 	bl	8006184 <_init>
 8006140:	2600      	movs	r6, #0
 8006142:	4d0a      	ldr	r5, [pc, #40]	; (800616c <__libc_init_array+0x40>)
 8006144:	4c0a      	ldr	r4, [pc, #40]	; (8006170 <__libc_init_array+0x44>)
 8006146:	1b64      	subs	r4, r4, r5
 8006148:	10a4      	asrs	r4, r4, #2
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	080062d8 	.word	0x080062d8
 8006168:	080062d8 	.word	0x080062d8
 800616c:	080062d8 	.word	0x080062d8
 8006170:	080062dc 	.word	0x080062dc

08006174 <memset>:
 8006174:	4603      	mov	r3, r0
 8006176:	4402      	add	r2, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
