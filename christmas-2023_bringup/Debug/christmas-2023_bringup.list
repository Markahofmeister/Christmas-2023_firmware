
christmas-2023_bringup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002778  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800299c  0800299c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800299c  0800299c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800299c  0800299c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080029a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000030  080029d4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080029d4  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000933f  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2b  00000000  00000000  00029398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dc4  00000000  00000000  0002bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009558  00000000  00000000  00044ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093345  00000000  00000000  0004e00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f3c  00000000  00000000  000e13a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000030 	.word	0x20000030
 8000200:	00000000 	.word	0x00000000
 8000204:	08002944 	.word	0x08002944

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000034 	.word	0x20000034
 8000220:	08002944 	.word	0x08002944

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fc13 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f901 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f9bf 	bl	80005b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000236:	f000 f95d 	bl	80004f4 <MX_ADC1_Init>
  MX_USB_PCD_Init();
 800023a:	f000 f999 	bl	8000570 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  const uint8_t bringupStage = 1;
 800023e:	2301      	movs	r3, #1
 8000240:	71fb      	strb	r3, [r7, #7]

  // Define return variable for ADC
  uint16_t ADC_Return = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	80bb      	strh	r3, [r7, #4]
  // Calibrate HAL
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000246:	4872      	ldr	r0, [pc, #456]	; (8000410 <main+0x1ec>)
 8000248:	f001 f8c8 	bl	80013dc <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(bringupStage) {
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	3b01      	subs	r3, #1
 8000250:	2b03      	cmp	r3, #3
 8000252:	f200 80db 	bhi.w	800040c <main+0x1e8>
 8000256:	a201      	add	r2, pc, #4	; (adr r2, 800025c <main+0x38>)
 8000258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025c:	0800026d 	.word	0x0800026d
 8000260:	08000281 	.word	0x08000281
 8000264:	08000393 	.word	0x08000393
 8000268:	0800040d 	.word	0x0800040d
		  case 1:		// Case 1 = simple debug LED blink

			  // Debug LED connected to pin C5
			  HAL_GPIO_TogglePin(GPIOC, debugLED);
 800026c:	2320      	movs	r3, #32
 800026e:	4619      	mov	r1, r3
 8000270:	4868      	ldr	r0, [pc, #416]	; (8000414 <main+0x1f0>)
 8000272:	f001 fc1b 	bl	8001aac <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027a:	f000 fc4d 	bl	8000b18 <HAL_Delay>

		    break;
 800027e:	e0c6      	b.n	800040e <main+0x1ea>

		  case 2:		// Case 2 =  Test shift register functionality

			    // Clear any existing shift register data
				HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[0]);
 8000280:	4b65      	ldr	r3, [pc, #404]	; (8000418 <main+0x1f4>)
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	4a65      	ldr	r2, [pc, #404]	; (800041c <main+0x1f8>)
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	4619      	mov	r1, r3
 800028a:	4865      	ldr	r0, [pc, #404]	; (8000420 <main+0x1fc>)
 800028c:	f001 fbf6 	bl	8001a7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[1]);
 8000290:	4b61      	ldr	r3, [pc, #388]	; (8000418 <main+0x1f4>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	4a61      	ldr	r2, [pc, #388]	; (800041c <main+0x1f8>)
 8000296:	7852      	ldrb	r2, [r2, #1]
 8000298:	4619      	mov	r1, r3
 800029a:	4861      	ldr	r0, [pc, #388]	; (8000420 <main+0x1fc>)
 800029c:	f001 fbee 	bl	8001a7c <HAL_GPIO_WritePin>

				// Store cleared data and Enable output
				HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[1]);
 80002a0:	4b60      	ldr	r3, [pc, #384]	; (8000424 <main+0x200>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	4a5d      	ldr	r2, [pc, #372]	; (800041c <main+0x1f8>)
 80002a6:	7852      	ldrb	r2, [r2, #1]
 80002a8:	4619      	mov	r1, r3
 80002aa:	485d      	ldr	r0, [pc, #372]	; (8000420 <main+0x1fc>)
 80002ac:	f001 fbe6 	bl	8001a7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[0]);
 80002b0:	4b5c      	ldr	r3, [pc, #368]	; (8000424 <main+0x200>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	4a59      	ldr	r2, [pc, #356]	; (800041c <main+0x1f8>)
 80002b6:	7812      	ldrb	r2, [r2, #0]
 80002b8:	4619      	mov	r1, r3
 80002ba:	4859      	ldr	r0, [pc, #356]	; (8000420 <main+0x1fc>)
 80002bc:	f001 fbde 	bl	8001a7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, shiftOutputEnable, GPIOPinSet[0]);
 80002c0:	4b59      	ldr	r3, [pc, #356]	; (8000428 <main+0x204>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	4a55      	ldr	r2, [pc, #340]	; (800041c <main+0x1f8>)
 80002c6:	7812      	ldrb	r2, [r2, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	4855      	ldr	r0, [pc, #340]	; (8000420 <main+0x1fc>)
 80002cc:	f001 fbd6 	bl	8001a7c <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f000 fc21 	bl	8000b18 <HAL_Delay>

				// Write data pin with 1 bit of data
				HAL_GPIO_WritePin(GPIOB, shiftData, GPIOPinSet[1]);
 80002d6:	4b55      	ldr	r3, [pc, #340]	; (800042c <main+0x208>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	4a50      	ldr	r2, [pc, #320]	; (800041c <main+0x1f8>)
 80002dc:	7852      	ldrb	r2, [r2, #1]
 80002de:	4619      	mov	r1, r3
 80002e0:	484f      	ldr	r0, [pc, #316]	; (8000420 <main+0x1fc>)
 80002e2:	f001 fbcb 	bl	8001a7c <HAL_GPIO_WritePin>

				// Shift high bit into pos 1
				HAL_GPIO_WritePin(GPIOB, shiftDataClock, GPIOPinSet[1]);
 80002e6:	4b52      	ldr	r3, [pc, #328]	; (8000430 <main+0x20c>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	4a4c      	ldr	r2, [pc, #304]	; (800041c <main+0x1f8>)
 80002ec:	7852      	ldrb	r2, [r2, #1]
 80002ee:	4619      	mov	r1, r3
 80002f0:	484b      	ldr	r0, [pc, #300]	; (8000420 <main+0x1fc>)
 80002f2:	f001 fbc3 	bl	8001a7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, shiftDataClock, GPIOPinSet[0]);
 80002f6:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <main+0x20c>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	4a48      	ldr	r2, [pc, #288]	; (800041c <main+0x1f8>)
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	4619      	mov	r1, r3
 8000300:	4847      	ldr	r0, [pc, #284]	; (8000420 <main+0x1fc>)
 8000302:	f001 fbbb 	bl	8001a7c <HAL_GPIO_WritePin>


				// Display Output
				HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[1]);
 8000306:	4b47      	ldr	r3, [pc, #284]	; (8000424 <main+0x200>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	4a44      	ldr	r2, [pc, #272]	; (800041c <main+0x1f8>)
 800030c:	7852      	ldrb	r2, [r2, #1]
 800030e:	4619      	mov	r1, r3
 8000310:	4843      	ldr	r0, [pc, #268]	; (8000420 <main+0x1fc>)
 8000312:	f001 fbb3 	bl	8001a7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[0]);
 8000316:	4b43      	ldr	r3, [pc, #268]	; (8000424 <main+0x200>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	4a40      	ldr	r2, [pc, #256]	; (800041c <main+0x1f8>)
 800031c:	7812      	ldrb	r2, [r2, #0]
 800031e:	4619      	mov	r1, r3
 8000320:	483f      	ldr	r0, [pc, #252]	; (8000420 <main+0x1fc>)
 8000322:	f001 fbab 	bl	8001a7c <HAL_GPIO_WritePin>

				// Change Data pin back to low bit
				HAL_GPIO_WritePin(GPIOB, shiftData, GPIOPinSet[0]);
 8000326:	4b41      	ldr	r3, [pc, #260]	; (800042c <main+0x208>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	4a3c      	ldr	r2, [pc, #240]	; (800041c <main+0x1f8>)
 800032c:	7812      	ldrb	r2, [r2, #0]
 800032e:	4619      	mov	r1, r3
 8000330:	483b      	ldr	r0, [pc, #236]	; (8000420 <main+0x1fc>)
 8000332:	f001 fba3 	bl	8001a7c <HAL_GPIO_WritePin>


				for(int i = 0; i < 8; i++) {
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	e026      	b.n	800038a <main+0x166>

					HAL_Delay(1000);
 800033c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000340:	f000 fbea 	bl	8000b18 <HAL_Delay>
					// Shift low bit
					HAL_GPIO_WritePin(GPIOB, shiftDataClock, GPIOPinSet[1]);
 8000344:	4b3a      	ldr	r3, [pc, #232]	; (8000430 <main+0x20c>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	4a34      	ldr	r2, [pc, #208]	; (800041c <main+0x1f8>)
 800034a:	7852      	ldrb	r2, [r2, #1]
 800034c:	4619      	mov	r1, r3
 800034e:	4834      	ldr	r0, [pc, #208]	; (8000420 <main+0x1fc>)
 8000350:	f001 fb94 	bl	8001a7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, shiftDataClock, GPIOPinSet[0]);
 8000354:	4b36      	ldr	r3, [pc, #216]	; (8000430 <main+0x20c>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	4a30      	ldr	r2, [pc, #192]	; (800041c <main+0x1f8>)
 800035a:	7812      	ldrb	r2, [r2, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4830      	ldr	r0, [pc, #192]	; (8000420 <main+0x1fc>)
 8000360:	f001 fb8c 	bl	8001a7c <HAL_GPIO_WritePin>

					// Display Output
					HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[1]);
 8000364:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <main+0x200>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	4a2c      	ldr	r2, [pc, #176]	; (800041c <main+0x1f8>)
 800036a:	7852      	ldrb	r2, [r2, #1]
 800036c:	4619      	mov	r1, r3
 800036e:	482c      	ldr	r0, [pc, #176]	; (8000420 <main+0x1fc>)
 8000370:	f001 fb84 	bl	8001a7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[0]);
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <main+0x200>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4a28      	ldr	r2, [pc, #160]	; (800041c <main+0x1f8>)
 800037a:	7812      	ldrb	r2, [r2, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	4828      	ldr	r0, [pc, #160]	; (8000420 <main+0x1fc>)
 8000380:	f001 fb7c 	bl	8001a7c <HAL_GPIO_WritePin>
				for(int i = 0; i < 8; i++) {
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3301      	adds	r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	2b07      	cmp	r3, #7
 800038e:	ddd5      	ble.n	800033c <main+0x118>
				}


		    break;
 8000390:	e03d      	b.n	800040e <main+0x1ea>

		  case 3:		// Case 3 - Test ADC functionality

			  // Start ADC Conversion
			  HAL_ADC_Start(&hadc1);
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <main+0x1ec>)
 8000394:	f000 fcce 	bl	8000d34 <HAL_ADC_Start>

			 // Poll ADC1 Peripheral & TimeOut = 1mSec
			  HAL_ADC_PollForConversion(&hadc1, 1);
 8000398:	2101      	movs	r1, #1
 800039a:	481d      	ldr	r0, [pc, #116]	; (8000410 <main+0x1ec>)
 800039c:	f000 fd78 	bl	8000e90 <HAL_ADC_PollForConversion>

			  // Read The ADC Conversion Result & Map It To PWM DutyCycle
			  ADC_Return = HAL_ADC_GetValue(&hadc1);
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x1ec>)
 80003a2:	f000 fe7b 	bl	800109c <HAL_ADC_GetValue>
 80003a6:	4603      	mov	r3, r0
 80003a8:	80bb      	strh	r3, [r7, #4]

			  // Resolution = 12 bit, 2^12 = 4096

			  // If ADC > 0.5 * VDD, turn on LED.
			  if(ADC_Return >= 4096/2 && ADC_Return <= 4096) {
 80003aa:	88bb      	ldrh	r3, [r7, #4]
 80003ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b0:	d30b      	bcc.n	80003ca <main+0x1a6>
 80003b2:	88bb      	ldrh	r3, [r7, #4]
 80003b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003b8:	d807      	bhi.n	80003ca <main+0x1a6>
				  HAL_GPIO_WritePin(GPIOC, debugLED, GPIOPinSet[1]);
 80003ba:	2120      	movs	r1, #32
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <main+0x1f8>)
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4814      	ldr	r0, [pc, #80]	; (8000414 <main+0x1f0>)
 80003c4:	f001 fb5a 	bl	8001a7c <HAL_GPIO_WritePin>
 80003c8:	e01c      	b.n	8000404 <main+0x1e0>
			  }
			  // If ADC < 0.5 * VDD, turn off LED.
			  else if(ADC_Return <= 4096/2 && ADC_Return >= 0) {
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d0:	d807      	bhi.n	80003e2 <main+0x1be>
				  HAL_GPIO_WritePin(GPIOC, debugLED, GPIOPinSet[0]);
 80003d2:	2120      	movs	r1, #32
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <main+0x1f8>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	480e      	ldr	r0, [pc, #56]	; (8000414 <main+0x1f0>)
 80003dc:	f001 fb4e 	bl	8001a7c <HAL_GPIO_WritePin>
 80003e0:	e010      	b.n	8000404 <main+0x1e0>
			  }
			  // Else, something is wrong with my measurement - I should only get between 0 and 4096 return
			  else {
				  for(int i = 0; i < 20; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	e00a      	b.n	80003fe <main+0x1da>
					  HAL_GPIO_TogglePin(GPIOC, debugLED);
 80003e8:	2320      	movs	r3, #32
 80003ea:	4619      	mov	r1, r3
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <main+0x1f0>)
 80003ee:	f001 fb5d 	bl	8001aac <HAL_GPIO_TogglePin>
					  HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	; 0x64
 80003f4:	f000 fb90 	bl	8000b18 <HAL_Delay>
				  for(int i = 0; i < 20; i++) {
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	3301      	adds	r3, #1
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b13      	cmp	r3, #19
 8000402:	ddf1      	ble.n	80003e8 <main+0x1c4>
				  }
			  }

			  HAL_Delay(10);
 8000404:	200a      	movs	r0, #10
 8000406:	f000 fb87 	bl	8000b18 <HAL_Delay>

		    break;
 800040a:	e000      	b.n	800040e <main+0x1ea>

		    break;

		  default:

		   break;
 800040c:	bf00      	nop
	  switch(bringupStage) {
 800040e:	e71d      	b.n	800024c <main+0x28>
 8000410:	2000004c 	.word	0x2000004c
 8000414:	40011000 	.word	0x40011000
 8000418:	20000008 	.word	0x20000008
 800041c:	20000020 	.word	0x20000020
 8000420:	40010c00 	.word	0x40010c00
 8000424:	20000004 	.word	0x20000004
 8000428:	20000006 	.word	0x20000006
 800042c:	20000000 	.word	0x20000000
 8000430:	20000002 	.word	0x20000002

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b096      	sub	sp, #88	; 0x58
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fa76 	bl	8002934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000468:	2301      	movs	r3, #1
 800046a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000484:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000488:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fc3e 	bl	8001d10 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800049a:	f000 f9cd 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2302      	movs	r3, #2
 80004a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	2102      	movs	r1, #2
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 feaa 	bl	8002214 <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004c6:	f000 f9b7 	bl	8000838 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80004ca:	2312      	movs	r3, #18
 80004cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 f816 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004e6:	f000 f9a7 	bl	8000838 <Error_Handler>
  }
}
 80004ea:	bf00      	nop
 80004ec:	3758      	adds	r7, #88	; 0x58
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ADC1_Init+0x74>)
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <MX_ADC1_Init+0x78>)
 8000508:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_ADC1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_ADC1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_ADC1_Init+0x74>)
 800051e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_ADC1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_ADC1_Init+0x74>)
 800052c:	2201      	movs	r2, #1
 800052e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_ADC1_Init+0x74>)
 8000532:	f000 fb15 	bl	8000b60 <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800053c:	f000 f97c 	bl	8000838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000544:	2301      	movs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0x74>)
 8000552:	f000 fdaf 	bl	80010b4 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800055c:	f000 f96c 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000004c 	.word	0x2000004c
 800056c:	40012400 	.word	0x40012400

08000570 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <MX_USB_PCD_Init+0x40>)
 8000578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 800057c:	2208      	movs	r2, #8
 800057e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 8000582:	2202      	movs	r2, #2
 8000584:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 8000594:	2200      	movs	r2, #0
 8000596:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_USB_PCD_Init+0x3c>)
 800059a:	f001 fab9 	bl	8001b10 <HAL_PCD_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005a4:	f000 f948 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	40005c00 	.word	0x40005c00

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b50      	ldr	r3, [pc, #320]	; (800070c <MX_GPIO_Init+0x158>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a4f      	ldr	r2, [pc, #316]	; (800070c <MX_GPIO_Init+0x158>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <MX_GPIO_Init+0x158>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b4a      	ldr	r3, [pc, #296]	; (800070c <MX_GPIO_Init+0x158>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a49      	ldr	r2, [pc, #292]	; (800070c <MX_GPIO_Init+0x158>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b47      	ldr	r3, [pc, #284]	; (800070c <MX_GPIO_Init+0x158>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <MX_GPIO_Init+0x158>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a43      	ldr	r2, [pc, #268]	; (800070c <MX_GPIO_Init+0x158>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b41      	ldr	r3, [pc, #260]	; (800070c <MX_GPIO_Init+0x158>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b3e      	ldr	r3, [pc, #248]	; (800070c <MX_GPIO_Init+0x158>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a3d      	ldr	r2, [pc, #244]	; (800070c <MX_GPIO_Init+0x158>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b3b      	ldr	r3, [pc, #236]	; (800070c <MX_GPIO_Init+0x158>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	4838      	ldr	r0, [pc, #224]	; (8000710 <MX_GPIO_Init+0x15c>)
 800062e:	f001 fa25 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFT_OE_Pin|SHIFT_DATA_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 8000632:	2200      	movs	r2, #0
 8000634:	f640 4107 	movw	r1, #3079	; 0xc07
 8000638:	4836      	ldr	r0, [pc, #216]	; (8000714 <MX_GPIO_Init+0x160>)
 800063a:	f001 fa1f 	bl	8001a7c <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin;
 800063e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <MX_GPIO_Init+0x164>)
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4619      	mov	r1, r3
 8000652:	4832      	ldr	r0, [pc, #200]	; (800071c <MX_GPIO_Init+0x168>)
 8000654:	f001 f87e 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8000658:	2310      	movs	r3, #16
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065c:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <MX_GPIO_Init+0x164>)
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4829      	ldr	r0, [pc, #164]	; (8000710 <MX_GPIO_Init+0x15c>)
 800066c:	f001 f872 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 8000670:	2320      	movs	r3, #32
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4822      	ldr	r0, [pc, #136]	; (8000710 <MX_GPIO_Init+0x15c>)
 8000688:	f001 f864 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFT_OE_Pin SHIFT_DATA_Pin SHIFT_DATA_CLK_Pin SHIFT_STORE_CLK_Pin
                           SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SHIFT_OE_Pin|SHIFT_DATA_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 800068c:	f640 4307 	movw	r3, #3079	; 0xc07
 8000690:	613b      	str	r3, [r7, #16]
                          |SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2302      	movs	r3, #2
 800069c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	481b      	ldr	r0, [pc, #108]	; (8000714 <MX_GPIO_Init+0x160>)
 80006a6:	f001 f855 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_10_Pin BUTTON_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_10_Pin|BUTTON_8_Pin;
 80006aa:	2328      	movs	r3, #40	; 0x28
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_GPIO_Init+0x164>)
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	4815      	ldr	r0, [pc, #84]	; (8000714 <MX_GPIO_Init+0x160>)
 80006be:	f001 f849 	bl	8001754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2009      	movs	r0, #9
 80006c8:	f001 f80d 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006cc:	2009      	movs	r0, #9
 80006ce:	f001 f826 	bl	800171e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200a      	movs	r0, #10
 80006d8:	f001 f805 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006dc:	200a      	movs	r0, #10
 80006de:	f001 f81e 	bl	800171e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2017      	movs	r0, #23
 80006e8:	f000 fffd 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006ec:	2017      	movs	r0, #23
 80006ee:	f001 f816 	bl	800171e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2028      	movs	r0, #40	; 0x28
 80006f8:	f000 fff5 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006fc:	2028      	movs	r0, #40	; 0x28
 80006fe:	f001 f80e 	bl	800171e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	40011000 	.word	0x40011000
 8000714:	40010c00 	.word	0x40010c00
 8000718:	10210000 	.word	0x10210000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]

	// All buttons trigger the same sequence for now, but this may change later.
	// GPIO interrupts are enabled in NVIC.

	if(GPIO_Pin == buttonIn_1) {
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <HAL_GPIO_EXTI_Callback+0xec>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	88fa      	ldrh	r2, [r7, #6]
 8000730:	429a      	cmp	r2, r3
 8000732:	d105      	bne.n	8000740 <HAL_GPIO_EXTI_Callback+0x20>
//		HAL_GPIO_WritePin(GPIOC, debugLED, GPIOPinSet[1]);
//		HAL_Delay(750);
//		HAL_GPIO_WritePin(GPIOC, debugLED, GPIOPinSet[0]);
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 8000734:	2320      	movs	r3, #32
 8000736:	4619      	mov	r1, r3
 8000738:	4835      	ldr	r0, [pc, #212]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 800073a:	f001 f9b7 	bl	8001aac <HAL_GPIO_TogglePin>
		}
	else if(GPIO_Pin == buttonIn_10) {
		HAL_GPIO_TogglePin(GPIOC, debugLED);
		}

}
 800073e:	e061      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_2) {
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	88fa      	ldrh	r2, [r7, #6]
 8000746:	429a      	cmp	r2, r3
 8000748:	d105      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 800074a:	2320      	movs	r3, #32
 800074c:	4619      	mov	r1, r3
 800074e:	4830      	ldr	r0, [pc, #192]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000750:	f001 f9ac 	bl	8001aac <HAL_GPIO_TogglePin>
}
 8000754:	e056      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_3) {
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	88fa      	ldrh	r2, [r7, #6]
 800075c:	429a      	cmp	r2, r3
 800075e:	d105      	bne.n	800076c <HAL_GPIO_EXTI_Callback+0x4c>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 8000760:	2320      	movs	r3, #32
 8000762:	4619      	mov	r1, r3
 8000764:	482a      	ldr	r0, [pc, #168]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000766:	f001 f9a1 	bl	8001aac <HAL_GPIO_TogglePin>
}
 800076a:	e04b      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_4) {
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <HAL_GPIO_EXTI_Callback+0xfc>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	88fa      	ldrh	r2, [r7, #6]
 8000772:	429a      	cmp	r2, r3
 8000774:	d105      	bne.n	8000782 <HAL_GPIO_EXTI_Callback+0x62>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 8000776:	2320      	movs	r3, #32
 8000778:	4619      	mov	r1, r3
 800077a:	4825      	ldr	r0, [pc, #148]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 800077c:	f001 f996 	bl	8001aac <HAL_GPIO_TogglePin>
}
 8000780:	e040      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_5) {
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <HAL_GPIO_EXTI_Callback+0x100>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	88fa      	ldrh	r2, [r7, #6]
 8000788:	429a      	cmp	r2, r3
 800078a:	d105      	bne.n	8000798 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 800078c:	2320      	movs	r3, #32
 800078e:	4619      	mov	r1, r3
 8000790:	481f      	ldr	r0, [pc, #124]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000792:	f001 f98b 	bl	8001aac <HAL_GPIO_TogglePin>
}
 8000796:	e035      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_6) {
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <HAL_GPIO_EXTI_Callback+0x104>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	88fa      	ldrh	r2, [r7, #6]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d105      	bne.n	80007ae <HAL_GPIO_EXTI_Callback+0x8e>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 80007a2:	2320      	movs	r3, #32
 80007a4:	4619      	mov	r1, r3
 80007a6:	481a      	ldr	r0, [pc, #104]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007a8:	f001 f980 	bl	8001aac <HAL_GPIO_TogglePin>
}
 80007ac:	e02a      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_7) {
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_GPIO_EXTI_Callback+0x108>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	88fa      	ldrh	r2, [r7, #6]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d105      	bne.n	80007c4 <HAL_GPIO_EXTI_Callback+0xa4>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 80007b8:	2320      	movs	r3, #32
 80007ba:	4619      	mov	r1, r3
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007be:	f001 f975 	bl	8001aac <HAL_GPIO_TogglePin>
}
 80007c2:	e01f      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_8) {
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_GPIO_EXTI_Callback+0x10c>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d105      	bne.n	80007da <HAL_GPIO_EXTI_Callback+0xba>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 80007ce:	2320      	movs	r3, #32
 80007d0:	4619      	mov	r1, r3
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007d4:	f001 f96a 	bl	8001aac <HAL_GPIO_TogglePin>
}
 80007d8:	e014      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_9) {
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_GPIO_EXTI_Callback+0x110>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	88fa      	ldrh	r2, [r7, #6]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d105      	bne.n	80007f0 <HAL_GPIO_EXTI_Callback+0xd0>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 80007e4:	2320      	movs	r3, #32
 80007e6:	4619      	mov	r1, r3
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007ea:	f001 f95f 	bl	8001aac <HAL_GPIO_TogglePin>
}
 80007ee:	e009      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
	else if(GPIO_Pin == buttonIn_10) {
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_GPIO_EXTI_Callback+0x114>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d104      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0xe4>
		HAL_GPIO_TogglePin(GPIOC, debugLED);
 80007fa:	2320      	movs	r3, #32
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000800:	f001 f954 	bl	8001aac <HAL_GPIO_TogglePin>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000000a 	.word	0x2000000a
 8000810:	40011000 	.word	0x40011000
 8000814:	2000000c 	.word	0x2000000c
 8000818:	2000000e 	.word	0x2000000e
 800081c:	20000010 	.word	0x20000010
 8000820:	20000012 	.word	0x20000012
 8000824:	20000014 	.word	0x20000014
 8000828:	20000016 	.word	0x20000016
 800082c:	20000018 	.word	0x20000018
 8000830:	2000001a 	.word	0x2000001a
 8000834:	2000001c 	.word	0x2000001c

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_MspInit+0x5c>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <HAL_MspInit+0x5c>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_MspInit+0x5c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x5c>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x5c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x5c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_MspInit+0x60>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_MspInit+0x60>)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010000 	.word	0x40010000

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <HAL_ADC_MspInit+0x6c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d121      	bne.n	800090c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_ADC_MspInit+0x70>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <HAL_ADC_MspInit+0x70>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_ADC_MspInit+0x70>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_ADC_MspInit+0x70>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <HAL_ADC_MspInit+0x70>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_ADC_MspInit+0x70>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fc:	2303      	movs	r3, #3
 80008fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_ADC_MspInit+0x74>)
 8000908:	f000 ff24 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40012400 	.word	0x40012400
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800

08000920 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_PCD_MspInit+0x34>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_PCD_MspInit+0x38>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_PCD_MspInit+0x38>)
 8000938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_PCD_MspInit+0x38>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40005c00 	.word	0x40005c00
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f89d 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}

080009aa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_10_Pin);
 80009ae:	2008      	movs	r0, #8
 80009b0:	f001 f896 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 80009bc:	2010      	movs	r0, #16
 80009be:	f001 f88f 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_8_Pin);
 80009ca:	2020      	movs	r0, #32
 80009cc:	f001 f888 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	f001 f885 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 80009d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009da:	f001 f881 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 80009de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e2:	f001 f87d 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_5_Pin);
 80009ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009f2:	f001 f875 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
	...

08000a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff fff7 	bl	80009fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a0e:	490c      	ldr	r1, [pc, #48]	; (8000a40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a24:	4c09      	ldr	r4, [pc, #36]	; (8000a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f001 ff5b 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff fbf5 	bl	8000224 <main>
  bx lr
 8000a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000a44:	080029a4 	.word	0x080029a4
  ldr r2, =_sbss
 8000a48:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000a4c:	20000370 	.word	0x20000370

08000a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_2_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x28>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 fe33 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fee8 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fe4b 	bl	800173a <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 fe13 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000024 	.word	0x20000024
 8000ad8:	2000002c 	.word	0x2000002c
 8000adc:	20000028 	.word	0x20000028

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	2000002c 	.word	0x2000002c
 8000b00:	2000036c 	.word	0x2000036c

08000b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	2000036c 	.word	0x2000036c

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000002c 	.word	0x2000002c

08000b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e0ce      	b.n	8000d20 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d109      	bne.n	8000ba4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fe82 	bl	80008a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fbd7 	bl	8001358 <ADC_ConversionStop_Disable>
 8000baa:	4603      	mov	r3, r0
 8000bac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 80a9 	bne.w	8000d0e <HAL_ADC_Init+0x1ae>
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 80a5 	bne.w	8000d0e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bcc:	f023 0302 	bic.w	r3, r3, #2
 8000bd0:	f043 0202 	orr.w	r2, r3, #2
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4951      	ldr	r1, [pc, #324]	; (8000d28 <HAL_ADC_Init+0x1c8>)
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d10a      	bne.n	8000bfc <HAL_ADC_Init+0x9c>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000bee:	d002      	beq.n	8000bf6 <HAL_ADC_Init+0x96>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	e004      	b.n	8000c00 <HAL_ADC_Init+0xa0>
 8000bf6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000bfa:	e001      	b.n	8000c00 <HAL_ADC_Init+0xa0>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7b1b      	ldrb	r3, [r3, #12]
 8000c06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c18:	d003      	beq.n	8000c22 <HAL_ADC_Init+0xc2>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d102      	bne.n	8000c28 <HAL_ADC_Init+0xc8>
 8000c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c26:	e000      	b.n	8000c2a <HAL_ADC_Init+0xca>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7d1b      	ldrb	r3, [r3, #20]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d119      	bne.n	8000c6c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7b1b      	ldrb	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	035a      	lsls	r2, r3, #13
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	e00b      	b.n	8000c6c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	f043 0220 	orr.w	r2, r3, #32
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	f043 0201 	orr.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <HAL_ADC_Init+0x1cc>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9c:	d003      	beq.n	8000ca6 <HAL_ADC_Init+0x146>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d104      	bne.n	8000cb0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	051b      	lsls	r3, r3, #20
 8000cae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_ADC_Init+0x1d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d10b      	bne.n	8000cec <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	f023 0303 	bic.w	r3, r3, #3
 8000ce2:	f043 0201 	orr.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cea:	e018      	b.n	8000d1e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf0:	f023 0312 	bic.w	r3, r3, #18
 8000cf4:	f043 0210 	orr.w	r2, r3, #16
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d0c:	e007      	b.n	8000d1e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d12:	f043 0210 	orr.w	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40013c00 	.word	0x40013c00
 8000d2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000d30:	ff1f0efe 	.word	0xff1f0efe

08000d34 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_Start+0x1a>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e098      	b.n	8000e80 <HAL_ADC_Start+0x14c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 faa4 	bl	80012a4 <ADC_Enable>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8087 	bne.w	8000e76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <HAL_ADC_Start+0x154>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d105      	bne.n	8000d92 <HAL_ADC_Start+0x5e>
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d115      	bne.n	8000dbe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d026      	beq.n	8000dfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbc:	e01d      	b.n	8000dfa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a2f      	ldr	r2, [pc, #188]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d004      	beq.n	8000dde <HAL_ADC_Start+0xaa>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <HAL_ADC_Start+0x154>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10d      	bne.n	8000dfa <HAL_ADC_Start+0xc6>
 8000dde:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	f023 0206 	bic.w	r2, r3, #6
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e12:	e002      	b.n	8000e1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f06f 0202 	mvn.w	r2, #2
 8000e2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e3a:	d113      	bne.n	8000e64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <HAL_ADC_Start+0x154>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d105      	bne.n	8000e52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d108      	bne.n	8000e64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	e00c      	b.n	8000e7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	e003      	b.n	8000e7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012800 	.word	0x40012800
 8000e8c:	40012400 	.word	0x40012400

08000e90 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ea6:	f7ff fe2d 	bl	8000b04 <HAL_GetTick>
 8000eaa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f043 0220 	orr.w	r2, r3, #32
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e0d3      	b.n	800107a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d131      	bne.n	8000f44 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d12a      	bne.n	8000f44 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eee:	e021      	b.n	8000f34 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef6:	d01d      	beq.n	8000f34 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <HAL_ADC_PollForConversion+0x7e>
 8000efe:	f7ff fe01 	bl	8000b04 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d212      	bcs.n	8000f34 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10b      	bne.n	8000f34 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	f043 0204 	orr.w	r2, r3, #4
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0a2      	b.n	800107a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0d6      	beq.n	8000ef0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f42:	e070      	b.n	8001026 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f44:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <HAL_ADC_PollForConversion+0x1f4>)
 8000f46:	681c      	ldr	r4, [r3, #0]
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f001 fb95 	bl	8002678 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6919      	ldr	r1, [r3, #16]
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <HAL_ADC_PollForConversion+0x1f8>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <HAL_ADC_PollForConversion+0x104>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	4b48      	ldr	r3, [pc, #288]	; (800108c <HAL_ADC_PollForConversion+0x1fc>)
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d111      	bne.n	8000f94 <HAL_ADC_PollForConversion+0x104>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_ADC_PollForConversion+0x200>)
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d108      	bne.n	8000f90 <HAL_ADC_PollForConversion+0x100>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68d9      	ldr	r1, [r3, #12]
 8000f84:	4b43      	ldr	r3, [pc, #268]	; (8001094 <HAL_ADC_PollForConversion+0x204>)
 8000f86:	400b      	ands	r3, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_ADC_PollForConversion+0x100>
 8000f8c:	2314      	movs	r3, #20
 8000f8e:	e020      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x142>
 8000f90:	2329      	movs	r3, #41	; 0x29
 8000f92:	e01e      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x142>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6919      	ldr	r1, [r3, #16]
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <HAL_ADC_PollForConversion+0x200>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x120>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68d9      	ldr	r1, [r3, #12]
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <HAL_ADC_PollForConversion+0x204>)
 8000faa:	400b      	ands	r3, r1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00d      	beq.n	8000fcc <HAL_ADC_PollForConversion+0x13c>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_ADC_PollForConversion+0x208>)
 8000fb8:	400b      	ands	r3, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d108      	bne.n	8000fd0 <HAL_ADC_PollForConversion+0x140>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_ADC_PollForConversion+0x208>)
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_ADC_PollForConversion+0x140>
 8000fcc:	2354      	movs	r3, #84	; 0x54
 8000fce:	e000      	b.n	8000fd2 <HAL_ADC_PollForConversion+0x142>
 8000fd0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fd8:	e021      	b.n	800101e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d01a      	beq.n	8001018 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_ADC_PollForConversion+0x168>
 8000fe8:	f7ff fd8c 	bl	8000b04 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d20f      	bcs.n	8001018 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d90b      	bls.n	8001018 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	f043 0204 	orr.w	r2, r3, #4
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e030      	b.n	800107a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	429a      	cmp	r2, r3
 8001024:	d8d9      	bhi.n	8000fda <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f06f 0212 	mvn.w	r2, #18
 800102e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001046:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800104a:	d115      	bne.n	8001078 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001050:	2b00      	cmp	r3, #0
 8001052:	d111      	bne.n	8001078 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	20000024 	.word	0x20000024
 8001088:	24924924 	.word	0x24924924
 800108c:	00924924 	.word	0x00924924
 8001090:	12492492 	.word	0x12492492
 8001094:	00492492 	.word	0x00492492
 8001098:	00249249 	.word	0x00249249

0800109c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_ADC_ConfigChannel+0x20>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e0dc      	b.n	800128e <HAL_ADC_ConfigChannel+0x1da>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b06      	cmp	r3, #6
 80010e2:	d81c      	bhi.n	800111e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b05      	subs	r3, #5
 80010f6:	221f      	movs	r2, #31
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4019      	ands	r1, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	3b05      	subs	r3, #5
 8001110:	fa00 f203 	lsl.w	r2, r0, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	; 0x34
 800111c:	e03c      	b.n	8001198 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d81c      	bhi.n	8001160 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b23      	subs	r3, #35	; 0x23
 8001138:	221f      	movs	r2, #31
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	4019      	ands	r1, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	3b23      	subs	r3, #35	; 0x23
 8001152:	fa00 f203 	lsl.w	r2, r0, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
 800115e:	e01b      	b.n	8001198 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	3b41      	subs	r3, #65	; 0x41
 8001172:	221f      	movs	r2, #31
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	3b41      	subs	r3, #65	; 0x41
 800118c:	fa00 f203 	lsl.w	r2, r0, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b09      	cmp	r3, #9
 800119e:	d91c      	bls.n	80011da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68d9      	ldr	r1, [r3, #12]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	3b1e      	subs	r3, #30
 80011b2:	2207      	movs	r2, #7
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4019      	ands	r1, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	3b1e      	subs	r3, #30
 80011cc:	fa00 f203 	lsl.w	r2, r0, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	e019      	b.n	800120e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6919      	ldr	r1, [r3, #16]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	2207      	movs	r2, #7
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4019      	ands	r1, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6898      	ldr	r0, [r3, #8]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	fa00 f203 	lsl.w	r2, r0, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d003      	beq.n	800121e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800121a:	2b11      	cmp	r3, #17
 800121c:	d132      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_ADC_ConfigChannel+0x1e4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d125      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d126      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001244:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d11a      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_ADC_ConfigChannel+0x1e8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9a      	lsrs	r2, r3, #18
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001264:	e002      	b.n	800126c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3b01      	subs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x1b2>
 8001272:	e007      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f043 0220 	orr.w	r2, r3, #32
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40012400 	.word	0x40012400
 800129c:	20000024 	.word	0x20000024
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d040      	beq.n	8001344 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0201 	orr.w	r2, r2, #1
 80012d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <ADC_Enable+0xac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <ADC_Enable+0xb0>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012e0:	e002      	b.n	80012e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ee:	f7ff fc09 	bl	8000b04 <HAL_GetTick>
 80012f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012f4:	e01f      	b.n	8001336 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012f6:	f7ff fc05 	bl	8000b04 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d918      	bls.n	8001336 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b01      	cmp	r3, #1
 8001310:	d011      	beq.n	8001336 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e007      	b.n	8001346 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b01      	cmp	r3, #1
 8001342:	d1d8      	bne.n	80012f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000024 	.word	0x20000024
 8001354:	431bde83 	.word	0x431bde83

08001358 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d12e      	bne.n	80013d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001382:	f7ff fbbf 	bl	8000b04 <HAL_GetTick>
 8001386:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001388:	e01b      	b.n	80013c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800138a:	f7ff fbbb 	bl	8000b04 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d914      	bls.n	80013c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10d      	bne.n	80013c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e007      	b.n	80013d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d0dc      	beq.n	800138a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADCEx_Calibration_Start+0x1e>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e097      	b.n	800152a <HAL_ADCEx_Calibration_Start+0x14e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa8 	bl	8001358 <ADC_ConversionStop_Disable>
 8001408:	4603      	mov	r3, r0
 800140a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff49 	bl	80012a4 <ADC_Enable>
 8001412:	4603      	mov	r3, r0
 8001414:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 8081 	bne.w	8001520 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <HAL_ADCEx_Calibration_Start+0x158>)
 8001434:	681c      	ldr	r4, [r3, #0]
 8001436:	2002      	movs	r0, #2
 8001438:	f001 f91e 	bl	8002678 <HAL_RCCEx_GetPeriphCLKFreq>
 800143c:	4603      	mov	r3, r0
 800143e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001442:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001444:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001446:	e002      	b.n	800144e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3b01      	subs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001464:	f7ff fb4e 	bl	8000b04 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800146a:	e01b      	b.n	80014a4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800146c:	f7ff fb4a 	bl	8000b04 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b0a      	cmp	r3, #10
 8001478:	d914      	bls.n	80014a4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00d      	beq.n	80014a4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	f023 0312 	bic.w	r3, r3, #18
 8001490:	f043 0210 	orr.w	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e042      	b.n	800152a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1dc      	bne.n	800146c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0204 	orr.w	r2, r2, #4
 80014c0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014c2:	f7ff fb1f 	bl	8000b04 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014c8:	e01b      	b.n	8001502 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014ca:	f7ff fb1b 	bl	8000b04 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b0a      	cmp	r3, #10
 80014d6:	d914      	bls.n	8001502 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	f023 0312 	bic.w	r3, r3, #18
 80014ee:	f043 0210 	orr.w	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e013      	b.n	800152a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1dc      	bne.n	80014ca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f023 0303 	bic.w	r3, r3, #3
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
}
 800152a:	4618      	mov	r0, r3
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	20000024 	.word	0x20000024

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4906      	ldr	r1, [pc, #24]	; (80015d0 <__NVIC_EnableIRQ+0x34>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff90 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff2d 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff42 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff90 	bl	8001628 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5f 	bl	80015d4 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff35 	bl	800159c <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e179      	b.n	8001a5c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001768:	2201      	movs	r2, #1
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8168 	bne.w	8001a56 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a96      	ldr	r2, [pc, #600]	; (80019e4 <HAL_GPIO_Init+0x290>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d05e      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <HAL_GPIO_Init+0x290>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d875      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 8001796:	4a94      	ldr	r2, [pc, #592]	; (80019e8 <HAL_GPIO_Init+0x294>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d058      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 800179c:	4a92      	ldr	r2, [pc, #584]	; (80019e8 <HAL_GPIO_Init+0x294>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d86f      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017a2:	4a92      	ldr	r2, [pc, #584]	; (80019ec <HAL_GPIO_Init+0x298>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d052      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017a8:	4a90      	ldr	r2, [pc, #576]	; (80019ec <HAL_GPIO_Init+0x298>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d869      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ae:	4a90      	ldr	r2, [pc, #576]	; (80019f0 <HAL_GPIO_Init+0x29c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d04c      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017b4:	4a8e      	ldr	r2, [pc, #568]	; (80019f0 <HAL_GPIO_Init+0x29c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d863      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ba:	4a8e      	ldr	r2, [pc, #568]	; (80019f4 <HAL_GPIO_Init+0x2a0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d046      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017c0:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <HAL_GPIO_Init+0x2a0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d85d      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d82a      	bhi.n	8001820 <HAL_GPIO_Init+0xcc>
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d859      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <HAL_GPIO_Init+0x80>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800184f 	.word	0x0800184f
 80017d8:	08001829 	.word	0x08001829
 80017dc:	0800183b 	.word	0x0800183b
 80017e0:	0800187d 	.word	0x0800187d
 80017e4:	08001883 	.word	0x08001883
 80017e8:	08001883 	.word	0x08001883
 80017ec:	08001883 	.word	0x08001883
 80017f0:	08001883 	.word	0x08001883
 80017f4:	08001883 	.word	0x08001883
 80017f8:	08001883 	.word	0x08001883
 80017fc:	08001883 	.word	0x08001883
 8001800:	08001883 	.word	0x08001883
 8001804:	08001883 	.word	0x08001883
 8001808:	08001883 	.word	0x08001883
 800180c:	08001883 	.word	0x08001883
 8001810:	08001883 	.word	0x08001883
 8001814:	08001883 	.word	0x08001883
 8001818:	08001831 	.word	0x08001831
 800181c:	08001845 	.word	0x08001845
 8001820:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_GPIO_Init+0x2a4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001826:	e02c      	b.n	8001882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e029      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	3304      	adds	r3, #4
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e024      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	3308      	adds	r3, #8
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e01f      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	330c      	adds	r3, #12
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e01a      	b.n	8001884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001856:	2304      	movs	r3, #4
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e013      	b.n	8001884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001864:	2308      	movs	r3, #8
 8001866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	611a      	str	r2, [r3, #16]
          break;
 800186e:	e009      	b.n	8001884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	615a      	str	r2, [r3, #20]
          break;
 800187a:	e003      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x130>
          break;
 8001882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d801      	bhi.n	800188e <HAL_GPIO_Init+0x13a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	e001      	b.n	8001892 <HAL_GPIO_Init+0x13e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d802      	bhi.n	80018a0 <HAL_GPIO_Init+0x14c>
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x152>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	3b08      	subs	r3, #8
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	210f      	movs	r1, #15
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	6a39      	ldr	r1, [r7, #32]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80c1 	beq.w	8001a56 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d4:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_GPIO_Init+0x2a8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2a8>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_GPIO_Init+0x2a8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <HAL_GPIO_Init+0x2ac>)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <HAL_GPIO_Init+0x2b0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d01f      	beq.n	8001958 <HAL_GPIO_Init+0x204>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a3b      	ldr	r2, [pc, #236]	; (8001a08 <HAL_GPIO_Init+0x2b4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d019      	beq.n	8001954 <HAL_GPIO_Init+0x200>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3a      	ldr	r2, [pc, #232]	; (8001a0c <HAL_GPIO_Init+0x2b8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_GPIO_Init+0x1fc>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a39      	ldr	r2, [pc, #228]	; (8001a10 <HAL_GPIO_Init+0x2bc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1f8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a38      	ldr	r2, [pc, #224]	; (8001a14 <HAL_GPIO_Init+0x2c0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1f4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a37      	ldr	r2, [pc, #220]	; (8001a18 <HAL_GPIO_Init+0x2c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1f0>
 8001940:	2305      	movs	r3, #5
 8001942:	e00a      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001944:	2306      	movs	r3, #6
 8001946:	e008      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001948:	2304      	movs	r3, #4
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x206>
 800194c:	2303      	movs	r3, #3
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001950:	2302      	movs	r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x206>
 8001958:	2300      	movs	r3, #0
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196a:	4925      	ldr	r1, [pc, #148]	; (8001a00 <HAL_GPIO_Init+0x2ac>)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4924      	ldr	r1, [pc, #144]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4920      	ldr	r1, [pc, #128]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 800199c:	4013      	ands	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d025      	beq.n	8001a20 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4910      	ldr	r1, [pc, #64]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e025      	b.n	8001a2e <HAL_GPIO_Init+0x2da>
 80019e2:	bf00      	nop
 80019e4:	10320000 	.word	0x10320000
 80019e8:	10310000 	.word	0x10310000
 80019ec:	10220000 	.word	0x10220000
 80019f0:	10210000 	.word	0x10210000
 80019f4:	10120000 	.word	0x10120000
 80019f8:	10110000 	.word	0x10110000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40010800 	.word	0x40010800
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40011400 	.word	0x40011400
 8001a14:	40011800 	.word	0x40011800
 8001a18:	40011c00 	.word	0x40011c00
 8001a1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_GPIO_Init+0x324>)
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <HAL_GPIO_Init+0x324>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_GPIO_Init+0x324>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_GPIO_Init+0x324>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_GPIO_Init+0x324>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4909      	ldr	r1, [pc, #36]	; (8001a78 <HAL_GPIO_Init+0x324>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f ae7e 	bne.w	8001768 <HAL_GPIO_Init+0x14>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	372c      	adds	r7, #44	; 0x2c
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	611a      	str	r2, [r3, #16]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43d9      	mvns	r1, r3
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	400b      	ands	r3, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fe0e 	bl	8000720 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b08b      	sub	sp, #44	; 0x2c
 8001b14:	af06      	add	r7, sp, #24
 8001b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0f1      	b.n	8001d06 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fef2 	bl	8000920 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2203      	movs	r2, #3
 8001b40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fe7f 	bl	800284c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	687e      	ldr	r6, [r7, #4]
 8001b56:	466d      	mov	r5, sp
 8001b58:	f106 0410 	add.w	r4, r6, #16
 8001b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	1d33      	adds	r3, r6, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f000 fe5f 	bl	800282c <USB_CoreInit>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0c2      	b.n	8001d06 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fe7a 	bl	8002880 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e040      	b.n	8001c14 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3303      	adds	r3, #3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3338      	adds	r3, #56	; 0x38
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	333c      	adds	r3, #60	; 0x3c
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3340      	adds	r3, #64	; 0x40
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	3301      	adds	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3b9      	bcc.n	8001b92 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e044      	b.n	8001cae <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	3301      	adds	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3b5      	bcc.n	8001c24 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	602b      	str	r3, [r5, #0]
 8001cce:	1d33      	adds	r3, r6, #4
 8001cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f000 fde0 	bl	8002898 <USB_DevInit>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00d      	b.n	8001d06 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fdea 	bl	80028d8 <USB_DevDisconnect>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e272      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8087 	beq.w	8001e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	4b92      	ldr	r3, [pc, #584]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d3c:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d112      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
 8001d48:	4b8c      	ldr	r3, [pc, #560]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x12c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d168      	bne.n	8001e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e24c      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x76>
 8001d78:	4b80      	ldr	r3, [pc, #512]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a7f      	ldr	r2, [pc, #508]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e02e      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7a      	ldr	r2, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b78      	ldr	r3, [pc, #480]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a77      	ldr	r2, [pc, #476]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0xbc>
 8001db2:	4b72      	ldr	r3, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a71      	ldr	r2, [pc, #452]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b6f      	ldr	r3, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6e      	ldr	r2, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xd4>
 8001dcc:	4b6b      	ldr	r3, [pc, #428]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fe8a 	bl	8000b04 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7fe fe86 	bl	8000b04 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e200      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe4>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fe76 	bl	8000b04 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fe72 	bl	8000b04 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1ec      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x10c>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d063      	beq.n	8001f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x18c>
 8001e62:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x176>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1c0      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4939      	ldr	r1, [pc, #228]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e03a      	b.n	8001f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fe2b 	bl	8000b04 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb2:	f7fe fe27 	bl	8000b04 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1a1      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
 8001ee4:	e015      	b.n	8001f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fe0a 	bl	8000b04 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fe06 	bl	8000b04 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e180      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03a      	beq.n	8001f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d019      	beq.n	8001f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7fe fdea 	bl	8000b04 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7fe fde6 	bl	8000b04 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e160      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 fabc 	bl	80024d0 <RCC_Delay>
 8001f58:	e01c      	b.n	8001f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7fe fdd0 	bl	8000b04 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7fe fdcc 	bl	8000b04 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e146      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	42420000 	.word	0x42420000
 8001f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e9      	bne.n	8001f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a6 	beq.w	80020ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa6:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10d      	bne.n	8001fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a87      	ldr	r2, [pc, #540]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]
 8001fbe:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b7f      	ldr	r3, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7e      	ldr	r2, [pc, #504]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fd8d 	bl	8000b04 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7fe fd89 	bl	8000b04 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e103      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b75      	ldr	r3, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x4c8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x312>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	e02d      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x334>
 800202a:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a66      	ldr	r2, [pc, #408]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	e01c      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x356>
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a60      	ldr	r2, [pc, #384]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0x36e>
 8002066:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a5a      	ldr	r2, [pc, #360]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	4b58      	ldr	r3, [pc, #352]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d015      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7fe fd3d 	bl	8000b04 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fd39 	bl	8000b04 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0b1      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ee      	beq.n	800208e <HAL_RCC_OscConfig+0x37e>
 80020b0:	e014      	b.n	80020dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fd27 	bl	8000b04 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fd23 	bl	8000b04 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e09b      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d061      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d146      	bne.n	800219a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fcf7 	bl	8000b04 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fcf3 	bl	8000b04 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e06d      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d108      	bne.n	8002154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4921      	ldr	r1, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a19      	ldr	r1, [r3, #32]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	430b      	orrs	r3, r1
 8002166:	491b      	ldr	r1, [pc, #108]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe fcc7 	bl	8000b04 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe fcc3 	bl	8000b04 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e03d      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x46a>
 8002198:	e035      	b.n	8002206 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_OscConfig+0x4cc>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fcb0 	bl	8000b04 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe fcac 	bl	8000b04 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e026      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x498>
 80021c6:	e01e      	b.n	8002206 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e019      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_OscConfig+0x500>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0d0      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d910      	bls.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4965      	ldr	r1, [pc, #404]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0b8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002288:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d040      	beq.n	8002334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d115      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07f      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e073      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 0203 	bic.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4936      	ldr	r1, [pc, #216]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002304:	f7fe fbfe 	bl	8000b04 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	e00a      	b.n	8002322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230c:	f7fe fbfa 	bl	8000b04 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e053      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 020c 	and.w	r2, r3, #12
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d1eb      	bne.n	800230c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d210      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4922      	ldr	r1, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e032      	b.n	80023ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a2:	f000 f821 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490a      	ldr	r1, [pc, #40]	; (80023dc <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1cc>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1d0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fb5c 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	0800295c 	.word	0x0800295c
 80023e0:	20000024 	.word	0x20000024
 80023e4:	20000028 	.word	0x20000028

080023e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCC_GetSysClockFreq+0x94>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x30>
 8002412:	2b08      	cmp	r3, #8
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x36>
 8002416:	e027      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	613b      	str	r3, [r7, #16]
      break;
 800241c:	e027      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_GetSysClockFreq+0x94>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0c5b      	lsrs	r3, r3, #17
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002442:	5cd3      	ldrb	r3, [r2, r3]
 8002444:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_RCC_GetSysClockFreq+0x98>)
 800244a:	fb03 f202 	mul.w	r2, r3, r2
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e004      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_RCC_GetSysClockFreq+0xa4>)
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	613b      	str	r3, [r7, #16]
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_GetSysClockFreq+0xa8>)
 800246a:	613b      	str	r3, [r7, #16]
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	693b      	ldr	r3, [r7, #16]
}
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	00b71b00 	.word	0x00b71b00
 8002484:	08002974 	.word	0x08002974
 8002488:	08002984 	.word	0x08002984
 800248c:	003d0900 	.word	0x003d0900
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	20000024 	.word	0x20000024

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff fff2 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	0800296c 	.word	0x0800296c

080024d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <RCC_Delay+0x34>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <RCC_Delay+0x38>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024ec:	bf00      	nop
  }
  while (Delay --);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	60fa      	str	r2, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <RCC_Delay+0x1c>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000024 	.word	0x20000024
 8002508:	10624dd3 	.word	0x10624dd3

0800250c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d07d      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252c:	4b4f      	ldr	r3, [pc, #316]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10d      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4a4b      	ldr	r2, [pc, #300]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	61d3      	str	r3, [r2, #28]
 8002544:	4b49      	ldr	r3, [pc, #292]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d118      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256c:	f7fe faca 	bl	8000b04 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	e008      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7fe fac6 	bl	8000b04 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e06d      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02e      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d027      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025c6:	4a29      	ldr	r2, [pc, #164]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d014      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fa95 	bl	8000b04 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe fa91 	bl	8000b04 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e036      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ee      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4917      	ldr	r1, [pc, #92]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	4313      	orrs	r3, r2
 8002610:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	490b      	ldr	r1, [pc, #44]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
 8002674:	42420440 	.word	0x42420440

08002678 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	2b0f      	cmp	r3, #15
 800269a:	f200 80ae 	bhi.w	80027fa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	0800277b 	.word	0x0800277b
 80026a8:	080027df 	.word	0x080027df
 80026ac:	080027fb 	.word	0x080027fb
 80026b0:	0800276b 	.word	0x0800276b
 80026b4:	080027fb 	.word	0x080027fb
 80026b8:	080027fb 	.word	0x080027fb
 80026bc:	080027fb 	.word	0x080027fb
 80026c0:	08002773 	.word	0x08002773
 80026c4:	080027fb 	.word	0x080027fb
 80026c8:	080027fb 	.word	0x080027fb
 80026cc:	080027fb 	.word	0x080027fb
 80026d0:	080027fb 	.word	0x080027fb
 80026d4:	080027fb 	.word	0x080027fb
 80026d8:	080027fb 	.word	0x080027fb
 80026dc:	080027fb 	.word	0x080027fb
 80026e0:	080026e5 	.word	0x080026e5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80026e4:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8083 	beq.w	80027fe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	0c9b      	lsrs	r3, r3, #18
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4a44      	ldr	r2, [pc, #272]	; (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c5b      	lsrs	r3, r3, #17
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800272a:	4a3c      	ldr	r2, [pc, #240]	; (800281c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4a38      	ldr	r2, [pc, #224]	; (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002752:	d102      	bne.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002758:	e051      	b.n	80027fe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
      break;
 8002768:	e049      	b.n	80027fe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800276a:	f7ff fe3d 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 800276e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002770:	e048      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002772:	f7ff fe39 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8002776:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002778:	e044      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278a:	d108      	bne.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e01e      	b.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a8:	d109      	bne.n	80027be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80027b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e00e      	b.n	80027dc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c8:	d11b      	bne.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 80027d8:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80027da:	e012      	b.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80027dc:	e011      	b.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027de:	f7ff fe63 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0b9b      	lsrs	r3, r3, #14
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	3301      	adds	r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	61bb      	str	r3, [r7, #24]
      break;
 80027f8:	e004      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 80027fa:	bf00      	nop
 80027fc:	e002      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8002802:	bf00      	nop
    }
  }
  return (frequency);
 8002804:	69bb      	ldr	r3, [r7, #24]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	08002988 	.word	0x08002988
 8002818:	08002998 	.word	0x08002998
 800281c:	00b71b00 	.word	0x00b71b00
 8002820:	003d0900 	.word	0x003d0900
 8002824:	aaaaaaab 	.word	0xaaaaaaab
 8002828:	00016e36 	.word	0x00016e36

0800282c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800282c:	b084      	sub	sp, #16
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	f107 0014 	add.w	r0, r7, #20
 800283a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	b004      	add	sp, #16
 800284a:	4770      	bx	lr

0800284c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002854:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002858:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	b29b      	uxth	r3, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	4013      	ands	r3, r2
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002898:	b084      	sub	sp, #16
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	f107 0014 	add.w	r0, r7, #20
 80028a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	b004      	add	sp, #16
 80028d6:	4770      	bx	lr

080028d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2600      	movs	r6, #0
 80028f0:	4d0c      	ldr	r5, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	f000 f822 	bl	8002944 <_init>
 8002900:	2600      	movs	r6, #0
 8002902:	4d0a      	ldr	r5, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f855 3b04 	ldr.w	r3, [r5], #4
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	f855 3b04 	ldr.w	r3, [r5], #4
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	0800299c 	.word	0x0800299c
 8002928:	0800299c 	.word	0x0800299c
 800292c:	0800299c 	.word	0x0800299c
 8002930:	080029a0 	.word	0x080029a0

08002934 <memset>:
 8002934:	4603      	mov	r3, r0
 8002936:	4402      	add	r2, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	f803 1b01 	strb.w	r1, [r3], #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <_init>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr

08002950 <_fini>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr
