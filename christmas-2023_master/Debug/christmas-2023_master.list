
christmas-2023_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000433c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004598  08004598  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004598  08004598  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004598  08004598  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000000c  080045ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080045ac  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdd0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002580  00000000  00000000  0002ce05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac26  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f081  00000000  00000000  0004b616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e62  00000000  00000000  0005a697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f04f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  000f054c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004508 	.word	0x08004508

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004508 	.word	0x08004508

08000224 <HAL_I2S_TxCpltCallback>:
volatile uint16_t* signal_play_buff = NULL;
volatile uint16_t* signal_read_buff = NULL;
volatile uint16_t signal_buff1[4096];
volatile uint16_t signal_buff2[4096];

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if(end_of_file_reached)
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <HAL_I2S_TxCpltCallback+0x4c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d118      	bne.n	8000268 <HAL_I2S_TxCpltCallback+0x44>
        return;

    volatile uint16_t* temp = signal_play_buff;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	60fb      	str	r3, [r7, #12]
    signal_play_buff = signal_read_buff;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000242:	6013      	str	r3, [r2, #0]
    signal_read_buff = temp;
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6013      	str	r3, [r2, #0]

    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	60bb      	str	r3, [r7, #8]
    HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_play_buff, nsamples);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	b292      	uxth	r2, r2
 8000258:	4619      	mov	r1, r3
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_I2S_TxCpltCallback+0x58>)
 800025c:	f000 fed4 	bl	8001008 <HAL_I2S_Transmit_IT>
    read_next_chunk = true;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <HAL_I2S_TxCpltCallback+0x5c>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e000      	b.n	800026a <HAL_I2S_TxCpltCallback+0x46>
        return;
 8000268:	bf00      	nop
}
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000318 	.word	0x20000318
 8000274:	2000031c 	.word	0x2000031c
 8000278:	20000320 	.word	0x20000320
 800027c:	20000028 	.word	0x20000028
 8000280:	20000319 	.word	0x20000319

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028a:	f000 fa7f 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f81d 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f8bf 	bl	8000414 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000296:	f000 f89d 	bl	80003d4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800029a:	f003 fa37 	bl	800370c <MX_FATFS_Init>
  MX_I2S2_Init();
 800029e:	f000 f871 	bl	8000384 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  FRESULT res = f_mount(&fs, "XMAS-23", 1);
 80002a2:	2201      	movs	r2, #1
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <main+0x40>)
 80002a6:	4808      	ldr	r0, [pc, #32]	; (80002c8 <main+0x44>)
 80002a8:	f003 ff72 	bl	8004190 <f_mount>
 80002ac:	4603      	mov	r3, r0
 80002ae:	71fb      	strb	r3, [r7, #7]
	 if(res != FR_OK) {
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0x36>
	   return EXIT_FAILURE;
 80002b6:	2301      	movs	r3, #1
 80002b8:	e000      	b.n	80002bc <main+0x38>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <main+0x36>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800453c 	.word	0x0800453c
 80002c8:	200000e8 	.word	0x200000e8

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 f90c 	bl	80044f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 031c 	add.w	r3, r7, #28
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]
 80002fe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000300:	2301      	movs	r3, #1
 8000302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000308:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800031c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000320:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000326:	4618      	mov	r0, r3
 8000328:	f000 ffb6 	bl	8001298 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000332:	f000 f8f3 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2302      	movs	r3, #2
 800033c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034c:	f107 031c 	add.w	r3, r7, #28
 8000350:	2101      	movs	r1, #1
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fa22 	bl	800179c <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800035e:	f000 f8dd 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8000362:	2304      	movs	r3, #4
 8000364:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f001 fb91 	bl	8001a94 <HAL_RCCEx_PeriphCLKConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000378:	f000 f8d0 	bl	800051c <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3758      	adds	r7, #88	; 0x58
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_I2S2_Init+0x48>)
 800038a:	4a11      	ldr	r2, [pc, #68]	; (80003d0 <MX_I2S2_Init+0x4c>)
 800038c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_I2S2_Init+0x48>)
 8000390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000394:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <MX_I2S2_Init+0x48>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_I2S2_Init+0x48>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_I2S2_Init+0x48>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_I2S2_Init+0x48>)
 80003aa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80003ae:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_I2S2_Init+0x48>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_I2S2_Init+0x48>)
 80003b8:	f000 fd40 	bl	8000e3c <HAL_I2S_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80003c2:	f000 f8ab 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000028 	.word	0x20000028
 80003d0:	40003800 	.word	0x40003800

080003d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <MX_SDIO_SD_Init+0x3c>)
 80003dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <MX_SDIO_SD_Init+0x38>)
 80003fe:	2204      	movs	r2, #4
 8000400:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000064 	.word	0x20000064
 8000410:	40018000 	.word	0x40018000

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b39      	ldr	r3, [pc, #228]	; (8000510 <MX_GPIO_Init+0xfc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a38      	ldr	r2, [pc, #224]	; (8000510 <MX_GPIO_Init+0xfc>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b36      	ldr	r3, [pc, #216]	; (8000510 <MX_GPIO_Init+0xfc>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b33      	ldr	r3, [pc, #204]	; (8000510 <MX_GPIO_Init+0xfc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a32      	ldr	r2, [pc, #200]	; (8000510 <MX_GPIO_Init+0xfc>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b30      	ldr	r3, [pc, #192]	; (8000510 <MX_GPIO_Init+0xfc>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_GPIO_Init+0xfc>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a2c      	ldr	r2, [pc, #176]	; (8000510 <MX_GPIO_Init+0xfc>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <MX_GPIO_Init+0xfc>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <MX_GPIO_Init+0xfc>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a26      	ldr	r2, [pc, #152]	; (8000510 <MX_GPIO_Init+0xfc>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <MX_GPIO_Init+0xfc>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2S_AMP_SD_GPIO_Port, I2S_AMP_SD_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2104      	movs	r1, #4
 800048c:	4821      	ldr	r0, [pc, #132]	; (8000514 <MX_GPIO_Init+0x100>)
 800048e:	f000 fcbc 	bl	8000e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2120      	movs	r1, #32
 8000496:	4820      	ldr	r0, [pc, #128]	; (8000518 <MX_GPIO_Init+0x104>)
 8000498:	f000 fcb7 	bl	8000e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2S_AMP_SD_Pin */
  GPIO_InitStruct.Pin = I2S_AMP_SD_Pin;
 800049c:	2304      	movs	r3, #4
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2302      	movs	r3, #2
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S_AMP_SD_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4818      	ldr	r0, [pc, #96]	; (8000514 <MX_GPIO_Init+0x100>)
 80004b4:	f000 fafe 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 80004b8:	2320      	movs	r3, #32
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2302      	movs	r3, #2
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4812      	ldr	r0, [pc, #72]	; (8000518 <MX_GPIO_Init+0x104>)
 80004d0:	f000 faf0 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <MX_GPIO_Init+0x104>)
 80004e8:	f000 fae4 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_FAKE_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_FAKE_Pin;
 80004ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CD_FAKE_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <MX_GPIO_Init+0x100>)
 8000502:	f000 fad7 	bl	8000ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800
 8000518:	40011000 	.word	0x40011000

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <HAL_I2S_MspInit+0x84>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d12c      	bne.n	8000606 <HAL_I2S_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_I2S_MspInit+0x88>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	4a18      	ldr	r2, [pc, #96]	; (8000614 <HAL_I2S_MspInit+0x88>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	61d3      	str	r3, [r2, #28]
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_I2S_MspInit+0x88>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_I2S_MspInit+0x88>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <HAL_I2S_MspInit+0x88>)
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <HAL_I2S_MspInit+0x88>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005dc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80005e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <HAL_I2S_MspInit+0x8c>)
 80005f2:	f000 fa5f 	bl	8000ab4 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	2024      	movs	r0, #36	; 0x24
 80005fc:	f000 fa23 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000600:	2024      	movs	r0, #36	; 0x24
 8000602:	f000 fa3c 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000606:	bf00      	nop
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40003800 	.word	0x40003800
 8000614:	40021000 	.word	0x40021000
 8000618:	40010c00 	.word	0x40010c00

0800061c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <HAL_SD_MspInit+0xa4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d13c      	bne.n	80006b6 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 8000642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_SD_MspInit+0xa8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000684:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_SD_MspInit+0xac>)
 800069a:	f000 fa0b 	bl	8000ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800069e:	2304      	movs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4619      	mov	r1, r3
 80006b0:	4806      	ldr	r0, [pc, #24]	; (80006cc <HAL_SD_MspInit+0xb0>)
 80006b2:	f000 f9ff 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	; 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40018000 	.word	0x40018000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40011400 	.word	0x40011400

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000716:	f000 f87f 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <SPI2_IRQHandler+0x10>)
 8000726:	f000 fcdf 	bl	80010e8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028

08000734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff fff8 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000746:	490c      	ldr	r1, [pc, #48]	; (8000778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <LoopFillZerobss+0x16>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800075c:	4c09      	ldr	r4, [pc, #36]	; (8000784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f003 fea1 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fd89 	bl	8000284 <main>
  bx lr
 8000772:	4770      	bx	lr
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800077c:	080045a0 	.word	0x080045a0
  ldr r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000784:	2000035c 	.word	0x2000035c

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_Init+0x28>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_Init+0x28>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f947 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 f808 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a8:	f7ff febe 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40022000 	.word	0x40022000

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x54>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x58>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f95f 	bl	8000a9a <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00e      	b.n	8000804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d80a      	bhi.n	8000802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f000 f927 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_InitTick+0x5c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	20000008 	.word	0x20000008
 8000814:	20000004 	.word	0x20000004

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x1c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_IncTick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <HAL_IncTick+0x20>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	20000008 	.word	0x20000008
 8000838:	20000324 	.word	0x20000324

0800083c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <HAL_GetTick+0x10>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000324 	.word	0x20000324

08000850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff fff0 	bl	800083c <HAL_GetTick>
 800085c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_Delay+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000876:	bf00      	nop
 8000878:	f7ff ffe0 	bl	800083c <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000008 	.word	0x20000008

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <__NVIC_EnableIRQ+0x34>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff90 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff2d 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff42 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff90 	bl	8000988 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5f 	bl	8000934 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff35 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b08b      	sub	sp, #44	; 0x2c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	e179      	b.n	8000dbc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	f040 8168 	bne.w	8000db6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x290>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d05e      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000af0:	4a94      	ldr	r2, [pc, #592]	; (8000d44 <HAL_GPIO_Init+0x290>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d875      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000af6:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x294>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d058      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000afc:	4a92      	ldr	r2, [pc, #584]	; (8000d48 <HAL_GPIO_Init+0x294>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d86f      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b02:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x298>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d052      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b08:	4a90      	ldr	r2, [pc, #576]	; (8000d4c <HAL_GPIO_Init+0x298>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d869      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b0e:	4a90      	ldr	r2, [pc, #576]	; (8000d50 <HAL_GPIO_Init+0x29c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d04c      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b14:	4a8e      	ldr	r2, [pc, #568]	; (8000d50 <HAL_GPIO_Init+0x29c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d863      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a8e      	ldr	r2, [pc, #568]	; (8000d54 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d046      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
 8000b20:	4a8c      	ldr	r2, [pc, #560]	; (8000d54 <HAL_GPIO_Init+0x2a0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d85d      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b26:	2b12      	cmp	r3, #18
 8000b28:	d82a      	bhi.n	8000b80 <HAL_GPIO_Init+0xcc>
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d859      	bhi.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000b2e:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <HAL_GPIO_Init+0x80>)
 8000b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000b89 	.word	0x08000b89
 8000b3c:	08000b9b 	.word	0x08000b9b
 8000b40:	08000bdd 	.word	0x08000bdd
 8000b44:	08000be3 	.word	0x08000be3
 8000b48:	08000be3 	.word	0x08000be3
 8000b4c:	08000be3 	.word	0x08000be3
 8000b50:	08000be3 	.word	0x08000be3
 8000b54:	08000be3 	.word	0x08000be3
 8000b58:	08000be3 	.word	0x08000be3
 8000b5c:	08000be3 	.word	0x08000be3
 8000b60:	08000be3 	.word	0x08000be3
 8000b64:	08000be3 	.word	0x08000be3
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000be3 	.word	0x08000be3
 8000b70:	08000be3 	.word	0x08000be3
 8000b74:	08000be3 	.word	0x08000be3
 8000b78:	08000b91 	.word	0x08000b91
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	4a75      	ldr	r2, [pc, #468]	; (8000d58 <HAL_GPIO_Init+0x2a4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b86:	e02c      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e029      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e024      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e01f      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	330c      	adds	r3, #12
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e01a      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e013      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d105      	bne.n	8000bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	611a      	str	r2, [r3, #16]
          break;
 8000bce:	e009      	b.n	8000be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	615a      	str	r2, [r3, #20]
          break;
 8000bda:	e003      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x130>
          break;
 8000be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d801      	bhi.n	8000bee <HAL_GPIO_Init+0x13a>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	e001      	b.n	8000bf2 <HAL_GPIO_Init+0x13e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2bff      	cmp	r3, #255	; 0xff
 8000bf8:	d802      	bhi.n	8000c00 <HAL_GPIO_Init+0x14c>
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x152>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	3b08      	subs	r3, #8
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	6a39      	ldr	r1, [r7, #32]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80c1 	beq.w	8000db6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c34:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <HAL_GPIO_Init+0x2a8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c4c:	4a44      	ldr	r2, [pc, #272]	; (8000d60 <HAL_GPIO_Init+0x2ac>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3c      	ldr	r2, [pc, #240]	; (8000d64 <HAL_GPIO_Init+0x2b0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d01f      	beq.n	8000cb8 <HAL_GPIO_Init+0x204>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3b      	ldr	r2, [pc, #236]	; (8000d68 <HAL_GPIO_Init+0x2b4>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d019      	beq.n	8000cb4 <HAL_GPIO_Init+0x200>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <HAL_GPIO_Init+0x2b8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d013      	beq.n	8000cb0 <HAL_GPIO_Init+0x1fc>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a39      	ldr	r2, [pc, #228]	; (8000d70 <HAL_GPIO_Init+0x2bc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d00d      	beq.n	8000cac <HAL_GPIO_Init+0x1f8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a38      	ldr	r2, [pc, #224]	; (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d007      	beq.n	8000ca8 <HAL_GPIO_Init+0x1f4>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a37      	ldr	r2, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d101      	bne.n	8000ca4 <HAL_GPIO_Init+0x1f0>
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	e00a      	b.n	8000cba <HAL_GPIO_Init+0x206>
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	e008      	b.n	8000cba <HAL_GPIO_Init+0x206>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	e006      	b.n	8000cba <HAL_GPIO_Init+0x206>
 8000cac:	2303      	movs	r3, #3
 8000cae:	e004      	b.n	8000cba <HAL_GPIO_Init+0x206>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x206>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x206>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbc:	f002 0203 	and.w	r2, r2, #3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cca:	4925      	ldr	r1, [pc, #148]	; (8000d60 <HAL_GPIO_Init+0x2ac>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce4:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	4924      	ldr	r1, [pc, #144]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4920      	ldr	r1, [pc, #128]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	491a      	ldr	r1, [pc, #104]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60cb      	str	r3, [r1, #12]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4916      	ldr	r1, [pc, #88]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d025      	beq.n	8000d80 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4910      	ldr	r1, [pc, #64]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 8000d40:	e025      	b.n	8000d8e <HAL_GPIO_Init+0x2da>
 8000d42:	bf00      	nop
 8000d44:	10320000 	.word	0x10320000
 8000d48:	10310000 	.word	0x10310000
 8000d4c:	10220000 	.word	0x10220000
 8000d50:	10210000 	.word	0x10210000
 8000d54:	10120000 	.word	0x10120000
 8000d58:	10110000 	.word	0x10110000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40011400 	.word	0x40011400
 8000d74:	40011800 	.word	0x40011800
 8000d78:	40011c00 	.word	0x40011c00
 8000d7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
 8000da6:	e006      	b.n	8000db6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4909      	ldr	r1, [pc, #36]	; (8000dd8 <HAL_GPIO_Init+0x324>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	3301      	adds	r3, #1
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f47f ae7e 	bne.w	8000ac8 <HAL_GPIO_Init+0x14>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	372c      	adds	r7, #44	; 0x2c
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40010400 	.word	0x40010400

08000ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e001      	b.n	8000dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	807b      	strh	r3, [r7, #2]
 8000e16:	4613      	mov	r3, r2
 8000e18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e1a:	787b      	ldrb	r3, [r7, #1]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e20:	887a      	ldrh	r2, [r7, #2]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e26:	e003      	b.n	8000e30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e28:	887b      	ldrh	r3, [r7, #2]
 8000e2a:	041a      	lsls	r2, r3, #16
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e0d2      	b.n	8000ff4 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fb92 	bl	800058c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000e7e:	f023 030f 	bic.w	r3, r3, #15
 8000e82:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d073      	beq.n	8000f7c <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e001      	b.n	8000ea6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b20      	cmp	r3, #32
 8000eac:	d802      	bhi.n	8000eb4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a50      	ldr	r2, [pc, #320]	; (8000ffc <HAL_I2S_Init+0x1c0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d104      	bne.n	8000ec8 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8000ebe:	2004      	movs	r0, #4
 8000ec0:	f000 fe9e 	bl	8001c00 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	e00c      	b.n	8000ee2 <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a4c      	ldr	r2, [pc, #304]	; (8001000 <HAL_I2S_Init+0x1c4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d104      	bne.n	8000edc <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 8000ed2:	2008      	movs	r0, #8
 8000ed4:	f000 fe94 	bl	8001c00 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	e002      	b.n	8000ee2 <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 8000edc:	f000 fd48 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8000ee0:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eea:	d125      	bne.n	8000f38 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d010      	beq.n	8000f16 <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	3305      	adds	r3, #5
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	e01f      	b.n	8000f56 <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	461a      	mov	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	3305      	adds	r3, #5
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e00e      	b.n	8000f56 <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	3305      	adds	r3, #5
 8000f54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <HAL_I2S_Init+0x1c8>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	e003      	b.n	8000f84 <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d902      	bls.n	8000f90 <HAL_I2S_Init+0x154>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d907      	bls.n	8000fa0 <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f94:	f043 0210 	orr.w	r2, r3, #16
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e029      	b.n	8000ff4 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	ea42 0103 	orr.w	r1, r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000fbe:	f023 030f 	bic.w	r3, r3, #15
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6851      	ldr	r1, [r2, #4]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6892      	ldr	r2, [r2, #8]
 8000fca:	4311      	orrs	r1, r2
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68d2      	ldr	r2, [r2, #12]
 8000fd0:	4311      	orrs	r1, r2
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6992      	ldr	r2, [r2, #24]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fe2:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40003800 	.word	0x40003800
 8001000:	40003c00 	.word	0x40003c00
 8001004:	cccccccd 	.word	0xcccccccd

08001008 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <HAL_I2S_Transmit_IT+0x1a>
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e05b      	b.n	80010de <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_I2S_Transmit_IT+0x2e>
 8001032:	2302      	movs	r3, #2
 8001034:	e053      	b.n	80010de <HAL_I2S_Transmit_IT+0xd6>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8001052:	2302      	movs	r3, #2
 8001054:	e043      	b.n	80010de <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d002      	beq.n	8001082 <HAL_I2S_Transmit_IT+0x7a>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d10a      	bne.n	8001098 <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b29a      	uxth	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	845a      	strh	r2, [r3, #34]	; 0x22
 8001096:	e005      	b.n	80010a4 <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	88fa      	ldrh	r2, [r7, #6]
 800109c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	88fa      	ldrh	r2, [r7, #6]
 80010a2:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80010b2:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c2:	d007      	beq.n	80010d4 <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	69da      	ldr	r2, [r3, #28]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010d2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	099b      	lsrs	r3, r3, #6
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10e      	bne.n	800112a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	099b      	lsrs	r3, r3, #6
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f889 	bl	800123a <I2S_Receive_IT>
    return;
 8001128:	e044      	b.n	80011b4 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_I2S_IRQHandler+0x62>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	09db      	lsrs	r3, r3, #7
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f84b 	bl	80011de <I2S_Transmit_IT>
    return;
 8001148:	e034      	b.n	80011b4 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d02e      	beq.n	80011b4 <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	099b      	lsrs	r3, r3, #6
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00d      	beq.n	800117e <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001170:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	f043 0202 	orr.w	r2, r3, #2
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00d      	beq.n	80011a6 <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001198:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	f043 0204 	orr.w	r2, r3, #4
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f80c 	bl	80011cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	1c9a      	adds	r2, r3, #2
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001200:	b29b      	uxth	r3, r3
 8001202:	3b01      	subs	r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800120e:	b29b      	uxth	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10e      	bne.n	8001232 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001222:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7fe fff9 	bl	8000224 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124c:	b292      	uxth	r2, r2
 800124e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	1c9a      	adds	r2, r3, #2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126c:	b29b      	uxth	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10e      	bne.n	8001290 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001280:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ff95 	bl	80011ba <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e272      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8087 	beq.w	80013c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b8:	4b92      	ldr	r3, [pc, #584]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d00c      	beq.n	80012de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c4:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d112      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
 80012d0:	4b8c      	ldr	r3, [pc, #560]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d10b      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d06c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x12c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d168      	bne.n	80013c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e24c      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x76>
 8001300:	4b80      	ldr	r3, [pc, #512]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a7f      	ldr	r2, [pc, #508]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e02e      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b7b      	ldr	r3, [pc, #492]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7a      	ldr	r2, [pc, #488]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b78      	ldr	r3, [pc, #480]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a77      	ldr	r2, [pc, #476]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0xbc>
 800133a:	4b72      	ldr	r3, [pc, #456]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a71      	ldr	r2, [pc, #452]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6e      	ldr	r2, [pc, #440]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xd4>
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6a      	ldr	r2, [pc, #424]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b68      	ldr	r3, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a67      	ldr	r2, [pc, #412]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fa62 	bl	800083c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fa5e 	bl	800083c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e200      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xe4>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fa4e 	bl	800083c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fa4a 	bl	800083c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1ec      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x10c>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c0      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4939      	ldr	r1, [pc, #228]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fa03 	bl	800083c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff f9ff 	bl	800083c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a1      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4927      	ldr	r1, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x270>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff f9e2 	bl	800083c <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff f9de 	bl	800083c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e180      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03a      	beq.n	800151c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d019      	beq.n	80014e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_RCC_OscConfig+0x274>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b4:	f7ff f9c2 	bl	800083c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff f9be 	bl	800083c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e160      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f000 fabc 	bl	8001a58 <RCC_Delay>
 80014e0:	e01c      	b.n	800151c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RCC_OscConfig+0x274>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff f9a8 	bl	800083c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	e00f      	b.n	8001510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff f9a4 	bl	800083c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d908      	bls.n	8001510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e146      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	42420000 	.word	0x42420000
 800150c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b92      	ldr	r3, [pc, #584]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e9      	bne.n	80014f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a6 	beq.w	8001676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a87      	ldr	r2, [pc, #540]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b85      	ldr	r3, [pc, #532]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x4c8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff f965 	bl	800083c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff f961 	bl	800083c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e103      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x4c8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x312>
 800159c:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015b2:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a69      	ldr	r2, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x356>
 80015d4:	4b61      	ldr	r3, [pc, #388]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a60      	ldr	r2, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a5d      	ldr	r2, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x36e>
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a5a      	ldr	r2, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b58      	ldr	r3, [pc, #352]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a57      	ldr	r2, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff f915 	bl	800083c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff f911 	bl	800083c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0b1      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x37e>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff f8ff 	bl	800083c <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff f8fb 	bl	800083c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e09b      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8087 	beq.w	800178e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d061      	beq.n	8001750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d146      	bne.n	8001722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <HAL_RCC_OscConfig+0x4cc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff f8cf 	bl	800083c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff f8cb 	bl	800083c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e06d      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4921      	ldr	r1, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a19      	ldr	r1, [r3, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	430b      	orrs	r3, r1
 80016ee:	491b      	ldr	r1, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x4cc>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff f89f 	bl	800083c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff f89b 	bl	800083c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e03d      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x46a>
 8001720:	e035      	b.n	800178e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff f888 	bl	800083c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff f884 	bl	800083c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e026      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_RCC_OscConfig+0x4c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x498>
 800174e:	e01e      	b.n	800178e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e019      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x500>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	429a      	cmp	r2, r3
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0d0      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b6a      	ldr	r3, [pc, #424]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d910      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	4965      	ldr	r1, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800181a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d040      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d115      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e073      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06b      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4936      	ldr	r1, [pc, #216]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7fe ffd6 	bl	800083c <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7fe ffd2 	bl	800083c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e053      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d210      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 0207 	bic.w	r2, r3, #7
 80018d2:	4922      	ldr	r1, [pc, #136]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4602      	mov	r2, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	490a      	ldr	r1, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	5ccb      	ldrb	r3, [r1, r3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1cc>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1d0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe ff34 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	08004544 	.word	0x08004544
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	2b04      	cmp	r3, #4
 8001998:	d002      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x30>
 800199a:	2b08      	cmp	r3, #8
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x36>
 800199e:	e027      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019a2:	613b      	str	r3, [r7, #16]
      break;
 80019a4:	e027      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0c9b      	lsrs	r3, r3, #18
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0c5b      	lsrs	r3, r3, #17
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e004      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	613b      	str	r3, [r7, #16]
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xa8>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f6:	693b      	ldr	r3, [r7, #16]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	00b71b00 	.word	0x00b71b00
 8001a0c:	0800455c 	.word	0x0800455c
 8001a10:	0800456c 	.word	0x0800456c
 8001a14:	003d0900 	.word	0x003d0900
 8001a18:	007a1200 	.word	0x007a1200

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff fff2 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0adb      	lsrs	r3, r3, #11
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08004554 	.word	0x08004554

08001a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <RCC_Delay+0x34>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <RCC_Delay+0x38>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0a5b      	lsrs	r3, r3, #9
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a74:	bf00      	nop
  }
  while (Delay --);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1e5a      	subs	r2, r3, #1
 8001a7a:	60fa      	str	r2, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f9      	bne.n	8001a74 <RCC_Delay+0x1c>
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	10624dd3 	.word	0x10624dd3

08001a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d07d      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	61d3      	str	r3, [r2, #28]
 8001acc:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d118      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af4:	f7fe fea2 	bl	800083c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	e008      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afc:	f7fe fe9e 	bl	800083c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e06d      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d02e      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d027      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b4e:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d014      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fe6d 	bl	800083c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7fe fe69 	bl	800083c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e036      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0ee      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4917      	ldr	r1, [pc, #92]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	490b      	ldr	r1, [pc, #44]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42420440 	.word	0x42420440

08001c00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	f200 80ae 	bhi.w	8001d82 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001d03 	.word	0x08001d03
 8001c30:	08001d67 	.word	0x08001d67
 8001c34:	08001d83 	.word	0x08001d83
 8001c38:	08001cf3 	.word	0x08001cf3
 8001c3c:	08001d83 	.word	0x08001d83
 8001c40:	08001d83 	.word	0x08001d83
 8001c44:	08001d83 	.word	0x08001d83
 8001c48:	08001cfb 	.word	0x08001cfb
 8001c4c:	08001d83 	.word	0x08001d83
 8001c50:	08001d83 	.word	0x08001d83
 8001c54:	08001d83 	.word	0x08001d83
 8001c58:	08001d83 	.word	0x08001d83
 8001c5c:	08001d83 	.word	0x08001d83
 8001c60:	08001d83 	.word	0x08001d83
 8001c64:	08001d83 	.word	0x08001d83
 8001c68:	08001c6d 	.word	0x08001c6d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001c6c:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001c72:	4b49      	ldr	r3, [pc, #292]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8083 	beq.w	8001d86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c98:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0c5b      	lsrs	r3, r3, #17
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	4a3f      	ldr	r2, [pc, #252]	; (8001da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001cb2:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e004      	b.n	8001cce <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001cce:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cda:	d102      	bne.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8001ce0:	e051      	b.n	8001d86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4a31      	ldr	r2, [pc, #196]	; (8001dac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
      break;
 8001cf0:	e049      	b.n	8001d86 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8001cf2:	f7ff fe3d 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001cf6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8001cf8:	e048      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8001cfa:	f7ff fe39 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001cfe:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8001d00:	e044      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	d108      	bne.n	8001d26 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8001d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	e01e      	b.n	8001d64 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d109      	bne.n	8001d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8001d3e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e00e      	b.n	8001d64 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d50:	d11b      	bne.n	8001d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8001d60:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8001d62:	e012      	b.n	8001d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8001d64:	e011      	b.n	8001d8a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d66:	f7ff fe63 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0b9b      	lsrs	r3, r3, #14
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	3301      	adds	r3, #1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	61bb      	str	r3, [r7, #24]
      break;
 8001d80:	e004      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 8001d82:	bf00      	nop
 8001d84:	e002      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8001d86:	bf00      	nop
 8001d88:	e000      	b.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8001d8a:	bf00      	nop
    }
  }
  return (frequency);
 8001d8c:	69bb      	ldr	r3, [r7, #24]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004570 	.word	0x08004570
 8001da0:	08004580 	.word	0x08004580
 8001da4:	00b71b00 	.word	0x00b71b00
 8001da8:	003d0900 	.word	0x003d0900
 8001dac:	aaaaaaab 	.word	0xaaaaaaab
 8001db0:	00016e36 	.word	0x00016e36

08001db4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e022      	b.n	8001e0c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7fe fc1f 	bl	800061c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f814 	bl	8001e14 <HAL_SD_InitCard>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00a      	b.n	8001e0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af04      	add	r7, sp, #16
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001e30:	2376      	movs	r3, #118	; 0x76
 8001e32:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681d      	ldr	r5, [r3, #0]
 8001e38:	466c      	mov	r4, sp
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	f000 ff39 	bl	8002cc4 <SDIO_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e04f      	b.n	8001f04 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_SD_InitCard+0xf8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 ff6e 	bl	8002d50 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <HAL_SD_InitCard+0xf8>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7fe fce8 	bl	8000850 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fe69 	bl	8002b58 <SD_PowerON>
 8001e86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e02e      	b.n	8001f04 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fd87 	bl	80029ba <SD_InitCard>
 8001eac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e01b      	b.n	8001f04 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 ffc7 	bl	8002e68 <SDMMC_CmdBlockLength>
 8001eda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00f      	beq.n	8001f02 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_SD_InitCard+0xfc>)
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0c:	423000a0 	.word	0x423000a0
 8001f10:	004005ff 	.word	0x004005ff

08001f14 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b092      	sub	sp, #72	; 0x48
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001f22:	f7fe fc8b 	bl	800083c <HAL_GetTick>
 8001f26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1bd      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	f040 81b0 	bne.w	80022b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	441a      	add	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d907      	bls.n	8001f78 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e1a4      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d002      	beq.n	8001f96 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	025b      	lsls	r3, r3, #9
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001fa2:	2390      	movs	r3, #144	; 0x90
 8001fa4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f107 0214 	add.w	r2, r7, #20
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 ff28 	bl	8002e12 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d90a      	bls.n	8001fde <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 ff8b 	bl	8002ef0 <SDMMC_CmdReadMultiBlock>
 8001fda:	6478      	str	r0, [r7, #68]	; 0x44
 8001fdc:	e009      	b.n	8001ff2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ff5e 	bl	8002eac <SDMMC_CmdReadSingleBlock>
 8001ff0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_SD_ReadBlocks+0x2d4>)
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002006:	431a      	orrs	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e151      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002022:	e061      	b.n	80020e8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03c      	beq.n	80020ac <HAL_SD_ReadBlocks+0x198>
 8002032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d039      	beq.n	80020ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002038:	2300      	movs	r3, #0
 800203a:	643b      	str	r3, [r7, #64]	; 0x40
 800203c:	e033      	b.n	80020a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fe68 	bl	8002d18 <SDIO_ReadFIFO>
 8002048:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	b2da      	uxtb	r2, r3
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	3301      	adds	r3, #1
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205a:	3b01      	subs	r3, #1
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b2da      	uxtb	r2, r3
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	3301      	adds	r3, #1
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800206e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002070:	3b01      	subs	r3, #1
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	b2da      	uxtb	r2, r3
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	3301      	adds	r3, #1
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002086:	3b01      	subs	r3, #1
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	0e1b      	lsrs	r3, r3, #24
 800208e:	b2da      	uxtb	r2, r3
 8002090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002092:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	3301      	adds	r3, #1
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800209a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209c:	3b01      	subs	r3, #1
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80020a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a2:	3301      	adds	r3, #1
 80020a4:	643b      	str	r3, [r7, #64]	; 0x40
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	d9c8      	bls.n	800203e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80020ac:	f7fe fbc6 	bl	800083c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d902      	bls.n	80020c2 <HAL_SD_ReadBlocks+0x1ae>
 80020bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_SD_ReadBlocks+0x2d4>)
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0ec      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ee:	f240 332a 	movw	r3, #810	; 0x32a
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d095      	beq.n	8002024 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d022      	beq.n	800214c <HAL_SD_ReadBlocks+0x238>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d91f      	bls.n	800214c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2b03      	cmp	r3, #3
 8002112:	d01b      	beq.n	800214c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 ff4f 	bl	8002fbc <SDMMC_CmdStopTransfer>
 800211e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002122:	2b00      	cmp	r3, #0
 8002124:	d012      	beq.n	800214c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_SD_ReadBlocks+0x2d4>)
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0ba      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d012      	beq.n	8002180 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_SD_ReadBlocks+0x2d4>)
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	f043 0208 	orr.w	r2, r3, #8
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0a0      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_SD_ReadBlocks+0x2d4>)
 8002194:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	f043 0202 	orr.w	r2, r3, #2
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e086      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_SD_ReadBlocks+0x2d4>)
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e06c      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
 80021e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fd91 	bl	8002d18 <SDIO_ReadFIFO>
 80021f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	3301      	adds	r3, #1
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	3b01      	subs	r3, #1
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b2da      	uxtb	r2, r3
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	3301      	adds	r3, #1
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	3b01      	subs	r3, #1
 8002220:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	b2da      	uxtb	r2, r3
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	3301      	adds	r3, #1
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002234:	3b01      	subs	r3, #1
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	0e1b      	lsrs	r3, r3, #24
 800223c:	b2da      	uxtb	r2, r3
 800223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002240:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002244:	3301      	adds	r3, #1
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	3b01      	subs	r3, #1
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800224e:	f7fe faf5 	bl	800083c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800225a:	429a      	cmp	r2, r3
 800225c:	d902      	bls.n	8002264 <HAL_SD_ReadBlocks+0x350>
 800225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002260:	2b00      	cmp	r3, #0
 8002262:	d112      	bne.n	800228a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_SD_ReadBlocks+0x3b8>)
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e01b      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_SD_ReadBlocks+0x38a>
 8002298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1a6      	bne.n	80021ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e006      	b.n	80022c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3748      	adds	r7, #72	; 0x48
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	004005ff 	.word	0x004005ff

080022d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b092      	sub	sp, #72	; 0x48
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80022de:	f7fe faad 	bl	800083c <HAL_GetTick>
 80022e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e166      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 8159 	bne.w	80025c2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	441a      	add	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	429a      	cmp	r2, r3
 8002322:	d907      	bls.n	8002334 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e14d      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2203      	movs	r2, #3
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	2b01      	cmp	r3, #1
 800234a:	d002      	beq.n	8002352 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800235e:	2390      	movs	r3, #144	; 0x90
 8002360:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f107 0218 	add.w	r2, r7, #24
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd4a 	bl	8002e12 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d90a      	bls.n	800239a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fdf1 	bl	8002f78 <SDMMC_CmdWriteMultiBlock>
 8002396:	6478      	str	r0, [r7, #68]	; 0x44
 8002398:	e009      	b.n	80023ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2210      	movs	r2, #16
 800239e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fdc4 	bl	8002f34 <SDMMC_CmdWriteSingleBlock>
 80023ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80023ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a87      	ldr	r2, [pc, #540]	; (80025d8 <HAL_SD_WriteBlocks+0x308>)
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0fa      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80023de:	e065      	b.n	80024ac <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_SD_WriteBlocks+0x1a0>
 80023ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03d      	beq.n	8002470 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	643b      	str	r3, [r7, #64]	; 0x40
 80023f8:	e037      	b.n	800246a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	3301      	adds	r3, #1
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002408:	3b01      	subs	r3, #1
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021a      	lsls	r2, r3, #8
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	3301      	adds	r3, #1
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002420:	3b01      	subs	r3, #1
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	3301      	adds	r3, #1
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002438:	3b01      	subs	r3, #1
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	061a      	lsls	r2, r3, #24
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	3301      	adds	r3, #1
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800244e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002450:	3b01      	subs	r3, #1
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f107 0214 	add.w	r2, r7, #20
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fc66 	bl	8002d30 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002466:	3301      	adds	r3, #1
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
 800246a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246c:	2b07      	cmp	r3, #7
 800246e:	d9c4      	bls.n	80023fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002470:	f7fe f9e4 	bl	800083c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800247c:	429a      	cmp	r2, r3
 800247e:	d902      	bls.n	8002486 <HAL_SD_WriteBlocks+0x1b6>
 8002480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002482:	2b00      	cmp	r3, #0
 8002484:	d112      	bne.n	80024ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a53      	ldr	r2, [pc, #332]	; (80025d8 <HAL_SD_WriteBlocks+0x308>)
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002494:	431a      	orrs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e091      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b2:	f240 331a 	movw	r3, #794	; 0x31a
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d091      	beq.n	80023e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d022      	beq.n	8002510 <HAL_SD_WriteBlocks+0x240>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d91f      	bls.n	8002510 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d01b      	beq.n	8002510 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fd6d 	bl	8002fbc <SDMMC_CmdStopTransfer>
 80024e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_SD_WriteBlocks+0x308>)
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e05f      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d012      	beq.n	8002544 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a2d      	ldr	r2, [pc, #180]	; (80025d8 <HAL_SD_WriteBlocks+0x308>)
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	f043 0208 	orr.w	r2, r3, #8
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e045      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d012      	beq.n	8002578 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a20      	ldr	r2, [pc, #128]	; (80025d8 <HAL_SD_WriteBlocks+0x308>)
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e02b      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <HAL_SD_WriteBlocks+0x308>)
 800258c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e011      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e006      	b.n	80025d0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
  }
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3748      	adds	r7, #72	; 0x48
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	004005ff 	.word	0x004005ff

080025dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ea:	0f9b      	lsrs	r3, r3, #30
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002608:	0e1b      	lsrs	r3, r3, #24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	b2da      	uxtb	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	b2da      	uxtb	r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b2da      	uxtb	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002632:	b2da      	uxtb	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263c:	0d1b      	lsrs	r3, r3, #20
 800263e:	b29a      	uxth	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	b2da      	uxtb	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800265a:	0bdb      	lsrs	r3, r3, #15
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800266c:	0b9b      	lsrs	r3, r3, #14
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267e:	0b5b      	lsrs	r3, r3, #13
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002690:	0b1b      	lsrs	r3, r3, #12
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d163      	bne.n	8002774 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026b6:	4013      	ands	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80026bc:	0f92      	lsrs	r2, r2, #30
 80026be:	431a      	orrs	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c8:	0edb      	lsrs	r3, r3, #27
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	0d5b      	lsrs	r3, r3, #21
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fe:	0c9b      	lsrs	r3, r3, #18
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	b2da      	uxtb	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002710:	0bdb      	lsrs	r3, r3, #15
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	b2da      	uxtb	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7e1b      	ldrb	r3, [r3, #24]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	3302      	adds	r3, #2
 8002734:	2201      	movs	r2, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800273e:	fb03 f202 	mul.w	r2, r3, r2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7a1b      	ldrb	r3, [r3, #8]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	2201      	movs	r2, #1
 8002752:	409a      	lsls	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002760:	0a52      	lsrs	r2, r2, #9
 8002762:	fb03 f202 	mul.w	r2, r3, r2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002770:	661a      	str	r2, [r3, #96]	; 0x60
 8002772:	e031      	b.n	80027d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	2b01      	cmp	r3, #1
 800277a:	d11d      	bne.n	80027b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	431a      	orrs	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	3301      	adds	r3, #1
 8002798:	029a      	lsls	r2, r3, #10
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	661a      	str	r2, [r3, #96]	; 0x60
 80027b6:	e00f      	b.n	80027d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_SD_GetCardCSD+0x344>)
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e09d      	b.n	8002914 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027dc:	0b9b      	lsrs	r3, r3, #14
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ee:	09db      	lsrs	r3, r3, #7
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002806:	b2da      	uxtb	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	0fdb      	lsrs	r3, r3, #31
 8002812:	b2da      	uxtb	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	0f5b      	lsrs	r3, r3, #29
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	b2da      	uxtb	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	b2da      	uxtb	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	0d9b      	lsrs	r3, r3, #22
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	b2da      	uxtb	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	0d5b      	lsrs	r3, r3, #21
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	b2da      	uxtb	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	0bdb      	lsrs	r3, r3, #15
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	b2da      	uxtb	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	0b9b      	lsrs	r3, r3, #14
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	0b5b      	lsrs	r3, r3, #13
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	0b1b      	lsrs	r3, r3, #12
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	0a9b      	lsrs	r3, r3, #10
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002902:	b2da      	uxtb	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	004005ff 	.word	0x004005ff

08002924 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002986:	f107 030c 	add.w	r3, r7, #12
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f971 	bl	8002c74 <SD_SendStatus>
 8002992:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0a5b      	lsrs	r3, r3, #9
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80029b0:	693b      	ldr	r3, [r7, #16]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80029ba:	b5b0      	push	{r4, r5, r7, lr}
 80029bc:	b094      	sub	sp, #80	; 0x50
 80029be:	af04      	add	r7, sp, #16
 80029c0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80029c2:	2301      	movs	r3, #1
 80029c4:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f9cd 	bl	8002d6a <SDIO_GetPowerState>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80029d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029da:	e0b8      	b.n	8002b4e <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d02f      	beq.n	8002a44 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fbae 	bl	800314a <SDMMC_CmdSendCID>
 80029ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80029f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <SD_InitCard+0x40>
    {
      return errorstate;
 80029f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f8:	e0a9      	b.n	8002b4e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f9f4 	bl	8002dee <SDIO_GetResponse>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2104      	movs	r1, #4
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f9eb 	bl	8002dee <SDIO_GetResponse>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2108      	movs	r1, #8
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f9e2 	bl	8002dee <SDIO_GetResponse>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	210c      	movs	r1, #12
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f9d9 	bl	8002dee <SDIO_GetResponse>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d00d      	beq.n	8002a68 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f107 020e 	add.w	r2, r7, #14
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fbb4 	bl	80031c4 <SDMMC_CmdSetRelAdd>
 8002a5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <SD_InitCard+0xae>
    {
      return errorstate;
 8002a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a66:	e072      	b.n	8002b4e <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d036      	beq.n	8002ade <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	461a      	mov	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f000 fb7e 	bl	8003186 <SDMMC_CmdSendCSD>
 8002a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a94:	e05b      	b.n	8002b4e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f9a6 	bl	8002dee <SDIO_GetResponse>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2104      	movs	r1, #4
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f99d 	bl	8002dee <SDIO_GetResponse>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2108      	movs	r1, #8
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f994 	bl	8002dee <SDIO_GetResponse>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	210c      	movs	r1, #12
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f98b 	bl	8002dee <SDIO_GetResponse>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 f982 	bl	8002dee <SDIO_GetResponse>
 8002aea:	4603      	mov	r3, r0
 8002aec:	0d1a      	lsrs	r2, r3, #20
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fd6f 	bl	80025dc <HAL_SD_GetCardCSD>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b08:	e021      	b.n	8002b4e <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	2200      	movs	r2, #0
 8002b16:	461c      	mov	r4, r3
 8002b18:	4615      	mov	r5, r2
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	4608      	mov	r0, r1
 8002b20:	f000 fa6e 	bl	8003000 <SDMMC_CmdSelDesel>
 8002b24:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <SD_InitCard+0x176>
  {
    return errorstate;
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2e:	e00e      	b.n	8002b4e <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681d      	ldr	r5, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	466c      	mov	r4, sp
 8002b38:	f103 0210 	add.w	r2, r3, #16
 8002b3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b42:	3304      	adds	r3, #4
 8002b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 f8bc 	bl	8002cc4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3740      	adds	r7, #64	; 0x40
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fa68 	bl	8003046 <SDMMC_CmdGoIdleState>
 8002b76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	e072      	b.n	8002c68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fa7b 	bl	8003082 <SDMMC_CmdOperCond>
 8002b8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fa51 	bl	8003046 <SDMMC_CmdGoIdleState>
 8002ba4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	e05b      	b.n	8002c68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d137      	bne.n	8002c2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fa7b 	bl	80030c0 <SDMMC_CmdAppCommand>
 8002bca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02d      	beq.n	8002c2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002bd6:	e047      	b.n	8002c68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa6e 	bl	80030c0 <SDMMC_CmdAppCommand>
 8002be4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <SD_PowerON+0x98>
    {
      return errorstate;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	e03b      	b.n	8002c68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	491e      	ldr	r1, [pc, #120]	; (8002c70 <SD_PowerON+0x118>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa84 	bl	8003104 <SDMMC_CmdAppOperCommand>
 8002bfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c08:	e02e      	b.n	8002c68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f8ec 	bl	8002dee <SDIO_GetResponse>
 8002c16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	0fdb      	lsrs	r3, r3, #31
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <SD_PowerON+0xcc>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <SD_PowerON+0xce>
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

    count++;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d802      	bhi.n	8002c3e <SD_PowerON+0xe6>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0cc      	beq.n	8002bd8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d902      	bls.n	8002c4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4c:	e00c      	b.n	8002c68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c5e:	e002      	b.n	8002c66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	c1100000 	.word	0xc1100000

08002c74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c88:	e018      	b.n	8002cbc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fab5 	bl	8003206 <SDMMC_CmdSendStatus>
 8002c9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	e009      	b.n	8002cbc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f89d 	bl	8002dee <SDIO_GetResponse>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	f107 001c 	add.w	r0, r7, #28
 8002cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002cda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002cde:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002ce2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8002ce6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002cea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002cee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002cfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	b004      	add	sp, #16
 8002d16:	4770      	bx	lr

08002d18 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0303 	and.w	r3, r3, #3
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002da2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002da8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002dae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002dbe:	f023 030f 	bic.w	r3, r3, #15
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	b2db      	uxtb	r3, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
}  
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002e38:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002e3e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002e44:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0

}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002e76:	2310      	movs	r3, #16
 8002e78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002e7a:	2340      	movs	r3, #64	; 0x40
 8002e7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ff78 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	2110      	movs	r1, #16
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9d6 	bl	800324c <SDMMC_GetCmdResp1>
 8002ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002eba:	2311      	movs	r3, #17
 8002ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff56 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	2111      	movs	r1, #17
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9b4 	bl	800324c <SDMMC_GetCmdResp1>
 8002ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002efe:	2312      	movs	r3, #18
 8002f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f02:	2340      	movs	r3, #64	; 0x40
 8002f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff34 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	2112      	movs	r1, #18
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f992 	bl	800324c <SDMMC_GetCmdResp1>
 8002f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002f42:	2318      	movs	r3, #24
 8002f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff12 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	2118      	movs	r1, #24
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f970 	bl	800324c <SDMMC_GetCmdResp1>
 8002f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002f86:	2319      	movs	r3, #25
 8002f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f8a:	2340      	movs	r3, #64	; 0x40
 8002f8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fef0 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	2119      	movs	r1, #25
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f94e 	bl	800324c <SDMMC_GetCmdResp1>
 8002fb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002fc8:	230c      	movs	r3, #12
 8002fca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fcc:	2340      	movs	r3, #64	; 0x40
 8002fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fecf 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <SDMMC_CmdStopTransfer+0x40>)
 8002fe8:	210c      	movs	r1, #12
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f92e 	bl	800324c <SDMMC_GetCmdResp1>
 8002ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3720      	adds	r7, #32
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	05f5e100 	.word	0x05f5e100

08003000 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003010:	2307      	movs	r3, #7
 8003012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003014:	2340      	movs	r3, #64	; 0x40
 8003016:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800301c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003020:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4619      	mov	r1, r3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff feab 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	2107      	movs	r1, #7
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f909 	bl	800324c <SDMMC_GetCmdResp1>
 800303a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800303e:	4618      	mov	r0, r3
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b088      	sub	sp, #32
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800305e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003062:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe8a 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fb21 	bl	80036b8 <SDMMC_GetCmdError>
 8003076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003078:	69fb      	ldr	r3, [r7, #28]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b088      	sub	sp, #32
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800308a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800308e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003090:	2308      	movs	r3, #8
 8003092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003094:	2340      	movs	r3, #64	; 0x40
 8003096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800309c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030a2:	f107 0308 	add.w	r3, r7, #8
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fe6b 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fab4 	bl	800361c <SDMMC_GetCmdResp7>
 80030b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80030b6:	69fb      	ldr	r3, [r7, #28]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80030ce:	2337      	movs	r3, #55	; 0x37
 80030d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fe4c 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	2137      	movs	r1, #55	; 0x37
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8aa 	bl	800324c <SDMMC_GetCmdResp1>
 80030f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80030fa:	69fb      	ldr	r3, [r7, #28]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800311a:	2329      	movs	r3, #41	; 0x29
 800311c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800311e:	2340      	movs	r3, #64	; 0x40
 8003120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fe26 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f9bd 	bl	80034b8 <SDMMC_GetCmdResp3>
 800313e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003140:	69fb      	ldr	r3, [r7, #28]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b088      	sub	sp, #32
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003156:	2302      	movs	r3, #2
 8003158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800315a:	23c0      	movs	r3, #192	; 0xc0
 800315c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fe08 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f957 	bl	8003428 <SDMMC_GetCmdResp2>
 800317a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800317c:	69fb      	ldr	r3, [r7, #28]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003194:	2309      	movs	r3, #9
 8003196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003198:	23c0      	movs	r3, #192	; 0xc0
 800319a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fde9 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f938 	bl	8003428 <SDMMC_GetCmdResp2>
 80031b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80031ba:	69fb      	ldr	r3, [r7, #28]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80031d2:	2303      	movs	r3, #3
 80031d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fdca 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	2103      	movs	r1, #3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f99b 	bl	8003530 <SDMMC_GetCmdResp6>
 80031fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80031fc:	69fb      	ldr	r3, [r7, #28]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003214:	230d      	movs	r3, #13
 8003216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003218:	2340      	movs	r3, #64	; 0x40
 800321a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fda9 	bl	8002d84 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	210d      	movs	r1, #13
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f807 	bl	800324c <SDMMC_GetCmdResp1>
 800323e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003240:	69fb      	ldr	r3, [r7, #28]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	460b      	mov	r3, r1
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800325a:	4b70      	ldr	r3, [pc, #448]	; (800341c <SDMMC_GetCmdResp1+0x1d0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a70      	ldr	r2, [pc, #448]	; (8003420 <SDMMC_GetCmdResp1+0x1d4>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0a5a      	lsrs	r2, r3, #9
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	1e5a      	subs	r2, r3, #1
 8003272:	61fa      	str	r2, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800327c:	e0c9      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ef      	beq.n	800326e <SDMMC_GetCmdResp1+0x22>
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2204      	movs	r2, #4
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80032aa:	2304      	movs	r3, #4
 80032ac:	e0b1      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0a6      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	22c5      	movs	r2, #197	; 0xc5
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fd83 	bl	8002dd6 <SDIO_GetCommandResponse>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d001      	beq.n	80032de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032da:	2301      	movs	r3, #1
 80032dc:	e099      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80032de:	2100      	movs	r1, #0
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff fd84 	bl	8002dee <SDIO_GetResponse>
 80032e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <SDMMC_GetCmdResp1+0x1d8>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e08d      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da02      	bge.n	8003302 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80032fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003300:	e087      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800330c:	2340      	movs	r3, #64	; 0x40
 800330e:	e080      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	e079      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332c:	e071      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800333c:	e069      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334c:	e061      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800335c:	e059      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336c:	e051      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800337c:	e049      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800338c:	e041      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339c:	e039      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80033a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ac:	e031      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80033b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033bc:	e029      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80033c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033cc:	e021      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80033d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033dc:	e019      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80033e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033ec:	e011      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80033f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033fc:	e009      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003408:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800340c:	e001      	b.n	8003412 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800340e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000
 8003420:	10624dd3 	.word	0x10624dd3
 8003424:	fdffe008 	.word	0xfdffe008

08003428 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003430:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <SDMMC_GetCmdResp2+0x88>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <SDMMC_GetCmdResp2+0x8c>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0a5b      	lsrs	r3, r3, #9
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e5a      	subs	r2, r3, #1
 800344a:	60fa      	str	r2, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003450:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003454:	e026      	b.n	80034a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ef      	beq.n	8003446 <SDMMC_GetCmdResp2+0x1e>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ea      	bne.n	8003446 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2204      	movs	r2, #4
 8003480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003482:	2304      	movs	r3, #4
 8003484:	e00e      	b.n	80034a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003498:	2301      	movs	r3, #1
 800349a:	e003      	b.n	80034a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	22c5      	movs	r2, #197	; 0xc5
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80034c0:	4b19      	ldr	r3, [pc, #100]	; (8003528 <SDMMC_GetCmdResp3+0x70>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <SDMMC_GetCmdResp3+0x74>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0a5b      	lsrs	r3, r3, #9
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80034e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034e4:	e01b      	b.n	800351e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <SDMMC_GetCmdResp3+0x1e>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ea      	bne.n	80034d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003512:	2304      	movs	r3, #4
 8003514:	e003      	b.n	800351e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	22c5      	movs	r2, #197	; 0xc5
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000000 	.word	0x20000000
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	460b      	mov	r3, r1
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <SDMMC_GetCmdResp6+0xe4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a35      	ldr	r2, [pc, #212]	; (8003618 <SDMMC_GetCmdResp6+0xe8>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	61fa      	str	r2, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800355e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003562:	e052      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <SDMMC_GetCmdResp6+0x24>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ea      	bne.n	8003554 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2204      	movs	r2, #4
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003590:	2304      	movs	r3, #4
 8003592:	e03a      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e02f      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7ff fc13 	bl	8002dd6 <SDIO_GetCommandResponse>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	7afb      	ldrb	r3, [r7, #11]
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d001      	beq.n	80035be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e025      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22c5      	movs	r2, #197	; 0xc5
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80035c4:	2100      	movs	r1, #0
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f7ff fc11 	bl	8002dee <SDIO_GetResponse>
 80035cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e011      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80035f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035f4:	e009      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003604:	e001      	b.n	800360a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <SDMMC_GetCmdResp7+0x94>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <SDMMC_GetCmdResp7+0x98>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0a5b      	lsrs	r3, r3, #9
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	fb02 f303 	mul.w	r3, r2, r3
 8003638:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	60fa      	str	r2, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003648:	e02c      	b.n	80036a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0ef      	beq.n	800363a <SDMMC_GetCmdResp7+0x1e>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ea      	bne.n	800363a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003676:	2304      	movs	r3, #4
 8003678:	e014      	b.n	80036a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800368c:	2301      	movs	r3, #1
 800368e:	e009      	b.n	80036a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
  
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000
 80036b4:	10624dd3 	.word	0x10624dd3

080036b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <SDMMC_GetCmdError+0x4c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <SDMMC_GetCmdError+0x50>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80036e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036e4:	e009      	b.n	80036fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f1      	beq.n	80036d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	22c5      	movs	r2, #197	; 0xc5
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	20000000 	.word	0x20000000
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <MX_FATFS_Init+0x18>)
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <MX_FATFS_Init+0x1c>)
 8003714:	f000 fdce 	bl	80042b4 <FATFS_LinkDriver>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <MX_FATFS_Init+0x20>)
 800371e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000032c 	.word	0x2000032c
 8003728:	08004584 	.word	0x08004584
 800372c:	20000328 	.word	0x20000328

08003730 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800373a:	f000 f86b 	bl	8003814 <BSP_SD_IsDetected>
 800373e:	4603      	mov	r3, r0
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e005      	b.n	8003754 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003748:	4804      	ldr	r0, [pc, #16]	; (800375c <BSP_SD_Init+0x2c>)
 800374a:	f7fe fb33 	bl	8001db4 <HAL_SD_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8003752:	79fb      	ldrb	r3, [r7, #7]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000064 	.word	0x20000064

08003760 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	4806      	ldr	r0, [pc, #24]	; (8003798 <BSP_SD_ReadBlocks+0x38>)
 800377e:	f7fe fbc9 	bl	8001f14 <HAL_SD_ReadBlocks>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000064 	.word	0x20000064

0800379c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	4806      	ldr	r0, [pc, #24]	; (80037d4 <BSP_SD_WriteBlocks+0x38>)
 80037ba:	f7fe fd89 	bl	80022d0 <HAL_SD_WriteBlocks>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000064 	.word	0x20000064

080037d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <BSP_SD_GetCardState+0x1c>)
 80037de:	f7ff f8cc 	bl	800297a <HAL_SD_GetCardState>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000064 	.word	0x20000064

080037f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4803      	ldr	r0, [pc, #12]	; (8003810 <BSP_SD_GetCardInfo+0x18>)
 8003804:	f7ff f88e 	bl	8002924 <HAL_SD_GetCardInfo>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000064 	.word	0x20000064

08003814 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800381a:	2301      	movs	r3, #1
 800381c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800381e:	f000 f80b 	bl	8003838 <BSP_PlatformIsDetected>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8003828:	2300      	movs	r3, #0
 800382a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	b2db      	uxtb	r3, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800383e:	2301      	movs	r3, #1
 8003840:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	4806      	ldr	r0, [pc, #24]	; (8003860 <BSP_PlatformIsDetected+0x28>)
 8003846:	f7fd fac9 	bl	8000ddc <HAL_GPIO_ReadPin>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8003850:	2300      	movs	r3, #0
 8003852:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8003854:	79fb      	ldrb	r3, [r7, #7]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40011000 	.word	0x40011000

08003864 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <disk_status+0x30>)
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	79fa      	ldrb	r2, [r7, #7]
 800387c:	4905      	ldr	r1, [pc, #20]	; (8003894 <disk_status+0x30>)
 800387e:	440a      	add	r2, r1
 8003880:	7a12      	ldrb	r2, [r2, #8]
 8003882:	4610      	mov	r0, r2
 8003884:	4798      	blx	r3
 8003886:	4603      	mov	r3, r0
 8003888:	73fb      	strb	r3, [r7, #15]
  return stat;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000350 	.word	0x20000350

08003898 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <disk_initialize+0x48>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <disk_initialize+0x48>)
 80038b4:	2101      	movs	r1, #1
 80038b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <disk_initialize+0x48>)
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	79fa      	ldrb	r2, [r7, #7]
 80038c6:	4906      	ldr	r1, [pc, #24]	; (80038e0 <disk_initialize+0x48>)
 80038c8:	440a      	add	r2, r1
 80038ca:	7a12      	ldrb	r2, [r2, #8]
 80038cc:	4610      	mov	r0, r2
 80038ce:	4798      	blx	r3
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000350 	.word	0x20000350

080038e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <disk_read+0x3c>)
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	689c      	ldr	r4, [r3, #8]
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <disk_read+0x3c>)
 8003904:	4413      	add	r3, r2
 8003906:	7a18      	ldrb	r0, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	47a0      	blx	r4
 8003910:	4603      	mov	r3, r0
 8003912:	75fb      	strb	r3, [r7, #23]
  return res;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
}
 8003916:	4618      	mov	r0, r3
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}
 800391e:	bf00      	nop
 8003920:	20000350 	.word	0x20000350

08003924 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <disk_write+0x3c>)
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68dc      	ldr	r4, [r3, #12]
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <disk_write+0x3c>)
 8003944:	4413      	add	r3, r2
 8003946:	7a18      	ldrb	r0, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	47a0      	blx	r4
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]
  return res;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
}
 8003956:	4618      	mov	r0, r3
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	bf00      	nop
 8003960:	20000350 	.word	0x20000350

08003964 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e016      	b.n	80039a0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003972:	4910      	ldr	r1, [pc, #64]	; (80039b4 <clear_lock+0x50>)
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	d108      	bne.n	800399a <clear_lock+0x36>
 8003988:	490a      	ldr	r1, [pc, #40]	; (80039b4 <clear_lock+0x50>)
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d9e5      	bls.n	8003972 <clear_lock+0xe>
	}
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000338 	.word	0x20000338

080039b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d038      	beq.n	8003a40 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80039d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	2301      	movs	r3, #1
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	f7ff ff9f 	bl	8003924 <disk_write>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e026      	b.n	8003a40 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	1ad2      	subs	r2, r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d218      	bcs.n	8003a40 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e010      	b.n	8003a3a <sync_window+0x82>
					wsect += fs->fsize;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	f7ff ff78 	bl	8003924 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d8eb      	bhi.n	8003a18 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d01b      	beq.n	8003a9c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ffa7 	bl	80039b8 <sync_window>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d113      	bne.n	8003a9c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	f7ff ff30 	bl	80038e4 <disk_read>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b087      	sub	sp, #28
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d031      	beq.n	8003b20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e002      	b.n	8003aca <get_ldnumber+0x24>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d903      	bls.n	8003ada <get_ldnumber+0x34>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b3a      	cmp	r3, #58	; 0x3a
 8003ad8:	d1f4      	bne.n	8003ac4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b3a      	cmp	r3, #58	; 0x3a
 8003ae0:	d11c      	bne.n	8003b1c <get_ldnumber+0x76>
			tp = *path;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	60fa      	str	r2, [r7, #12]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	3b30      	subs	r3, #48	; 0x30
 8003af2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	d80e      	bhi.n	8003b18 <get_ldnumber+0x72>
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10a      	bne.n	8003b18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <get_ldnumber+0x72>
					vol = (int)i;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	e002      	b.n	8003b22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003b20:	693b      	ldr	r3, [r7, #16]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003b48:	6839      	ldr	r1, [r7, #0]
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ff7d 	bl	8003a4a <move_window>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <check_fs+0x2e>
		return 3;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04a      	b.n	8003bf0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003b60:	3301      	adds	r3, #1
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	b21a      	sxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b21b      	sxth	r3, r3
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <check_fs+0xcc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d001      	beq.n	8003b7e <check_fs+0x52>
		return 2;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e038      	b.n	8003bf0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3336      	adds	r3, #54	; 0x36
 8003b82:	3303      	adds	r3, #3
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	061a      	lsls	r2, r3, #24
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3336      	adds	r3, #54	; 0x36
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	4313      	orrs	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	3236      	adds	r2, #54	; 0x36
 8003b98:	3201      	adds	r2, #1
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	0212      	lsls	r2, r2, #8
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <check_fs+0xd0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <check_fs+0x8a>
		return 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e01c      	b.n	8003bf0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3352      	adds	r3, #82	; 0x52
 8003bba:	3303      	adds	r3, #3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	061a      	lsls	r2, r3, #24
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3352      	adds	r3, #82	; 0x52
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	3252      	adds	r2, #82	; 0x52
 8003bd0:	3201      	adds	r2, #1
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	0212      	lsls	r2, r2, #8
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003be4:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <check_fs+0xd0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <check_fs+0xc2>
		return 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <check_fs+0xc4>

	return 1;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	ffffaa55 	.word	0xffffaa55
 8003bfc:	00544146 	.word	0x00544146

08003c00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b096      	sub	sp, #88	; 0x58
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f7ff ff46 	bl	8003aa6 <get_ldnumber>
 8003c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da01      	bge.n	8003c26 <find_volume+0x26>
 8003c22:	230b      	movs	r3, #11
 8003c24:	e2a8      	b.n	8004178 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003c26:	4a9d      	ldr	r2, [pc, #628]	; (8003e9c <find_volume+0x29c>)
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <find_volume+0x3a>
 8003c36:	230c      	movs	r3, #12
 8003c38:	e29e      	b.n	8004178 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c3e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01b      	beq.n	8003c82 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fe07 	bl	8003864 <disk_status>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <find_volume+0x7e>
 8003c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	e27c      	b.n	8004178 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e27a      	b.n	8004178 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fdfc 	bl	8003898 <disk_initialize>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e260      	b.n	8004178 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <find_volume+0xcc>
 8003cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8003cc8:	230a      	movs	r3, #10
 8003cca:	e255      	b.n	8004178 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003cd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003cd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cd4:	f7ff ff2a 	bl	8003b2c <check_fs>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003cde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d153      	bne.n	8003d8e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cea:	e028      	b.n	8003d3e <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003cf6:	4413      	add	r3, r2
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <find_volume+0x12a>
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	330b      	adds	r3, #11
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	061a      	lsls	r2, r3, #24
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	330a      	adds	r3, #10
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	4313      	orrs	r3, r2
 8003d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d18:	3209      	adds	r2, #9
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	0212      	lsls	r2, r2, #8
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	3208      	adds	r2, #8
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	e000      	b.n	8003d2c <find_volume+0x12c>
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	3358      	adds	r3, #88	; 0x58
 8003d32:	443b      	add	r3, r7
 8003d34:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d9d3      	bls.n	8003cec <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003d44:	2300      	movs	r3, #0
 8003d46:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <find_volume+0x154>
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	3b01      	subs	r3, #1
 8003d52:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	3358      	adds	r3, #88	; 0x58
 8003d5a:	443b      	add	r3, r7
 8003d5c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <find_volume+0x174>
 8003d68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d6c:	f7ff fede 	bl	8003b2c <check_fs>
 8003d70:	4603      	mov	r3, r0
 8003d72:	e000      	b.n	8003d76 <find_volume+0x176>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <find_volume+0x18e>
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	3301      	adds	r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	; 0x40
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d9e2      	bls.n	8003d54 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d101      	bne.n	8003d9a <find_volume+0x19a>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1ee      	b.n	8004178 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <find_volume+0x1a6>
 8003da2:	230d      	movs	r3, #13
 8003da4:	e1e8      	b.n	8004178 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	7b1b      	ldrb	r3, [r3, #12]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	b21a      	sxth	r2, r3
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	7adb      	ldrb	r3, [r3, #11]
 8003db2:	b21b      	sxth	r3, r3
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b21b      	sxth	r3, r3
 8003db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbc:	d001      	beq.n	8003dc2 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8003dbe:	230d      	movs	r3, #13
 8003dc0:	e1da      	b.n	8004178 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	7ddb      	ldrb	r3, [r3, #23]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	b21a      	sxth	r2, r3
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	7d9b      	ldrb	r3, [r3, #22]
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	b21b      	sxth	r3, r3
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d112      	bne.n	8003e04 <find_volume+0x204>
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003de4:	061a      	lsls	r2, r3, #24
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	4313      	orrs	r3, r2
 8003df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003df6:	0212      	lsls	r2, r2, #8
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dfc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003e00:	4313      	orrs	r3, r2
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	7c1a      	ldrb	r2, [r3, #16]
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e18:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d006      	beq.n	8003e2e <find_volume+0x22e>
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d001      	beq.n	8003e2e <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8003e2a:	230d      	movs	r3, #13
 8003e2c:	e1a4      	b.n	8004178 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003e34:	461a      	mov	r2, r3
 8003e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e38:	fb02 f303 	mul.w	r3, r2, r3
 8003e3c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	7b5a      	ldrb	r2, [r3, #13]
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <find_volume+0x268>
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003e60:	3b01      	subs	r3, #1
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8003e68:	230d      	movs	r3, #13
 8003e6a:	e185      	b.n	8004178 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	7c9b      	ldrb	r3, [r3, #18]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	7c5b      	ldrb	r3, [r3, #17]
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d004      	beq.n	8003ea0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8003e96:	230d      	movs	r3, #13
 8003e98:	e16e      	b.n	8004178 <find_volume+0x578>
 8003e9a:	bf00      	nop
 8003e9c:	20000330 	.word	0x20000330

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	7d1b      	ldrb	r3, [r3, #20]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	b21a      	sxth	r2, r3
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	7cdb      	ldrb	r3, [r3, #19]
 8003eac:	b21b      	sxth	r3, r3
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b21b      	sxth	r3, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d112      	bne.n	8003ee2 <find_volume+0x2e2>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003ec2:	061a      	lsls	r2, r3, #24
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003ed4:	0212      	lsls	r2, r2, #8
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	7bdb      	ldrb	r3, [r3, #15]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	b21a      	sxth	r2, r3
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	7b9b      	ldrb	r3, [r3, #14]
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8003ef6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <find_volume+0x300>
 8003efc:	230d      	movs	r3, #13
 8003efe:	e13b      	b.n	8004178 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003f00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	4413      	add	r3, r2
 8003f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f08:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8003f0c:	0912      	lsrs	r2, r2, #4
 8003f0e:	b292      	uxth	r2, r2
 8003f10:	4413      	add	r3, r2
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d201      	bcs.n	8003f20 <find_volume+0x320>
 8003f1c:	230d      	movs	r3, #13
 8003f1e:	e12b      	b.n	8004178 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f28:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <find_volume+0x33c>
 8003f38:	230d      	movs	r3, #13
 8003f3a:	e11d      	b.n	8004178 <find_volume+0x578>
	fmt = FS_FAT12;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d902      	bls.n	8003f52 <find_volume+0x352>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d902      	bls.n	8003f62 <find_volume+0x362>
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003f74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	441a      	add	r2, r3
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8003f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	441a      	add	r2, r3
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8003f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d121      	bne.n	8003fd8 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <find_volume+0x3a2>
 8003f9e:	230d      	movs	r3, #13
 8003fa0:	e0ea      	b.n	8004178 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003fa8:	061a      	lsls	r2, r3, #24
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fb6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8003fba:	0212      	lsls	r2, r2, #8
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd6:	e025      	b.n	8004024 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <find_volume+0x3e6>
 8003fe2:	230d      	movs	r3, #13
 8003fe4:	e0c8      	b.n	8004178 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fee:	441a      	add	r2, r3
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003ff6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d104      	bne.n	8004008 <find_volume+0x408>
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	e00c      	b.n	8004022 <find_volume+0x422>
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	085a      	lsrs	r2, r3, #1
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004022:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800402a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004030:	0a5b      	lsrs	r3, r3, #9
 8004032:	429a      	cmp	r2, r3
 8004034:	d201      	bcs.n	800403a <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8004036:	230d      	movs	r3, #13
 8004038:	e09e      	b.n	8004178 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	2280      	movs	r2, #128	; 0x80
 8004054:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800405c:	2b03      	cmp	r3, #3
 800405e:	d177      	bne.n	8004150 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	b21a      	sxth	r2, r3
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004070:	b21b      	sxth	r3, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	b21b      	sxth	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d16a      	bne.n	8004150 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	3301      	adds	r3, #1
 800407e:	4619      	mov	r1, r3
 8004080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004082:	f7ff fce2 	bl	8003a4a <move_window>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d161      	bne.n	8004150 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	b21a      	sxth	r2, r3
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80040a4:	b21b      	sxth	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	4a35      	ldr	r2, [pc, #212]	; (8004180 <find_volume+0x580>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d14f      	bne.n	8004150 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	78db      	ldrb	r3, [r3, #3]
 80040b4:	061a      	lsls	r2, r3, #24
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	789b      	ldrb	r3, [r3, #2]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	4313      	orrs	r3, r2
 80040be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c0:	7852      	ldrb	r2, [r2, #1]
 80040c2:	0212      	lsls	r2, r2, #8
 80040c4:	4313      	orrs	r3, r2
 80040c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <find_volume+0x584>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d13e      	bne.n	8004150 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80040d8:	061a      	lsls	r2, r3, #24
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	4313      	orrs	r3, r2
 80040e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80040ea:	0212      	lsls	r2, r2, #8
 80040ec:	4313      	orrs	r3, r2
 80040ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80040f4:	4313      	orrs	r3, r2
 80040f6:	4a24      	ldr	r2, [pc, #144]	; (8004188 <find_volume+0x588>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d129      	bne.n	8004150 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004102:	061a      	lsls	r2, r3, #24
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	4313      	orrs	r3, r2
 800410e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004110:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004114:	0212      	lsls	r2, r2, #8
 8004116:	4313      	orrs	r3, r2
 8004118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800411a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800411e:	431a      	orrs	r2, r3
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800412c:	061a      	lsls	r2, r3, #24
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	4313      	orrs	r3, r2
 8004138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800413e:	0212      	lsls	r2, r2, #8
 8004140:	4313      	orrs	r3, r2
 8004142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004144:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004148:	431a      	orrs	r2, r3
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004156:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <find_volume+0x58c>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <find_volume+0x58c>)
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <find_volume+0x58c>)
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004172:	f7ff fbf7 	bl	8003964 <clear_lock>
#endif

	return FR_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3758      	adds	r7, #88	; 0x58
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	ffffaa55 	.word	0xffffaa55
 8004184:	41615252 	.word	0x41615252
 8004188:	61417272 	.word	0x61417272
 800418c:	20000334 	.word	0x20000334

08004190 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	4613      	mov	r3, r2
 800419c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80041a2:	f107 0310 	add.w	r3, r7, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fc7d 	bl	8003aa6 <get_ldnumber>
 80041ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da01      	bge.n	80041b8 <f_mount+0x28>
 80041b4:	230b      	movs	r3, #11
 80041b6:	e02d      	b.n	8004214 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <f_mount+0x8c>)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d006      	beq.n	80041d6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80041c8:	69b8      	ldr	r0, [r7, #24]
 80041ca:	f7ff fbcb 	bl	8003964 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	490d      	ldr	r1, [pc, #52]	; (800421c <f_mount+0x8c>)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <f_mount+0x6a>
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <f_mount+0x6e>
 80041fa:	2300      	movs	r3, #0
 80041fc:	e00a      	b.n	8004214 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80041fe:	f107 0108 	add.w	r1, r7, #8
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	2200      	movs	r2, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fcf9 	bl	8003c00 <find_volume>
 800420e:	4603      	mov	r3, r0
 8004210:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004212:	7dfb      	ldrb	r3, [r7, #23]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3720      	adds	r7, #32
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000330 	.word	0x20000330

08004220 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004238:	7a5b      	ldrb	r3, [r3, #9]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d831      	bhi.n	80042a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004242:	7a5b      	ldrb	r3, [r3, #9]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800424e:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004250:	7a5b      	ldrb	r3, [r3, #9]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800425e:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004260:	7a5b      	ldrb	r3, [r3, #9]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004268:	4413      	add	r3, r2
 800426a:	79fa      	ldrb	r2, [r7, #7]
 800426c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 8004270:	7a5b      	ldrb	r3, [r3, #9]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	b2d1      	uxtb	r1, r2
 8004278:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <FATFS_LinkDriverEx+0x90>)
 800427a:	7251      	strb	r1, [r2, #9]
 800427c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800427e:	7dbb      	ldrb	r3, [r7, #22]
 8004280:	3330      	adds	r3, #48	; 0x30
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	3301      	adds	r3, #1
 800428c:	223a      	movs	r2, #58	; 0x3a
 800428e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3302      	adds	r3, #2
 8004294:	222f      	movs	r2, #47	; 0x2f
 8004296:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3303      	adds	r3, #3
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	20000350 	.word	0x20000350

080042b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffac 	bl	8004220 <FATFS_LinkDriverEx>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <SD_initialize+0x38>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80042e4:	f7ff fa24 	bl	8003730 <BSP_SD_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <SD_initialize+0x38>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <SD_initialize+0x38>)
 80042fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80042fe:	4b03      	ldr	r3, [pc, #12]	; (800430c <SD_initialize+0x38>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b2db      	uxtb	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000009 	.word	0x20000009

08004310 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <SD_status+0x38>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004320:	f7ff fa5a 	bl	80037d8 <BSP_SD_GetCardState>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <SD_status+0x38>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <SD_status+0x38>)
 8004338:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800433a:	4b03      	ldr	r3, [pc, #12]	; (8004348 <SD_status+0x38>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	b2db      	uxtb	r3, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000009 	.word	0x20000009

0800434c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <SD_read+0x54>)
 8004362:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <SD_read+0x58>)
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f7ff f9f8 	bl	8003760 <BSP_SD_ReadBlocks>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10e      	bne.n	8004394 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004376:	e006      	b.n	8004386 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	613a      	str	r2, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <SD_read+0x3a>
      {
        return RES_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e007      	b.n	8004396 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004386:	f7ff fa27 	bl	80037d8 <BSP_SD_GetCardState>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f3      	bne.n	8004378 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	000186a0 	.word	0x000186a0
 80043a4:	05f5e100 	.word	0x05f5e100

080043a8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <SD_write+0x54>)
 80043be:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <SD_write+0x58>)
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f7ff f9e8 	bl	800379c <BSP_SD_WriteBlocks>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10e      	bne.n	80043f0 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80043d2:	e006      	b.n	80043e2 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1e5a      	subs	r2, r3, #1
 80043d8:	613a      	str	r2, [r7, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <SD_write+0x3a>
      {
        return RES_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e007      	b.n	80043f2 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80043e2:	f7ff f9f9 	bl	80037d8 <BSP_SD_GetCardState>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f3      	bne.n	80043d4 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	000186a0 	.word	0x000186a0
 8004400:	05f5e100 	.word	0x05f5e100

08004404 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	603a      	str	r2, [r7, #0]
 800440e:	71fb      	strb	r3, [r7, #7]
 8004410:	460b      	mov	r3, r1
 8004412:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <SD_ioctl+0xa8>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <SD_ioctl+0x28>
 8004428:	2303      	movs	r3, #3
 800442a:	e03b      	b.n	80044a4 <SD_ioctl+0xa0>
  
  switch (cmd)
 800442c:	79bb      	ldrb	r3, [r7, #6]
 800442e:	2b03      	cmp	r3, #3
 8004430:	d833      	bhi.n	800449a <SD_ioctl+0x96>
 8004432:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <SD_ioctl+0x34>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	08004451 	.word	0x08004451
 8004440:	08004469 	.word	0x08004469
 8004444:	08004483 	.word	0x08004483
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800444e:	e027      	b.n	80044a0 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff f9cf 	bl	80037f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004466:	e01b      	b.n	80044a0 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004468:	f107 030c 	add.w	r3, r7, #12
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff f9c3 	bl	80037f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	b29a      	uxth	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004480:	e00e      	b.n	80044a0 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004482:	f107 030c 	add.w	r3, r7, #12
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f9b6 	bl	80037f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800448c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004498:	e002      	b.n	80044a0 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800449a:	2304      	movs	r3, #4
 800449c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 80044a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3730      	adds	r7, #48	; 0x30
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000009 	.word	0x20000009

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	2600      	movs	r6, #0
 80044b4:	4d0c      	ldr	r5, [pc, #48]	; (80044e8 <__libc_init_array+0x38>)
 80044b6:	4c0d      	ldr	r4, [pc, #52]	; (80044ec <__libc_init_array+0x3c>)
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	42a6      	cmp	r6, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	f000 f822 	bl	8004508 <_init>
 80044c4:	2600      	movs	r6, #0
 80044c6:	4d0a      	ldr	r5, [pc, #40]	; (80044f0 <__libc_init_array+0x40>)
 80044c8:	4c0a      	ldr	r4, [pc, #40]	; (80044f4 <__libc_init_array+0x44>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	42a6      	cmp	r6, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d8:	4798      	blx	r3
 80044da:	3601      	adds	r6, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e2:	4798      	blx	r3
 80044e4:	3601      	adds	r6, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	08004598 	.word	0x08004598
 80044ec:	08004598 	.word	0x08004598
 80044f0:	08004598 	.word	0x08004598
 80044f4:	0800459c 	.word	0x0800459c

080044f8 <memset>:
 80044f8:	4603      	mov	r3, r0
 80044fa:	4402      	add	r2, r0
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d100      	bne.n	8004502 <memset+0xa>
 8004500:	4770      	bx	lr
 8004502:	f803 1b01 	strb.w	r1, [r3], #1
 8004506:	e7f9      	b.n	80044fc <memset+0x4>

08004508 <_init>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	bf00      	nop
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr

08004514 <_fini>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	bf00      	nop
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr
