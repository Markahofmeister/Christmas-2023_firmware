
christmas-2023__master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081c8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008568  08008568  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08008568  08008568  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008568  08008568  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043cc  2000005c  080085cc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004428  080085cc  00024428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce4  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002faa  00000000  00000000  00033d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00037ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbd3  00000000  00000000  00039160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016848  00000000  00000000  00055d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4ff6  00000000  00000000  0006c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111571  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f04  00000000  00000000  001115c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	08008394 	.word	0x08008394

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	08008394 	.word	0x08008394

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__aeabi_f2uiz>:
 80006e0:	0042      	lsls	r2, r0, #1
 80006e2:	d20e      	bcs.n	8000702 <__aeabi_f2uiz+0x22>
 80006e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e8:	d30b      	bcc.n	8000702 <__aeabi_f2uiz+0x22>
 80006ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006f2:	d409      	bmi.n	8000708 <__aeabi_f2uiz+0x28>
 80006f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000700:	4770      	bx	lr
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	4770      	bx	lr
 8000708:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800070c:	d101      	bne.n	8000712 <__aeabi_f2uiz+0x32>
 800070e:	0242      	lsls	r2, r0, #9
 8000710:	d102      	bne.n	8000718 <__aeabi_f2uiz+0x38>
 8000712:	f04f 30ff 	mov.w	r0, #4294967295
 8000716:	4770      	bx	lr
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <HAL_I2S_TxCpltCallback>:
volatile uint16_t signal_buff2[4096];

char *fileNames[] = {"blank.wav", "yard.wav", "shit.wav", "gift.wav", "nut.wav", "grace.wav",
					"dump.wav", "treeBig.wav", "kma.wav", "winterMorn.wav", "rant.wav"};

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if(end_of_file_reached)
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <HAL_I2S_TxCpltCallback+0x9c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d13f      	bne.n	80007b2 <HAL_I2S_TxCpltCallback+0x92>
        return;

    volatile uint16_t* temp = signal_play_buff;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <HAL_I2S_TxCpltCallback+0xa0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	613b      	str	r3, [r7, #16]
    signal_play_buff = signal_read_buff;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <HAL_I2S_TxCpltCallback+0xa4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <HAL_I2S_TxCpltCallback+0xa0>)
 800073e:	6013      	str	r3, [r2, #0]
    signal_read_buff = temp;
 8000740:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <HAL_I2S_TxCpltCallback+0xa4>)
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	6013      	str	r3, [r2, #0]

    //uint16_t buffSize = (sizeof(signal_play_buff)) / 4096;

    for(int i = 0; i < 10; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	e020      	b.n	800078e <HAL_I2S_TxCpltCallback+0x6e>
    	signal_play_buff[i] = (float)signal_play_buff[i] * volume;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_I2S_TxCpltCallback+0xa0>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fe18 	bl	8000390 <__aeabi_ui2f>
 8000760:	4602      	mov	r2, r0
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <HAL_I2S_TxCpltCallback+0xa8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4610      	mov	r0, r2
 800076a:	f7ff fe69 	bl	8000440 <__aeabi_fmul>
 800076e:	4603      	mov	r3, r0
 8000770:	4619      	mov	r1, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_I2S_TxCpltCallback+0xa0>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	18d4      	adds	r4, r2, r3
 800077c:	4608      	mov	r0, r1
 800077e:	f7ff ffaf 	bl	80006e0 <__aeabi_f2uiz>
 8000782:	4603      	mov	r3, r0
 8000784:	b29b      	uxth	r3, r3
 8000786:	8023      	strh	r3, [r4, #0]
    for(int i = 0; i < 10; i++) {
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	2b09      	cmp	r3, #9
 8000792:	dddb      	ble.n	800074c <HAL_I2S_TxCpltCallback+0x2c>
    }

    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	60fb      	str	r3, [r7, #12]
    HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_play_buff, nsamples);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_I2S_TxCpltCallback+0xa0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	b292      	uxth	r2, r2
 80007a2:	4619      	mov	r1, r3
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <HAL_I2S_TxCpltCallback+0xac>)
 80007a6:	f002 f871 	bl	800288c <HAL_I2S_Transmit_IT>
    read_next_chunk = true;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_I2S_TxCpltCallback+0xb0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e000      	b.n	80007b4 <HAL_I2S_TxCpltCallback+0x94>
        return;
 80007b2:	bf00      	nop
}
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200003e4 	.word	0x200003e4
 80007c0:	200003e8 	.word	0x200003e8
 80007c4:	200003ec 	.word	0x200003ec
 80007c8:	20000020 	.word	0x20000020
 80007cc:	200000a8 	.word	0x200000a8
 80007d0:	200003e5 	.word	0x200003e5

080007d4 <playWavFile>:

int playWavFile(const char* fname) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80007da:	af00      	add	r7, sp, #0
 80007dc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80007e0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80007e4:	6018      	str	r0, [r3, #0]

    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 80007e6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80007ea:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80007ee:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80007f2:	2201      	movs	r2, #1
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	f006 ff83 	bl	8007700 <f_open>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 8000800:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <playWavFile+0x38>
        return EXIT_FAILURE;
 8000808:	2301      	movs	r3, #1
 800080a:	e1fa      	b.n	8000c02 <playWavFile+0x42e>
    }


    unsigned int bytesRead;
    uint8_t header[44];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 800080c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000810:	f107 0108 	add.w	r1, r7, #8
 8000814:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000818:	222c      	movs	r2, #44	; 0x2c
 800081a:	f007 f9ea 	bl	8007bf2 <f_read>
 800081e:	4603      	mov	r3, r0
 8000820:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 8000824:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <playWavFile+0x66>
        f_close(&file);
 800082c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000830:	4618      	mov	r0, r3
 8000832:	f007 fc03 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000836:	2301      	movs	r3, #1
 8000838:	e1e3      	b.n	8000c02 <playWavFile+0x42e>
    }

    if(memcmp((const char*)header, "RIFF", 4) != 0) {
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2204      	movs	r2, #4
 8000840:	49c7      	ldr	r1, [pc, #796]	; (8000b60 <playWavFile+0x38c>)
 8000842:	4618      	mov	r0, r3
 8000844:	f007 fd8e 	bl	8008364 <memcmp>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d006      	beq.n	800085c <playWavFile+0x88>
        f_close(&file);
 800084e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000852:	4618      	mov	r0, r3
 8000854:	f007 fbf2 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000858:	2301      	movs	r3, #1
 800085a:	e1d2      	b.n	8000c02 <playWavFile+0x42e>
    }

    if(memcmp((const char*)header + 8, "WAVEfmt ", 8) != 0) {
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	3308      	adds	r3, #8
 8000862:	2208      	movs	r2, #8
 8000864:	49bf      	ldr	r1, [pc, #764]	; (8000b64 <playWavFile+0x390>)
 8000866:	4618      	mov	r0, r3
 8000868:	f007 fd7c 	bl	8008364 <memcmp>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d006      	beq.n	8000880 <playWavFile+0xac>
        f_close(&file);
 8000872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fbe0 	bl	800803c <f_close>
        return EXIT_FAILURE;
 800087c:	2301      	movs	r3, #1
 800087e:	e1c0      	b.n	8000c02 <playWavFile+0x42e>
    }

    if(memcmp((const char*)header + 36, "data", 4) != 0) {
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	3324      	adds	r3, #36	; 0x24
 8000886:	2204      	movs	r2, #4
 8000888:	49b7      	ldr	r1, [pc, #732]	; (8000b68 <playWavFile+0x394>)
 800088a:	4618      	mov	r0, r3
 800088c:	f007 fd6a 	bl	8008364 <memcmp>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d006      	beq.n	80008a4 <playWavFile+0xd0>
        f_close(&file);
 8000896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089a:	4618      	mov	r0, r3
 800089c:	f007 fbce 	bl	800803c <f_close>
        return EXIT_FAILURE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e1ae      	b.n	8000c02 <playWavFile+0x42e>
    }

//    uint32_t fileSize = 8 + (header[4] | (header[5] << 8) | (header[6] << 16) | (header[7] << 24));
    uint32_t headerSizeLeft = header[16] | (header[17] << 8) | (header[18] << 16) | (header[19] << 24);
 80008a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008a8:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80008ac:	7c1b      	ldrb	r3, [r3, #16]
 80008ae:	461a      	mov	r2, r3
 80008b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008b4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80008b8:	7c5b      	ldrb	r3, [r3, #17]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	431a      	orrs	r2, r3
 80008be:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008c2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80008c6:	7c9b      	ldrb	r3, [r3, #18]
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	431a      	orrs	r2, r3
 80008cc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008d0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80008d4:	7cdb      	ldrb	r3, [r3, #19]
 80008d6:	061b      	lsls	r3, r3, #24
 80008d8:	4313      	orrs	r3, r2
 80008da:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    uint16_t compression = header[20] | (header[21] << 8);
 80008de:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008e2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80008e6:	7d1b      	ldrb	r3, [r3, #20]
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008ee:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80008f2:	7d5b      	ldrb	r3, [r3, #21]
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
    uint16_t channelsNum = header[22] | (header[23] << 8);
 8000900:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000904:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000908:	7d9b      	ldrb	r3, [r3, #22]
 800090a:	b21a      	sxth	r2, r3
 800090c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000910:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000914:	7ddb      	ldrb	r3, [r3, #23]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b21b      	sxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b21b      	sxth	r3, r3
 800091e:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
    uint32_t sampleRate = header[24] | (header[25] << 8) | (header[26] << 16) | (header[27] << 24);
 8000922:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000926:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800092a:	7e1b      	ldrb	r3, [r3, #24]
 800092c:	461a      	mov	r2, r3
 800092e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000932:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000936:	7e5b      	ldrb	r3, [r3, #25]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	431a      	orrs	r2, r3
 800093c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000940:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000944:	7e9b      	ldrb	r3, [r3, #26]
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	431a      	orrs	r2, r3
 800094a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800094e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000952:	7edb      	ldrb	r3, [r3, #27]
 8000954:	061b      	lsls	r3, r3, #24
 8000956:	4313      	orrs	r3, r2
 8000958:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    uint32_t bytesPerSecond = header[28] | (header[29] << 8) | (header[30] << 16) | (header[31] << 24);
 800095c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000960:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000964:	7f1b      	ldrb	r3, [r3, #28]
 8000966:	461a      	mov	r2, r3
 8000968:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800096c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000970:	7f5b      	ldrb	r3, [r3, #29]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	431a      	orrs	r2, r3
 8000976:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800097a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800097e:	7f9b      	ldrb	r3, [r3, #30]
 8000980:	041b      	lsls	r3, r3, #16
 8000982:	431a      	orrs	r2, r3
 8000984:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000988:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800098c:	7fdb      	ldrb	r3, [r3, #31]
 800098e:	061b      	lsls	r3, r3, #24
 8000990:	4313      	orrs	r3, r2
 8000992:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
    uint16_t bytesPerSample = header[32] | (header[33] << 8);
 8000996:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800099a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800099e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80009a8:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80009ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	f8a7 326e 	strh.w	r3, [r7, #622]	; 0x26e
    uint16_t bitsPerSamplePerChannel = header[34] | (header[35] << 8);
 80009bc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80009c0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80009c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80009ce:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80009d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b21b      	sxth	r3, r3
 80009da:	4313      	orrs	r3, r2
 80009dc:	b21b      	sxth	r3, r3
 80009de:	f8a7 326c 	strh.w	r3, [r7, #620]	; 0x26c
    uint32_t dataSize = header[40] | (header[41] << 8) | (header[42] << 16) | (header[43] << 24);
 80009e2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80009e6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80009ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009ee:	461a      	mov	r2, r3
 80009f0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80009f4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80009f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	431a      	orrs	r2, r3
 8000a00:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000a04:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000a08:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a0c:	041b      	lsls	r3, r3, #16
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000a14:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000a18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a1c:	061b      	lsls	r3, r3, #24
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
//        "Data size: %ld\r\n"
//        "------------------\r\n",
//        fileSize, headerSizeLeft, compression, channelsNum, sampleRate, bytesPerSecond, bytesPerSample,
//        bitsPerSamplePerChannel, dataSize);

    if(headerSizeLeft != 16) {
 8000a24:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8000a28:	2b10      	cmp	r3, #16
 8000a2a:	d006      	beq.n	8000a3a <playWavFile+0x266>
        //UART_Printf("Wrong `headerSizeLeft` value, 16 expected\r\n");
        f_close(&file);
 8000a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a30:	4618      	mov	r0, r3
 8000a32:	f007 fb03 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0e3      	b.n	8000c02 <playWavFile+0x42e>
    }

    if(compression != 1) {
 8000a3a:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d006      	beq.n	8000a50 <playWavFile+0x27c>
        //UART_Printf("Wrong `compression` value, 1 expected\r\n");
        f_close(&file);
 8000a42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 faf8 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e0d8      	b.n	8000c02 <playWavFile+0x42e>
    }

    if(channelsNum != 2) {
 8000a50:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d006      	beq.n	8000a66 <playWavFile+0x292>
        //UART_Printf("Wrong `channelsNum` value, 2 expected\r\n");
        f_close(&file);
 8000a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f007 faed 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0cd      	b.n	8000c02 <playWavFile+0x42e>
    }

    if((sampleRate != 44100) || (bytesPerSample != 4) || (bitsPerSamplePerChannel != 16) || (bytesPerSecond != 44100*2*2)
 8000a66:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8000a6a:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d111      	bne.n	8000a96 <playWavFile+0x2c2>
 8000a72:	f8b7 326e 	ldrh.w	r3, [r7, #622]	; 0x26e
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d10d      	bne.n	8000a96 <playWavFile+0x2c2>
 8000a7a:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 8000a7e:	2b10      	cmp	r3, #16
 8000a80:	d109      	bne.n	8000a96 <playWavFile+0x2c2>
 8000a82:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <playWavFile+0x398>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d104      	bne.n	8000a96 <playWavFile+0x2c2>
       || (dataSize < sizeof(signal_buff1) + sizeof(signal_buff2))) {
 8000a8c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a94:	d206      	bcs.n	8000aa4 <playWavFile+0x2d0>
        //UART_Printf("Wrong file format, 16 bit file with sample rate 44100 expected\r\n");
        f_close(&file);
 8000a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 face 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e0ae      	b.n	8000c02 <playWavFile+0x42e>
    }

    res = f_read(&file, (uint8_t*)signal_buff1, sizeof(signal_buff1), &bytesRead);
 8000aa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab0:	492f      	ldr	r1, [pc, #188]	; (8000b70 <playWavFile+0x39c>)
 8000ab2:	f007 f89e 	bl	8007bf2 <f_read>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 8000abc:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <playWavFile+0x2fe>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 8000ac4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f007 fab7 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e097      	b.n	8000c02 <playWavFile+0x42e>
    }

    res = f_read(&file, (uint8_t*)signal_buff2, sizeof(signal_buff2), &bytesRead);
 8000ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	4925      	ldr	r1, [pc, #148]	; (8000b74 <playWavFile+0x3a0>)
 8000ae0:	f007 f887 	bl	8007bf2 <f_read>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 8000aea:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <playWavFile+0x32c>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 8000af2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 faa0 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e080      	b.n	8000c02 <playWavFile+0x42e>
    }

    read_next_chunk = true;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <playWavFile+0x3a4>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
    end_of_file_reached = false;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <playWavFile+0x3a8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
    signal_play_buff = signal_buff1;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <playWavFile+0x3ac>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <playWavFile+0x39c>)
 8000b10:	601a      	str	r2, [r3, #0]
    signal_read_buff = signal_buff2;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <playWavFile+0x3b0>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <playWavFile+0x3a0>)
 8000b16:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef hal_res;
    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 8000b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    hal_res = HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_buff1, nsamples);
 8000b20:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	4911      	ldr	r1, [pc, #68]	; (8000b70 <playWavFile+0x39c>)
 8000b2a:	4817      	ldr	r0, [pc, #92]	; (8000b88 <playWavFile+0x3b4>)
 8000b2c:	f001 feae 	bl	800288c <HAL_I2S_Transmit_IT>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
    // hal_res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal_buff1, nsamples, 2000);
    if(hal_res != HAL_OK) {
 8000b36:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d047      	beq.n	8000bce <playWavFile+0x3fa>
        //UART_Printf("I2S - HAL_I2S_Transmit failed, hal_res = %d!\r\n", hal_res);
        f_close(&file);
 8000b3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b42:	4618      	mov	r0, r3
 8000b44:	f007 fa7a 	bl	800803c <f_close>
        return EXIT_FAILURE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e05a      	b.n	8000c02 <playWavFile+0x42e>
    }

    while(dataSize >= sizeof(signal_buff1)) {
        if(!read_next_chunk) {
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <playWavFile+0x3a4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d017      	beq.n	8000b8c <playWavFile+0x3b8>
            continue;
 8000b5c:	e037      	b.n	8000bce <playWavFile+0x3fa>
 8000b5e:	bf00      	nop
 8000b60:	0800842c 	.word	0x0800842c
 8000b64:	08008434 	.word	0x08008434
 8000b68:	08008440 	.word	0x08008440
 8000b6c:	0002b110 	.word	0x0002b110
 8000b70:	200003f0 	.word	0x200003f0
 8000b74:	200023f0 	.word	0x200023f0
 8000b78:	200003e5 	.word	0x200003e5
 8000b7c:	200003e4 	.word	0x200003e4
 8000b80:	200003e8 	.word	0x200003e8
 8000b84:	200003ec 	.word	0x200003ec
 8000b88:	200000a8 	.word	0x200000a8
        }

        read_next_chunk = false;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <playWavFile+0x438>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]

        res = f_read(&file, (uint8_t*)signal_read_buff, sizeof(signal_buff1), &bytesRead);
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <playWavFile+0x43c>)
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b9a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba2:	f007 f826 	bl	8007bf2 <f_read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
        if(res != FR_OK) {
 8000bac:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <playWavFile+0x3ee>
            //UART_Printf("f_read() failed, res = %d\r\n", res);
            f_close(&file);
 8000bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f007 fa3f 	bl	800803c <f_close>
            return EXIT_FAILURE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e01f      	b.n	8000c02 <playWavFile+0x42e>
        }

        dataSize -= sizeof(signal_buff1);
 8000bc2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000bc6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000bca:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
    while(dataSize >= sizeof(signal_buff1)) {
 8000bce:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd6:	d2b9      	bcs.n	8000b4c <playWavFile+0x378>
    }

    end_of_file_reached = true;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <playWavFile+0x440>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]

    res = f_close(&file);
 8000bde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be2:	4618      	mov	r0, r3
 8000be4:	f007 fa2a 	bl	800803c <f_close>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 8000bee:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <playWavFile+0x426>
        //UART_Printf("f_close() failed, res = %d\r\n", res);
        return EXIT_FAILURE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e003      	b.n	8000c02 <playWavFile+0x42e>
    }

    playIndex = 0;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <playWavFile+0x444>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]

    return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200003e5 	.word	0x200003e5
 8000c10:	200003ec 	.word	0x200003ec
 8000c14:	200003e4 	.word	0x200003e4
 8000c18:	200001b0 	.word	0x200001b0

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fcf1 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f875 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 f9a7 	bl	8000f7c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000c2e:	f000 f937 	bl	8000ea0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c32:	f004 fddf 	bl	80057f4 <MX_FATFS_Init>
  MX_I2S2_Init();
 8000c36:	f000 f90b 	bl	8000e50 <MX_I2S2_Init>
  MX_ADC1_Init();
 8000c3a:	f000 f8cb 	bl	8000dd4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000c3e:	f000 f94f 	bl	8000ee0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000c42:	4828      	ldr	r0, [pc, #160]	; (8000ce4 <main+0xc8>)
 8000c44:	f001 f9a4 	bl	8001f90 <HAL_ADCEx_Calibration_Start>

  // Start timer to check ADC on interrupts
  HAL_TIM_Base_Start_IT(&htim4);
 8000c48:	4827      	ldr	r0, [pc, #156]	; (8000ce8 <main+0xcc>)
 8000c4a:	f003 fccd 	bl	80045e8 <HAL_TIM_Base_Start_IT>

  // Clear any existing shift register data
  	HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[0]);
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <main+0xd0>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	4a27      	ldr	r2, [pc, #156]	; (8000cf0 <main+0xd4>)
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <main+0xd8>)
 8000c5a:	f001 fd00 	bl	800265e <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[1]);
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <main+0xd0>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <main+0xd4>)
 8000c64:	7852      	ldrb	r2, [r2, #1]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4822      	ldr	r0, [pc, #136]	; (8000cf4 <main+0xd8>)
 8000c6a:	f001 fcf8 	bl	800265e <HAL_GPIO_WritePin>

  	// Store cleared data and Enable output
  	HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[1]);
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <main+0xdc>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <main+0xd4>)
 8000c74:	7852      	ldrb	r2, [r2, #1]
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <main+0xd8>)
 8000c7a:	f001 fcf0 	bl	800265e <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[0]);
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <main+0xdc>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <main+0xd4>)
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4619      	mov	r1, r3
 8000c88:	481a      	ldr	r0, [pc, #104]	; (8000cf4 <main+0xd8>)
 8000c8a:	f001 fce8 	bl	800265e <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, shiftOutputEnable, GPIOPinSet[0]);
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <main+0xe0>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <main+0xd4>)
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4816      	ldr	r0, [pc, #88]	; (8000cf4 <main+0xd8>)
 8000c9a:	f001 fce0 	bl	800265e <HAL_GPIO_WritePin>

  FRESULT res = f_mount(&fs, "XMAS-23", 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4917      	ldr	r1, [pc, #92]	; (8000d00 <main+0xe4>)
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <main+0xe8>)
 8000ca4:	f006 fce4 	bl	8007670 <f_mount>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
	 if(res != FR_OK) {
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <main+0x9a>
	   return EXIT_FAILURE;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e011      	b.n	8000cda <main+0xbe>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  playWavFile(fileNames[playIndex]);
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <main+0xec>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <main+0xf0>)
 8000cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd86 	bl	80007d4 <playWavFile>
	  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <main+0xf4>)
 8000cca:	f001 fcf9 	bl	80026c0 <HAL_I2S_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f0      	beq.n	8000cb6 <main+0x9a>
		   Error_Handler();
 8000cd4:	f000 facc 	bl	8001270 <Error_Handler>
	  playWavFile(fileNames[playIndex]);
 8000cd8:	e7ed      	b.n	8000cb6 <main+0x9a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	20000168 	.word	0x20000168
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	2000001c 	.word	0x2000001c
 8000cf4:	40010c00 	.word	0x40010c00
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000002 	.word	0x20000002
 8000d00:	08008448 	.word	0x08008448
 8000d04:	200001b4 	.word	0x200001b4
 8000d08:	200001b0 	.word	0x200001b0
 8000d0c:	20000024 	.word	0x20000024
 8000d10:	200000a8 	.word	0x200000a8

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	; 0x58
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1e:	2228      	movs	r2, #40	; 0x28
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 fb2e 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fed4 	bl	8002b1c <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d7a:	f000 fa79 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 f940 	bl	8003020 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000da6:	f000 fa63 	bl	8001270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2S2;
 8000daa:	2306      	movs	r3, #6
 8000dac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 faac 	bl	8003318 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dc6:	f000 fa53 	bl	8001270 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3758      	adds	r7, #88	; 0x58
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <MX_ADC1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000dfe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e12:	f000 fc7f 	bl	8001714 <HAL_ADC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 fa28 	bl	8001270 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_ADC1_Init+0x74>)
 8000e32:	f000 ff19 	bl	8001c68 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e3c:	f000 fa18 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000078 	.word	0x20000078
 8000e4c:	40012400 	.word	0x40012400

08000e50 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <MX_I2S2_Init+0x4c>)
 8000e58:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e76:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e7a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_I2S2_Init+0x48>)
 8000e84:	f001 fc1c 	bl	80026c0 <HAL_I2S_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000e8e:	f000 f9ef 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000a8 	.word	0x200000a8
 8000e9c:	40003800 	.word	0x40003800

08000ea0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <MX_SDIO_SD_Init+0x3c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <MX_SDIO_SD_Init+0x38>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200000e4 	.word	0x200000e4
 8000edc:	40018000 	.word	0x40018000

08000ee0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <MX_TIM4_Init+0x98>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4801-1;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f04:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000f08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f26:	f003 fb0f 	bl	8004548 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f30:	f000 f99e 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f42:	f003 fcb9 	bl	80048b8 <HAL_TIM_ConfigClockSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 f990 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f5e:	f003 fea7 	bl	8004cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f68:	f000 f982 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000168 	.word	0x20000168
 8000f78:	40000800 	.word	0x40000800

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f90:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <MX_GPIO_Init+0x194>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a5e      	ldr	r2, [pc, #376]	; (8001110 <MX_GPIO_Init+0x194>)
 8000f96:	f043 0320 	orr.w	r3, r3, #32
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <MX_GPIO_Init+0x194>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b59      	ldr	r3, [pc, #356]	; (8001110 <MX_GPIO_Init+0x194>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a58      	ldr	r2, [pc, #352]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	4b53      	ldr	r3, [pc, #332]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b50      	ldr	r3, [pc, #320]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <MX_GPIO_Init+0x194>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2S_AMP_SD_GPIO_Port, I2S_AMP_SD_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	4847      	ldr	r0, [pc, #284]	; (8001114 <MX_GPIO_Init+0x198>)
 8000ff6:	f001 fb32 	bl	800265e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	4846      	ldr	r0, [pc, #280]	; (8001118 <MX_GPIO_Init+0x19c>)
 8001000:	f001 fb2d 	bl	800265e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFT_OE_Pin|SHIFT_DATA_OUT_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 8001004:	2200      	movs	r2, #0
 8001006:	f640 4107 	movw	r1, #3079	; 0xc07
 800100a:	4844      	ldr	r0, [pc, #272]	; (800111c <MX_GPIO_Init+0x1a0>)
 800100c:	f001 fb27 	bl	800265e <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : I2S_AMP_SD_Pin */
  GPIO_InitStruct.Pin = I2S_AMP_SD_Pin;
 8001010:	2304      	movs	r3, #4
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S_AMP_SD_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	483b      	ldr	r0, [pc, #236]	; (8001114 <MX_GPIO_Init+0x198>)
 8001028:	f001 f96e 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin;
 800102c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <MX_GPIO_Init+0x1a4>)
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	4834      	ldr	r0, [pc, #208]	; (8001114 <MX_GPIO_Init+0x198>)
 8001042:	f001 f961 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8001046:	2310      	movs	r3, #16
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_GPIO_Init+0x1a4>)
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	482f      	ldr	r0, [pc, #188]	; (8001118 <MX_GPIO_Init+0x19c>)
 800105a:	f001 f955 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 800105e:	2320      	movs	r3, #32
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2302      	movs	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4619      	mov	r1, r3
 8001074:	4828      	ldr	r0, [pc, #160]	; (8001118 <MX_GPIO_Init+0x19c>)
 8001076:	f001 f947 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFT_OE_Pin SHIFT_DATA_OUT_Pin SHIFT_DATA_CLK_Pin SHIFT_STORE_CLK_Pin
                           SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SHIFT_OE_Pin|SHIFT_DATA_OUT_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 800107a:	f640 4307 	movw	r3, #3079	; 0xc07
 800107e:	613b      	str	r3, [r7, #16]
                          |SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2302      	movs	r3, #2
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_GPIO_Init+0x1a0>)
 8001094:	f001 f938 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <MX_GPIO_Init+0x19c>)
 80010ac:	f001 f92c 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_10_Pin BUTTON_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_10_Pin|BUTTON_8_Pin;
 80010b0:	2328      	movs	r3, #40	; 0x28
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_GPIO_Init+0x1a4>)
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <MX_GPIO_Init+0x1a0>)
 80010c4:	f001 f920 	bl	8002308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2103      	movs	r1, #3
 80010cc:	2009      	movs	r0, #9
 80010ce:	f001 f8e4 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010d2:	2009      	movs	r0, #9
 80010d4:	f001 f8fd 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2103      	movs	r1, #3
 80010dc:	200a      	movs	r0, #10
 80010de:	f001 f8dc 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f001 f8f5 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2103      	movs	r1, #3
 80010ec:	2017      	movs	r0, #23
 80010ee:	f001 f8d4 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010f2:	2017      	movs	r0, #23
 80010f4:	f001 f8ed 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2103      	movs	r1, #3
 80010fc:	2028      	movs	r0, #40	; 0x28
 80010fe:	f001 f8cc 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001102:	2028      	movs	r0, #40	; 0x28
 8001104:	f001 f8e5 	bl	80022d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800
 8001118:	40011000 	.word	0x40011000
 800111c:	40010c00 	.word	0x40010c00
 8001120:	10110000 	.word	0x10110000

08001124 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == buttonIn_1)
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_GPIO_EXTI_Callback+0xc8>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	88fa      	ldrh	r2, [r7, #6]
 8001134:	429a      	cmp	r2, r3
 8001136:	d103      	bne.n	8001140 <HAL_GPIO_EXTI_Callback+0x1c>
		playIndex = 1;
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
	else if(GPIO_Pin == buttonIn_9)
		playIndex = 9;
	else if(GPIO_Pin == buttonIn_10)
		playIndex = 10;

}
 800113e:	e04f      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_2)
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	429a      	cmp	r2, r3
 8001148:	d103      	bne.n	8001152 <HAL_GPIO_EXTI_Callback+0x2e>
		playIndex = 2;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800114c:	2202      	movs	r2, #2
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	e046      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_3)
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	88fa      	ldrh	r2, [r7, #6]
 8001158:	429a      	cmp	r2, r3
 800115a:	d103      	bne.n	8001164 <HAL_GPIO_EXTI_Callback+0x40>
		playIndex = 3;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800115e:	2203      	movs	r2, #3
 8001160:	701a      	strb	r2, [r3, #0]
}
 8001162:	e03d      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_4)
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	429a      	cmp	r2, r3
 800116c:	d103      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x52>
		playIndex = 4;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001170:	2204      	movs	r2, #4
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	e034      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_5)
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	429a      	cmp	r2, r3
 800117e:	d103      	bne.n	8001188 <HAL_GPIO_EXTI_Callback+0x64>
		playIndex = 5;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001182:	2205      	movs	r2, #5
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	e02b      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_6)
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_GPIO_EXTI_Callback+0xe0>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	d103      	bne.n	800119a <HAL_GPIO_EXTI_Callback+0x76>
		playIndex = 6;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001194:	2206      	movs	r2, #6
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	e022      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_7)
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_EXTI_Callback+0xe4>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d103      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x88>
		playIndex = 7;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011a6:	2207      	movs	r2, #7
 80011a8:	701a      	strb	r2, [r3, #0]
}
 80011aa:	e019      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_8)
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_GPIO_EXTI_Callback+0xe8>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d103      	bne.n	80011be <HAL_GPIO_EXTI_Callback+0x9a>
		playIndex = 8;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011b8:	2208      	movs	r2, #8
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	e010      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_9)
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_GPIO_EXTI_Callback+0xec>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d103      	bne.n	80011d0 <HAL_GPIO_EXTI_Callback+0xac>
		playIndex = 9;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011ca:	2209      	movs	r2, #9
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	e007      	b.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_10)
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_GPIO_EXTI_Callback+0xf0>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_EXTI_Callback+0xbc>
		playIndex = 10;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011dc:	220a      	movs	r2, #10
 80011de:	701a      	strb	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000006 	.word	0x20000006
 80011f0:	200001b0 	.word	0x200001b0
 80011f4:	20000008 	.word	0x20000008
 80011f8:	2000000a 	.word	0x2000000a
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	2000000e 	.word	0x2000000e
 8001204:	20000010 	.word	0x20000010
 8001208:	20000012 	.word	0x20000012
 800120c:	20000014 	.word	0x20000014
 8001210:	20000016 	.word	0x20000016
 8001214:	20000018 	.word	0x20000018

08001218 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim4)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d119      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x44>
  {
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8001228:	480f      	ldr	r0, [pc, #60]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800122a:	f000 fb5d 	bl	80018e8 <HAL_ADC_Start>

	 // Poll ADC1 Peripheral & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 800122e:	2101      	movs	r1, #1
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001232:	f000 fc07 	bl	8001a44 <HAL_ADC_PollForConversion>

	  // Read The ADC Conversion Result & Map It To Shift register
	  // Resolution = 12 bit, 2^12 = 4096
	  uint16_t ADC_Return = HAL_ADC_GetValue(&hadc1);
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001238:	f000 fd0a 	bl	8001c50 <HAL_ADC_GetValue>
 800123c:	4603      	mov	r3, r0
 800123e:	81fb      	strh	r3, [r7, #14]
	  volume = ((float)ADC_Return) / 4096.0;
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8a4 	bl	8000390 <__aeabi_ui2f>
 8001248:	4603      	mov	r3, r0
 800124a:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f9aa 	bl	80005a8 <__aeabi_fdiv>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800125a:	601a      	str	r2, [r3, #0]

  }
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000168 	.word	0x20000168
 8001268:	20000078 	.word	0x20000078
 800126c:	20000020 	.word	0x20000020

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_MspInit+0x5c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_MspInit+0x5c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_MspInit+0x5c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_MspInit+0x60>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_MspInit+0x60>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000

080012e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <HAL_ADC_MspInit+0x6c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d121      	bne.n	8001344 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_ADC_MspInit+0x70>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_ADC_MspInit+0x70>)
 8001306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_ADC_MspInit+0x70>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_ADC_MspInit+0x70>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_ADC_MspInit+0x70>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_ADC_MspInit+0x70>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001330:	2302      	movs	r3, #2
 8001332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_ADC_MspInit+0x74>)
 8001340:	f000 ffe2 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40012400 	.word	0x40012400
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800

08001358 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_I2S_MspInit+0x84>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d12c      	bne.n	80013d2 <HAL_I2S_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_I2S_MspInit+0x88>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_I2S_MspInit+0x88>)
 800137e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001382:	61d3      	str	r3, [r2, #28]
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_I2S_MspInit+0x88>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_I2S_MspInit+0x88>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <HAL_I2S_MspInit+0x88>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_I2S_MspInit+0x88>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80013a8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80013ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_I2S_MspInit+0x8c>)
 80013be:	f000 ffa3 	bl	8002308 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2102      	movs	r1, #2
 80013c6:	2024      	movs	r0, #36	; 0x24
 80013c8:	f000 ff67 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013cc:	2024      	movs	r0, #36	; 0x24
 80013ce:	f000 ff80 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40003800 	.word	0x40003800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_SD_MspInit+0xa4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d13c      	bne.n	8001482 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_SD_MspInit+0xa8>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_SD_MspInit+0xa8>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6153      	str	r3, [r2, #20]
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_SD_MspInit+0xa8>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_SD_MspInit+0xa8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <HAL_SD_MspInit+0xa8>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_SD_MspInit+0xa8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_SD_MspInit+0xa8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_SD_MspInit+0xa8>)
 800143e:	f043 0320 	orr.w	r3, r3, #32
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_SD_MspInit+0xa8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001450:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	4619      	mov	r1, r3
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <HAL_SD_MspInit+0xac>)
 8001466:	f000 ff4f 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800146a:	2304      	movs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4619      	mov	r1, r3
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_SD_MspInit+0xb0>)
 800147e:	f000 ff43 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40018000 	.word	0x40018000
 8001490:	40021000 	.word	0x40021000
 8001494:	40011000 	.word	0x40011000
 8001498:	40011400 	.word	0x40011400

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_TIM_Base_MspInit+0x44>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d113      	bne.n	80014d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_TIM_Base_MspInit+0x48>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_TIM_Base_MspInit+0x48>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_TIM_Base_MspInit+0x48>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201e      	movs	r0, #30
 80014cc:	f000 fee5 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014d0:	201e      	movs	r0, #30
 80014d2:	f000 fefe 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40000800 	.word	0x40000800
 80014e4:	40021000 	.word	0x40021000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f8b1 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}

08001536 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_10_Pin);
 800153a:	2008      	movs	r0, #8
 800153c:	f001 f8a8 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8001548:	2010      	movs	r0, #16
 800154a:	f001 f8a1 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}

08001552 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_8_Pin);
 8001556:	2020      	movs	r0, #32
 8001558:	f001 f89a 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 800155c:	2080      	movs	r0, #128	; 0x80
 800155e:	f001 f897 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8001562:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001566:	f001 f893 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 800156a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800156e:	f001 f88f 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM4_IRQHandler+0x10>)
 800157e:	f003 f893 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000168 	.word	0x20000168

0800158c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <SPI2_IRQHandler+0x10>)
 8001592:	f001 f9eb 	bl	800296c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000a8 	.word	0x200000a8

080015a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_5_Pin);
 80015a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015a8:	f001 f872 	bl	8002690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff fff8 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c2:	490c      	ldr	r1, [pc, #48]	; (80015f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d8:	4c09      	ldr	r4, [pc, #36]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f006 fe99 	bl	800831c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fb17 	bl	8000c1c <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015f8:	08008570 	.word	0x08008570
  ldr r2, =_sbss
 80015fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001600:	20004428 	.word	0x20004428

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fe33 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fe2a 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fe4b 	bl	80022ee <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 fe13 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000050 	.word	0x20000050
 800168c:	20000058 	.word	0x20000058
 8001690:	20000054 	.word	0x20000054

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000058 	.word	0x20000058
 80016b4:	200043f0 	.word	0x200043f0

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	200043f0 	.word	0x200043f0

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffe0 	bl	80016b8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000058 	.word	0x20000058

08001714 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0ce      	b.n	80018d4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fdc4 	bl	80012e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fbd7 	bl	8001f0c <ADC_ConversionStop_Disable>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80a9 	bne.w	80018c2 <HAL_ADC_Init+0x1ae>
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 80a5 	bne.w	80018c2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001780:	f023 0302 	bic.w	r3, r3, #2
 8001784:	f043 0202 	orr.w	r2, r3, #2
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4951      	ldr	r1, [pc, #324]	; (80018dc <HAL_ADC_Init+0x1c8>)
 8001796:	428b      	cmp	r3, r1
 8001798:	d10a      	bne.n	80017b0 <HAL_ADC_Init+0x9c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80017a2:	d002      	beq.n	80017aa <HAL_ADC_Init+0x96>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	e004      	b.n	80017b4 <HAL_ADC_Init+0xa0>
 80017aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017ae:	e001      	b.n	80017b4 <HAL_ADC_Init+0xa0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7b1b      	ldrb	r3, [r3, #12]
 80017ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017cc:	d003      	beq.n	80017d6 <HAL_ADC_Init+0xc2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_ADC_Init+0xc8>
 80017d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017da:	e000      	b.n	80017de <HAL_ADC_Init+0xca>
 80017dc:	2300      	movs	r3, #0
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7d1b      	ldrb	r3, [r3, #20]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d119      	bne.n	8001820 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	035a      	lsls	r2, r3, #13
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e00b      	b.n	8001820 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_ADC_Init+0x1cc>)
 800183c:	4013      	ands	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	430b      	orrs	r3, r1
 8001846:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001850:	d003      	beq.n	800185a <HAL_ADC_Init+0x146>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d104      	bne.n	8001864 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	3b01      	subs	r3, #1
 8001860:	051b      	lsls	r3, r3, #20
 8001862:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	430a      	orrs	r2, r1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_ADC_Init+0x1d0>)
 8001880:	4013      	ands	r3, r2
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d10b      	bne.n	80018a0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189e:	e018      	b.n	80018d2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f023 0312 	bic.w	r3, r3, #18
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c0:	e007      	b.n	80018d2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f043 0210 	orr.w	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40013c00 	.word	0x40013c00
 80018e0:	ffe1f7fd 	.word	0xffe1f7fd
 80018e4:	ff1f0efe 	.word	0xff1f0efe

080018e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Start+0x1a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e098      	b.n	8001a34 <HAL_ADC_Start+0x14c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 faa4 	bl	8001e58 <ADC_Enable>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 8087 	bne.w	8001a2a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a41      	ldr	r2, [pc, #260]	; (8001a3c <HAL_ADC_Start+0x154>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d105      	bne.n	8001946 <HAL_ADC_Start+0x5e>
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_ADC_Start+0x158>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d115      	bne.n	8001972 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d026      	beq.n	80019ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001968:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001970:	e01d      	b.n	80019ae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <HAL_ADC_Start+0x158>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_ADC_Start+0xaa>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <HAL_ADC_Start+0x154>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10d      	bne.n	80019ae <HAL_ADC_Start+0xc6>
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <HAL_ADC_Start+0x158>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f023 0206 	bic.w	r2, r3, #6
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019c6:	e002      	b.n	80019ce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f06f 0202 	mvn.w	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019ee:	d113      	bne.n	8001a18 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019f4:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_ADC_Start+0x154>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d105      	bne.n	8001a06 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_ADC_Start+0x158>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	e00c      	b.n	8001a32 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	e003      	b.n	8001a32 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40012800 	.word	0x40012800
 8001a40:	40012400 	.word	0x40012400

08001a44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a5a:	f7ff fe2d 	bl	80016b8 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0d3      	b.n	8001c2e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d131      	bne.n	8001af8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12a      	bne.n	8001af8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aa2:	e021      	b.n	8001ae8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aaa:	d01d      	beq.n	8001ae8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0x7e>
 8001ab2:	f7ff fe01 	bl	80016b8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d212      	bcs.n	8001ae8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f043 0204 	orr.w	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0a2      	b.n	8001c2e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0d6      	beq.n	8001aa4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001af6:	e070      	b.n	8001bda <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_ADC_PollForConversion+0x1f4>)
 8001afa:	681c      	ldr	r4, [r3, #0]
 8001afc:	2002      	movs	r0, #2
 8001afe:	f001 fcc1 	bl	8003484 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b02:	4603      	mov	r3, r0
 8001b04:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6919      	ldr	r1, [r3, #16]
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_ADC_PollForConversion+0x1f8>)
 8001b10:	400b      	ands	r3, r1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x104>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68d9      	ldr	r1, [r3, #12]
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_ADC_PollForConversion+0x1fc>)
 8001b1e:	400b      	ands	r3, r1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_ADC_PollForConversion+0x104>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_ADC_PollForConversion+0x200>)
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x100>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68d9      	ldr	r1, [r3, #12]
 8001b38:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <HAL_ADC_PollForConversion+0x204>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_PollForConversion+0x100>
 8001b40:	2314      	movs	r3, #20
 8001b42:	e020      	b.n	8001b86 <HAL_ADC_PollForConversion+0x142>
 8001b44:	2329      	movs	r3, #41	; 0x29
 8001b46:	e01e      	b.n	8001b86 <HAL_ADC_PollForConversion+0x142>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6919      	ldr	r1, [r3, #16]
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_ADC_PollForConversion+0x200>)
 8001b50:	400b      	ands	r3, r1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_PollForConversion+0x120>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <HAL_ADC_PollForConversion+0x204>)
 8001b5e:	400b      	ands	r3, r1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00d      	beq.n	8001b80 <HAL_ADC_PollForConversion+0x13c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_ADC_PollForConversion+0x208>)
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d108      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x140>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68d9      	ldr	r1, [r3, #12]
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_ADC_PollForConversion+0x208>)
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x140>
 8001b80:	2354      	movs	r3, #84	; 0x54
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_PollForConversion+0x142>
 8001b84:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b8c:	e021      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d01a      	beq.n	8001bcc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_ADC_PollForConversion+0x168>
 8001b9c:	f7ff fd8c 	bl	80016b8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d20f      	bcs.n	8001bcc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d90b      	bls.n	8001bcc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e030      	b.n	8001c2e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d8d9      	bhi.n	8001b8e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f06f 0212 	mvn.w	r2, #18
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bfa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bfe:	d115      	bne.n	8001c2c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d111      	bne.n	8001c2c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000050 	.word	0x20000050
 8001c3c:	24924924 	.word	0x24924924
 8001c40:	00924924 	.word	0x00924924
 8001c44:	12492492 	.word	0x12492492
 8001c48:	00492492 	.word	0x00492492
 8001c4c:	00249249 	.word	0x00249249

08001c50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x20>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e0dc      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x1da>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b06      	cmp	r3, #6
 8001c96:	d81c      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b05      	subs	r3, #5
 8001caa:	221f      	movs	r2, #31
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b05      	subs	r3, #5
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd0:	e03c      	b.n	8001d4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d81c      	bhi.n	8001d14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b23      	subs	r3, #35	; 0x23
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b23      	subs	r3, #35	; 0x23
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
 8001d12:	e01b      	b.n	8001d4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b41      	subs	r3, #65	; 0x41
 8001d26:	221f      	movs	r2, #31
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4019      	ands	r1, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b41      	subs	r3, #65	; 0x41
 8001d40:	fa00 f203 	lsl.w	r2, r0, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d91c      	bls.n	8001d8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68d9      	ldr	r1, [r3, #12]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	3b1e      	subs	r3, #30
 8001d66:	2207      	movs	r2, #7
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4019      	ands	r1, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6898      	ldr	r0, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	fa00 f203 	lsl.w	r2, r0, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	e019      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6919      	ldr	r1, [r3, #16]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2207      	movs	r2, #7
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6898      	ldr	r0, [r3, #8]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dce:	2b11      	cmp	r3, #17
 8001dd0:	d132      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_ADC_ConfigChannel+0x1e4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d125      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d126      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001df8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d11a      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	0c9a      	lsrs	r2, r3, #18
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x1b2>
 8001e26:	e007      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	40012400 	.word	0x40012400
 8001e50:	20000050 	.word	0x20000050
 8001e54:	431bde83 	.word	0x431bde83

08001e58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d040      	beq.n	8001ef8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <ADC_Enable+0xac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <ADC_Enable+0xb0>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	0c9b      	lsrs	r3, r3, #18
 8001e92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e94:	e002      	b.n	8001e9c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ea2:	f7ff fc09 	bl	80016b8 <HAL_GetTick>
 8001ea6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ea8:	e01f      	b.n	8001eea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eaa:	f7ff fc05 	bl	80016b8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d918      	bls.n	8001eea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d011      	beq.n	8001eea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e007      	b.n	8001efa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d1d8      	bne.n	8001eaa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000050 	.word	0x20000050
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d12e      	bne.n	8001f84 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f36:	f7ff fbbf 	bl	80016b8 <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f3c:	e01b      	b.n	8001f76 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f3e:	f7ff fbbb 	bl	80016b8 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d914      	bls.n	8001f76 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10d      	bne.n	8001f76 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e007      	b.n	8001f86 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d0dc      	beq.n	8001f3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_ADCEx_Calibration_Start+0x1e>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e097      	b.n	80020de <HAL_ADCEx_Calibration_Start+0x14e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa8 	bl	8001f0c <ADC_ConversionStop_Disable>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff49 	bl	8001e58 <ADC_Enable>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 8081 	bne.w	80020d4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fda:	f023 0302 	bic.w	r3, r3, #2
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_ADCEx_Calibration_Start+0x158>)
 8001fe8:	681c      	ldr	r4, [r3, #0]
 8001fea:	2002      	movs	r0, #2
 8001fec:	f001 fa4a 	bl	8003484 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001ff6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ff8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ffa:	e002      	b.n	8002002 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0208 	orr.w	r2, r2, #8
 8002016:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002018:	f7ff fb4e 	bl	80016b8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800201e:	e01b      	b.n	8002058 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002020:	f7ff fb4a 	bl	80016b8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b0a      	cmp	r3, #10
 800202c:	d914      	bls.n	8002058 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00d      	beq.n	8002058 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f023 0312 	bic.w	r3, r3, #18
 8002044:	f043 0210 	orr.w	r2, r3, #16
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e042      	b.n	80020de <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1dc      	bne.n	8002020 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0204 	orr.w	r2, r2, #4
 8002074:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002076:	f7ff fb1f 	bl	80016b8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800207c:	e01b      	b.n	80020b6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800207e:	f7ff fb1b 	bl	80016b8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b0a      	cmp	r3, #10
 800208a:	d914      	bls.n	80020b6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f023 0312 	bic.w	r3, r3, #18
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e013      	b.n	80020de <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1dc      	bne.n	800207e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f023 0303 	bic.w	r3, r3, #3
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000050 	.word	0x20000050

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <__NVIC_EnableIRQ+0x34>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff90 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff2d 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff42 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff90 	bl	80021dc <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5f 	bl	8002188 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff35 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b08b      	sub	sp, #44	; 0x2c
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	e179      	b.n	8002610 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800231c:	2201      	movs	r2, #1
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8168 	bne.w	800260a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a96      	ldr	r2, [pc, #600]	; (8002598 <HAL_GPIO_Init+0x290>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d05e      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	; (8002598 <HAL_GPIO_Init+0x290>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d875      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_GPIO_Init+0x294>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d058      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_GPIO_Init+0x294>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d86f      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	; (80025a0 <HAL_GPIO_Init+0x298>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d052      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_GPIO_Init+0x298>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d869      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002362:	4a90      	ldr	r2, [pc, #576]	; (80025a4 <HAL_GPIO_Init+0x29c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d04c      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002368:	4a8e      	ldr	r2, [pc, #568]	; (80025a4 <HAL_GPIO_Init+0x29c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d863      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800236e:	4a8e      	ldr	r2, [pc, #568]	; (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d046      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002374:	4a8c      	ldr	r2, [pc, #560]	; (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d85d      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800237a:	2b12      	cmp	r3, #18
 800237c:	d82a      	bhi.n	80023d4 <HAL_GPIO_Init+0xcc>
 800237e:	2b12      	cmp	r3, #18
 8002380:	d859      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002382:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_GPIO_Init+0x80>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002403 	.word	0x08002403
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023ef 	.word	0x080023ef
 8002394:	08002431 	.word	0x08002431
 8002398:	08002437 	.word	0x08002437
 800239c:	08002437 	.word	0x08002437
 80023a0:	08002437 	.word	0x08002437
 80023a4:	08002437 	.word	0x08002437
 80023a8:	08002437 	.word	0x08002437
 80023ac:	08002437 	.word	0x08002437
 80023b0:	08002437 	.word	0x08002437
 80023b4:	08002437 	.word	0x08002437
 80023b8:	08002437 	.word	0x08002437
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002437 	.word	0x08002437
 80023c4:	08002437 	.word	0x08002437
 80023c8:	08002437 	.word	0x08002437
 80023cc:	080023e5 	.word	0x080023e5
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_GPIO_Init+0x2a4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023da:	e02c      	b.n	8002436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e029      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	3304      	adds	r3, #4
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e024      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	3308      	adds	r3, #8
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e01f      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	330c      	adds	r3, #12
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e01a      	b.n	8002438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800240a:	2304      	movs	r3, #4
 800240c:	623b      	str	r3, [r7, #32]
          break;
 800240e:	e013      	b.n	8002438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002418:	2308      	movs	r3, #8
 800241a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	611a      	str	r2, [r3, #16]
          break;
 8002422:	e009      	b.n	8002438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	615a      	str	r2, [r3, #20]
          break;
 800242e:	e003      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x130>
          break;
 8002436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d801      	bhi.n	8002442 <HAL_GPIO_Init+0x13a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	e001      	b.n	8002446 <HAL_GPIO_Init+0x13e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2bff      	cmp	r3, #255	; 0xff
 800244c:	d802      	bhi.n	8002454 <HAL_GPIO_Init+0x14c>
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	e002      	b.n	800245a <HAL_GPIO_Init+0x152>
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	3b08      	subs	r3, #8
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	210f      	movs	r1, #15
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80c1 	beq.w	800260a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002488:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_GPIO_Init+0x2a8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a0:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_GPIO_Init+0x2ac>)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_GPIO_Init+0x2b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01f      	beq.n	800250c <HAL_GPIO_Init+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <HAL_GPIO_Init+0x2b4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d019      	beq.n	8002508 <HAL_GPIO_Init+0x200>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <HAL_GPIO_Init+0x2b8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1fc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a39      	ldr	r2, [pc, #228]	; (80025c4 <HAL_GPIO_Init+0x2bc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1f8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_GPIO_Init+0x2c0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1f4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a37      	ldr	r2, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x2c4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1f0>
 80024f4:	2305      	movs	r3, #5
 80024f6:	e00a      	b.n	800250e <HAL_GPIO_Init+0x206>
 80024f8:	2306      	movs	r3, #6
 80024fa:	e008      	b.n	800250e <HAL_GPIO_Init+0x206>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x206>
 8002500:	2303      	movs	r3, #3
 8002502:	e004      	b.n	800250e <HAL_GPIO_Init+0x206>
 8002504:	2302      	movs	r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x206>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_GPIO_Init+0x206>
 800250c:	2300      	movs	r3, #0
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	4093      	lsls	r3, r2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_GPIO_Init+0x2ac>)
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	4920      	ldr	r1, [pc, #128]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002550:	4013      	ands	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d006      	beq.n	800256e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	491a      	ldr	r1, [pc, #104]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	43db      	mvns	r3, r3
 8002576:	4916      	ldr	r1, [pc, #88]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002578:	4013      	ands	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d025      	beq.n	80025d4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4910      	ldr	r1, [pc, #64]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e025      	b.n	80025e2 <HAL_GPIO_Init+0x2da>
 8002596:	bf00      	nop
 8002598:	10320000 	.word	0x10320000
 800259c:	10310000 	.word	0x10310000
 80025a0:	10220000 	.word	0x10220000
 80025a4:	10210000 	.word	0x10210000
 80025a8:	10120000 	.word	0x10120000
 80025ac:	10110000 	.word	0x10110000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40010800 	.word	0x40010800
 80025bc:	40010c00 	.word	0x40010c00
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40011400 	.word	0x40011400
 80025c8:	40011800 	.word	0x40011800
 80025cc:	40011c00 	.word	0x40011c00
 80025d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_GPIO_Init+0x324>)
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4913      	ldr	r1, [pc, #76]	; (800262c <HAL_GPIO_Init+0x324>)
 80025de:	4013      	ands	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_GPIO_Init+0x324>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_GPIO_Init+0x324>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
 80025fa:	e006      	b.n	800260a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_GPIO_Init+0x324>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	43db      	mvns	r3, r3
 8002604:	4909      	ldr	r1, [pc, #36]	; (800262c <HAL_GPIO_Init+0x324>)
 8002606:	4013      	ands	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3301      	adds	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	f47f ae7e 	bne.w	800231c <HAL_GPIO_Init+0x14>
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	372c      	adds	r7, #44	; 0x2c
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	807b      	strh	r3, [r7, #2]
 800266a:	4613      	mov	r3, r2
 800266c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800266e:	787b      	ldrb	r3, [r7, #1]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002674:	887a      	ldrh	r2, [r7, #2]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800267a:	e003      	b.n	8002684 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	041a      	lsls	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	611a      	str	r2, [r3, #16]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fd38 	bl	8001124 <HAL_GPIO_EXTI_Callback>
  }
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e0d2      	b.n	8002878 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fe36 	bl	8001358 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002702:	f023 030f 	bic.w	r3, r3, #15
 8002706:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d073      	beq.n	8002800 <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002720:	2310      	movs	r3, #16
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e001      	b.n	800272a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b20      	cmp	r3, #32
 8002730:	d802      	bhi.n	8002738 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_I2S_Init+0x1c0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d104      	bne.n	800274c <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8002742:	2004      	movs	r0, #4
 8002744:	f000 fe9e 	bl	8003484 <HAL_RCCEx_GetPeriphCLKFreq>
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	e00c      	b.n	8002766 <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_I2S_Init+0x1c4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d104      	bne.n	8002760 <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 8002756:	2008      	movs	r0, #8
 8002758:	f000 fe94 	bl	8003484 <HAL_RCCEx_GetPeriphCLKFreq>
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	e002      	b.n	8002766 <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 8002760:	f000 fd48 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8002764:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276e:	d125      	bne.n	80027bc <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	461a      	mov	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	3305      	adds	r3, #5
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e01f      	b.n	80027da <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	3305      	adds	r3, #5
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	e00e      	b.n	80027da <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	3305      	adds	r3, #5
 80027d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_I2S_Init+0x1c8>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	08db      	lsrs	r3, r3, #3
 80027e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e003      	b.n	8002808 <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002800:	2302      	movs	r3, #2
 8002802:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d902      	bls.n	8002814 <HAL_I2S_Init+0x154>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2bff      	cmp	r3, #255	; 0xff
 8002812:	d907      	bls.n	8002824 <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	f043 0210 	orr.w	r2, r3, #16
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e029      	b.n	8002878 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	ea42 0103 	orr.w	r1, r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	430a      	orrs	r2, r1
 8002836:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002842:	f023 030f 	bic.w	r3, r3, #15
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6851      	ldr	r1, [r2, #4]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6892      	ldr	r2, [r2, #8]
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68d2      	ldr	r2, [r2, #12]
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6992      	ldr	r2, [r2, #24]
 800285a:	430a      	orrs	r2, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002866:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40003800 	.word	0x40003800
 8002884:	40003c00 	.word	0x40003c00
 8002888:	cccccccd 	.word	0xcccccccd

0800288c <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_I2S_Transmit_IT+0x1a>
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e05b      	b.n	8002962 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2S_Transmit_IT+0x2e>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e053      	b.n	8002962 <HAL_I2S_Transmit_IT+0xd6>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d005      	beq.n	80028da <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	e043      	b.n	8002962 <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2203      	movs	r2, #3
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d002      	beq.n	8002906 <HAL_I2S_Transmit_IT+0x7a>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d10a      	bne.n	800291c <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	845a      	strh	r2, [r3, #34]	; 0x22
 800291a:	e005      	b.n	8002928 <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002936:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d007      	beq.n	8002958 <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002956:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10e      	bne.n	80029ae <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f889 	bl	8002abe <I2S_Receive_IT>
    return;
 80029ac:	e044      	b.n	8002a38 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_I2S_IRQHandler+0x62>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	09db      	lsrs	r3, r3, #7
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f84b 	bl	8002a62 <I2S_Transmit_IT>
    return;
 80029cc:	e034      	b.n	8002a38 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d02e      	beq.n	8002a38 <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029f4:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	f043 0202 	orr.w	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a1c:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	f043 0204 	orr.w	r2, r3, #4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f80c 	bl	8002a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	1c9a      	adds	r2, r3, #2
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10e      	bne.n	8002ab6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aa6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fd fe35 	bl	8000720 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c9a      	adds	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b04:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff95 	bl	8002a3e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e272      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8087 	beq.w	8002c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b3c:	4b92      	ldr	r3, [pc, #584]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d00c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b48:	4b8f      	ldr	r3, [pc, #572]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d112      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5e>
 8002b54:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b60:	d10b      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b62:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d06c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x12c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d168      	bne.n	8002c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e24c      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x76>
 8002b84:	4b80      	ldr	r3, [pc, #512]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a7f      	ldr	r2, [pc, #508]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e02e      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x98>
 8002b9a:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a7a      	ldr	r2, [pc, #488]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b78      	ldr	r3, [pc, #480]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a77      	ldr	r2, [pc, #476]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xbc>
 8002bbe:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a71      	ldr	r2, [pc, #452]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a67      	ldr	r2, [pc, #412]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd5e 	bl	80016b8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fe fd5a 	bl	80016b8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e200      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b5d      	ldr	r3, [pc, #372]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0xe4>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fd4a 	bl	80016b8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe fd46 	bl	80016b8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1ec      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x10c>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c56:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c62:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x18c>
 8002c6e:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x176>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1c0      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4939      	ldr	r1, [pc, #228]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	e03a      	b.n	8002d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fcff 	bl	80016b8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fcfb 	bl	80016b8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1a1      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4927      	ldr	r1, [pc, #156]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <HAL_RCC_OscConfig+0x270>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fcde 	bl	80016b8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d00:	f7fe fcda 	bl	80016b8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e180      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03a      	beq.n	8002da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d019      	beq.n	8002d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7fe fcbe 	bl	80016b8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fcba 	bl	80016b8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e160      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f000 fabc 	bl	80032dc <RCC_Delay>
 8002d64:	e01c      	b.n	8002da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_RCC_OscConfig+0x274>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fca4 	bl	80016b8 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d72:	e00f      	b.n	8002d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d74:	f7fe fca0 	bl	80016b8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d908      	bls.n	8002d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e146      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	42420000 	.word	0x42420000
 8002d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b92      	ldr	r3, [pc, #584]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e9      	bne.n	8002d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a6 	beq.w	8002efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b8b      	ldr	r3, [pc, #556]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10d      	bne.n	8002dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a87      	ldr	r2, [pc, #540]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b85      	ldr	r3, [pc, #532]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b82      	ldr	r3, [pc, #520]	; (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b7f      	ldr	r3, [pc, #508]	; (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7e      	ldr	r2, [pc, #504]	; (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe fc61 	bl	80016b8 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe fc5d 	bl	80016b8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e103      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b75      	ldr	r3, [pc, #468]	; (8002fe4 <HAL_RCC_OscConfig+0x4c8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x312>
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6213      	str	r3, [r2, #32]
 8002e2c:	e02d      	b.n	8002e8a <HAL_RCC_OscConfig+0x36e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x334>
 8002e36:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4a69      	ldr	r2, [pc, #420]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6213      	str	r3, [r2, #32]
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4a66      	ldr	r2, [pc, #408]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6213      	str	r3, [r2, #32]
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCC_OscConfig+0x36e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x356>
 8002e58:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a5d      	ldr	r2, [pc, #372]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6213      	str	r3, [r2, #32]
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x36e>
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a5a      	ldr	r2, [pc, #360]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fc11 	bl	80016b8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fc0d 	bl	80016b8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0b1      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCC_OscConfig+0x37e>
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fbfb 	bl	80016b8 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe fbf7 	bl	80016b8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e09b      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4a3b      	ldr	r2, [pc, #236]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8087 	beq.w	8003012 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d061      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d146      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fbcb 	bl	80016b8 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe fbc7 	bl	80016b8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e06d      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4921      	ldr	r1, [pc, #132]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a19      	ldr	r1, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	430b      	orrs	r3, r1
 8002f72:	491b      	ldr	r1, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fb9b 	bl	80016b8 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fb97 	bl	80016b8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03d      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x46a>
 8002fa4:	e035      	b.n	8003012 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fb84 	bl	80016b8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fb80 	bl	80016b8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e026      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x498>
 8002fd2:	e01e      	b.n	8003012 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e019      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_OscConfig+0x500>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000

08003020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0d0      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d910      	bls.n	8003064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4965      	ldr	r1, [pc, #404]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800309e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d040      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d115      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e073      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b39      	ldr	r3, [pc, #228]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4936      	ldr	r1, [pc, #216]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe fad2 	bl	80016b8 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe face 	bl	80016b8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e053      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d210      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4922      	ldr	r1, [pc, #136]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490a      	ldr	r1, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1cc>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1d0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fa30 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08008494 	.word	0x08008494
 80031ec:	20000050 	.word	0x20000050
 80031f0:	20000054 	.word	0x20000054

080031f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <HAL_RCC_GetSysClockFreq+0x94>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b04      	cmp	r3, #4
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x30>
 800321e:	2b08      	cmp	r3, #8
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x36>
 8003222:	e027      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003226:	613b      	str	r3, [r7, #16]
      break;
 8003228:	e027      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0c9b      	lsrs	r3, r3, #18
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003234:	5cd3      	ldrb	r3, [r2, r3]
 8003236:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d010      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_RCC_GetSysClockFreq+0x94>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0c5b      	lsrs	r3, r3, #17
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	4a11      	ldr	r2, [pc, #68]	; (8003294 <HAL_RCC_GetSysClockFreq+0xa0>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_RCC_GetSysClockFreq+0x98>)
 8003256:	fb03 f202 	mul.w	r2, r3, r2
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e004      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	613b      	str	r3, [r7, #16]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003276:	613b      	str	r3, [r7, #16]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	693b      	ldr	r3, [r7, #16]
}
 800327c:	4618      	mov	r0, r3
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	00b71b00 	.word	0x00b71b00
 8003290:	080084ac 	.word	0x080084ac
 8003294:	080084bc 	.word	0x080084bc
 8003298:	003d0900 	.word	0x003d0900
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a4:	4b02      	ldr	r3, [pc, #8]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	20000050 	.word	0x20000050

080032b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b8:	f7ff fff2 	bl	80032a0 <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0adb      	lsrs	r3, r3, #11
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	080084a4 	.word	0x080084a4

080032dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <RCC_Delay+0x34>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <RCC_Delay+0x38>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0a5b      	lsrs	r3, r3, #9
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032f8:	bf00      	nop
  }
  while (Delay --);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e5a      	subs	r2, r3, #1
 80032fe:	60fa      	str	r2, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f9      	bne.n	80032f8 <RCC_Delay+0x1c>
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	20000050 	.word	0x20000050
 8003314:	10624dd3 	.word	0x10624dd3

08003318 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d07d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003338:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	61d3      	str	r3, [r2, #28]
 8003350:	4b49      	ldr	r3, [pc, #292]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d118      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336c:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a42      	ldr	r2, [pc, #264]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003378:	f7fe f99e 	bl	80016b8 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fe f99a 	bl	80016b8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e06d      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b3a      	ldr	r3, [pc, #232]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02e      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d027      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033bc:	4b2e      	ldr	r3, [pc, #184]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c6:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033d2:	4a29      	ldr	r2, [pc, #164]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe f969 	bl	80016b8 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe f965 	bl	80016b8 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e036      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ee      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4917      	ldr	r1, [pc, #92]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	4313      	orrs	r3, r2
 800341c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4a13      	ldr	r2, [pc, #76]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800343c:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	490b      	ldr	r1, [pc, #44]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	42420440 	.word	0x42420440

08003484 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	f200 80ae 	bhi.w	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	08003587 	.word	0x08003587
 80034b4:	080035eb 	.word	0x080035eb
 80034b8:	08003607 	.word	0x08003607
 80034bc:	08003577 	.word	0x08003577
 80034c0:	08003607 	.word	0x08003607
 80034c4:	08003607 	.word	0x08003607
 80034c8:	08003607 	.word	0x08003607
 80034cc:	0800357f 	.word	0x0800357f
 80034d0:	08003607 	.word	0x08003607
 80034d4:	08003607 	.word	0x08003607
 80034d8:	08003607 	.word	0x08003607
 80034dc:	08003607 	.word	0x08003607
 80034e0:	08003607 	.word	0x08003607
 80034e4:	08003607 	.word	0x08003607
 80034e8:	08003607 	.word	0x08003607
 80034ec:	080034f1 	.word	0x080034f1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80034f0:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80034f6:	4b49      	ldr	r3, [pc, #292]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8083 	beq.w	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	4a44      	ldr	r2, [pc, #272]	; (8003620 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800351c:	4b3f      	ldr	r3, [pc, #252]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0c5b      	lsrs	r3, r3, #17
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fbb2 f2f3 	udiv	r2, r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e004      	b.n	8003552 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4a38      	ldr	r2, [pc, #224]	; (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003552:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355e:	d102      	bne.n	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003564:	e051      	b.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4a31      	ldr	r2, [pc, #196]	; (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	61bb      	str	r3, [r7, #24]
      break;
 8003574:	e049      	b.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003576:	f7ff fe3d 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 800357a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800357c:	e048      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff fe39 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8003582:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003584:	e044      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003586:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d108      	bne.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80035a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e01e      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b4:	d109      	bne.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80035c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	e00e      	b.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d4:	d11b      	bne.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d015      	beq.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 80035e2:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 80035e4:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80035e6:	e012      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80035e8:	e011      	b.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035ea:	f7ff fe63 	bl	80032b4 <HAL_RCC_GetPCLK2Freq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0b9b      	lsrs	r3, r3, #14
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	61bb      	str	r3, [r7, #24]
      break;
 8003604:	e004      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 8003606:	bf00      	nop
 8003608:	e002      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 800360e:	bf00      	nop
    }
  }
  return (frequency);
 8003610:	69bb      	ldr	r3, [r7, #24]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	080084c0 	.word	0x080084c0
 8003624:	080084d0 	.word	0x080084d0
 8003628:	00b71b00 	.word	0x00b71b00
 800362c:	003d0900 	.word	0x003d0900
 8003630:	aaaaaaab 	.word	0xaaaaaaab
 8003634:	00016e36 	.word	0x00016e36

08003638 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e022      	b.n	8003690 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fd fec3 	bl	80013e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2203      	movs	r2, #3
 8003666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f814 	bl	8003698 <HAL_SD_InitCard>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e00a      	b.n	8003690 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af04      	add	r7, sp, #16
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80036b4:	2376      	movs	r3, #118	; 0x76
 80036b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681d      	ldr	r5, [r3, #0]
 80036bc:	466c      	mov	r4, sp
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	4628      	mov	r0, r5
 80036d2:	f001 fb6b 	bl	8004dac <SDIO_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80036dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04f      	b.n	8003788 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <HAL_SD_InitCard+0xf8>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fba0 	bl	8004e38 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_SD_InitCard+0xf8>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80036fe:	2002      	movs	r0, #2
 8003700:	f7fd ffe4 	bl	80016cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fe69 	bl	80043dc <SD_PowerON>
 800370a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e02e      	b.n	8003788 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fd87 	bl	800423e <SD_InitCard>
 8003730:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e01b      	b.n	8003788 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fbf9 	bl	8004f50 <SDMMC_CmdBlockLength>
 800375e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00f      	beq.n	8003786 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <HAL_SD_InitCard+0xfc>)
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bdb0      	pop	{r4, r5, r7, pc}
 8003790:	423000a0 	.word	0x423000a0
 8003794:	004005ff 	.word	0x004005ff

08003798 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b092      	sub	sp, #72	; 0x48
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037a6:	f7fd ff87 	bl	80016b8 <HAL_GetTick>
 80037aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d107      	bne.n	80037ca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1bd      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	f040 81b0 	bne.w	8003b38 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80037de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d907      	bls.n	80037fc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e1a4      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2203      	movs	r2, #3
 8003800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	2b01      	cmp	r3, #1
 8003812:	d002      	beq.n	800381a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	025b      	lsls	r3, r3, #9
 8003818:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	025b      	lsls	r3, r3, #9
 8003824:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003826:	2390      	movs	r3, #144	; 0x90
 8003828:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800382a:	2302      	movs	r3, #2
 800382c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003832:	2301      	movs	r3, #1
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f107 0214 	add.w	r2, r7, #20
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fb5a 	bl	8004efa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d90a      	bls.n	8003862 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2202      	movs	r2, #2
 8003850:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fbbd 	bl	8004fd8 <SDMMC_CmdReadMultiBlock>
 800385e:	6478      	str	r0, [r7, #68]	; 0x44
 8003860:	e009      	b.n	8003876 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800386e:	4618      	mov	r0, r3
 8003870:	f001 fb90 	bl	8004f94 <SDMMC_CmdReadSingleBlock>
 8003874:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7a      	ldr	r2, [pc, #488]	; (8003a6c <HAL_SD_ReadBlocks+0x2d4>)
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388a:	431a      	orrs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e151      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80038a6:	e061      	b.n	800396c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03c      	beq.n	8003930 <HAL_SD_ReadBlocks+0x198>
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d039      	beq.n	8003930 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80038bc:	2300      	movs	r3, #0
 80038be:	643b      	str	r3, [r7, #64]	; 0x40
 80038c0:	e033      	b.n	800392a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fa9a 	bl	8004e00 <SDIO_ReadFIFO>
 80038cc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	3301      	adds	r3, #1
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	3b01      	subs	r3, #1
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	3301      	adds	r3, #1
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	3b01      	subs	r3, #1
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	3301      	adds	r3, #1
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	3b01      	subs	r3, #1
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	b2da      	uxtb	r2, r3
 8003914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003916:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	3301      	adds	r3, #1
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	3b01      	subs	r3, #1
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003926:	3301      	adds	r3, #1
 8003928:	643b      	str	r3, [r7, #64]	; 0x40
 800392a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392c:	2b07      	cmp	r3, #7
 800392e:	d9c8      	bls.n	80038c2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003930:	f7fd fec2 	bl	80016b8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800393c:	429a      	cmp	r2, r3
 800393e:	d902      	bls.n	8003946 <HAL_SD_ReadBlocks+0x1ae>
 8003940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003942:	2b00      	cmp	r3, #0
 8003944:	d112      	bne.n	800396c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a48      	ldr	r2, [pc, #288]	; (8003a6c <HAL_SD_ReadBlocks+0x2d4>)
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e0ec      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003972:	f240 332a 	movw	r3, #810	; 0x32a
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d095      	beq.n	80038a8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d022      	beq.n	80039d0 <HAL_SD_ReadBlocks+0x238>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d91f      	bls.n	80039d0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	2b03      	cmp	r3, #3
 8003996:	d01b      	beq.n	80039d0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fb81 	bl	80050a4 <SDMMC_CmdStopTransfer>
 80039a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80039a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d012      	beq.n	80039d0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <HAL_SD_ReadBlocks+0x2d4>)
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0ba      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_SD_ReadBlocks+0x2d4>)
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0a0      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_SD_ReadBlocks+0x2d4>)
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	f043 0202 	orr.w	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e086      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d063      	beq.n	8003b0e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_SD_ReadBlocks+0x2d4>)
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e06c      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
 8003a6c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 f9c3 	bl	8004e00 <SDIO_ReadFIFO>
 8003a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	3301      	adds	r3, #1
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	0e1b      	lsrs	r3, r3, #24
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	3301      	adds	r3, #1
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ad2:	f7fd fdf1 	bl	80016b8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d902      	bls.n	8003ae8 <HAL_SD_ReadBlocks+0x350>
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d112      	bne.n	8003b0e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_SD_ReadBlocks+0x3b8>)
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e01b      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SD_ReadBlocks+0x38a>
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1a6      	bne.n	8003a70 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e006      	b.n	8003b46 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3748      	adds	r7, #72	; 0x48
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	004005ff 	.word	0x004005ff

08003b54 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b092      	sub	sp, #72	; 0x48
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003b62:	f7fd fda9 	bl	80016b8 <HAL_GetTick>
 8003b66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e166      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 8159 	bne.w	8003e46 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d907      	bls.n	8003bb8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e14d      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2203      	movs	r2, #3
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	025b      	lsls	r3, r3, #9
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bda:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	025b      	lsls	r3, r3, #9
 8003be0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003be2:	2390      	movs	r3, #144	; 0x90
 8003be4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f107 0218 	add.w	r2, r7, #24
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 f97c 	bl	8004efa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d90a      	bls.n	8003c1e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c14:	4618      	mov	r0, r3
 8003c16:	f001 fa23 	bl	8005060 <SDMMC_CmdWriteMultiBlock>
 8003c1a:	6478      	str	r0, [r7, #68]	; 0x44
 8003c1c:	e009      	b.n	8003c32 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2210      	movs	r2, #16
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 f9f6 	bl	800501c <SDMMC_CmdWriteSingleBlock>
 8003c30:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d012      	beq.n	8003c5e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_SD_WriteBlocks+0x308>)
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0fa      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003c62:	e065      	b.n	8003d30 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d040      	beq.n	8003cf4 <HAL_SD_WriteBlocks+0x1a0>
 8003c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d03d      	beq.n	8003cf4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7c:	e037      	b.n	8003cee <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	3301      	adds	r3, #1
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	021a      	lsls	r2, r3, #8
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	061a      	lsls	r2, r3, #24
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cce:	3301      	adds	r3, #1
 8003cd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f107 0214 	add.w	r2, r7, #20
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f898 	bl	8004e18 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cea:	3301      	adds	r3, #1
 8003cec:	643b      	str	r3, [r7, #64]	; 0x40
 8003cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf0:	2b07      	cmp	r3, #7
 8003cf2:	d9c4      	bls.n	8003c7e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003cf4:	f7fd fce0 	bl	80016b8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d902      	bls.n	8003d0a <HAL_SD_WriteBlocks+0x1b6>
 8003d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d112      	bne.n	8003d30 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a53      	ldr	r2, [pc, #332]	; (8003e5c <HAL_SD_WriteBlocks+0x308>)
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e091      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d36:	f240 331a 	movw	r3, #794	; 0x31a
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d091      	beq.n	8003c64 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d022      	beq.n	8003d94 <HAL_SD_WriteBlocks+0x240>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d91f      	bls.n	8003d94 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d01b      	beq.n	8003d94 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 f99f 	bl	80050a4 <SDMMC_CmdStopTransfer>
 8003d66:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d012      	beq.n	8003d94 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3a      	ldr	r2, [pc, #232]	; (8003e5c <HAL_SD_WriteBlocks+0x308>)
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e05f      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d012      	beq.n	8003dc8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2d      	ldr	r2, [pc, #180]	; (8003e5c <HAL_SD_WriteBlocks+0x308>)
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	f043 0208 	orr.w	r2, r3, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e045      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d012      	beq.n	8003dfc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <HAL_SD_WriteBlocks+0x308>)
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	f043 0202 	orr.w	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e02b      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d012      	beq.n	8003e30 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <HAL_SD_WriteBlocks+0x308>)
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	f043 0210 	orr.w	r2, r3, #16
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e011      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e006      	b.n	8003e54 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3748      	adds	r7, #72	; 0x48
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	004005ff 	.word	0x004005ff

08003e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6e:	0f9b      	lsrs	r3, r3, #30
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e7a:	0e9b      	lsrs	r3, r3, #26
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ec0:	0d1b      	lsrs	r3, r3, #20
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ede:	0bdb      	lsrs	r3, r3, #15
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef0:	0b9b      	lsrs	r3, r3, #14
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f02:	0b5b      	lsrs	r3, r3, #13
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f14:	0b1b      	lsrs	r3, r3, #12
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2200      	movs	r2, #0
 8003f26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d163      	bne.n	8003ff8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f34:	009a      	lsls	r2, r3, #2
 8003f36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f40:	0f92      	lsrs	r2, r2, #30
 8003f42:	431a      	orrs	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4c:	0edb      	lsrs	r3, r3, #27
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5e:	0e1b      	lsrs	r3, r3, #24
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f70:	0d5b      	lsrs	r3, r3, #21
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f82:	0c9b      	lsrs	r3, r3, #18
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f94:	0bdb      	lsrs	r3, r3, #15
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	7e1b      	ldrb	r3, [r3, #24]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	2201      	movs	r2, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003fc2:	fb03 f202 	mul.w	r2, r3, r2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	7a1b      	ldrb	r3, [r3, #8]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003fe4:	0a52      	lsrs	r2, r2, #9
 8003fe6:	fb03 f202 	mul.w	r2, r3, r2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60
 8003ff6:	e031      	b.n	800405c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d11d      	bne.n	800403c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	3301      	adds	r3, #1
 800401c:	029a      	lsls	r2, r3, #10
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004030:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	661a      	str	r2, [r3, #96]	; 0x60
 800403a:	e00f      	b.n	800405c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_SD_GetCardCSD+0x344>)
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e09d      	b.n	8004198 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004060:	0b9b      	lsrs	r3, r3, #14
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407a:	b2da      	uxtb	r2, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	b2da      	uxtb	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	0fdb      	lsrs	r3, r3, #31
 8004096:	b2da      	uxtb	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	0f5b      	lsrs	r3, r3, #29
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	0e9b      	lsrs	r3, r3, #26
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	0d9b      	lsrs	r3, r3, #22
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	0d5b      	lsrs	r3, r3, #21
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	0bdb      	lsrs	r3, r3, #15
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	0b9b      	lsrs	r3, r3, #14
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	0b5b      	lsrs	r3, r3, #13
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	0b1b      	lsrs	r3, r3, #12
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	b2da      	uxtb	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	004005ff 	.word	0x004005ff

080041a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800420a:	f107 030c 	add.w	r3, r7, #12
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f971 	bl	80044f8 <SD_SendStatus>
 8004216:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	0a5b      	lsrs	r3, r3, #9
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004234:	693b      	ldr	r3, [r7, #16]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800423e:	b5b0      	push	{r4, r5, r7, lr}
 8004240:	b094      	sub	sp, #80	; 0x50
 8004242:	af04      	add	r7, sp, #16
 8004244:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004246:	2301      	movs	r3, #1
 8004248:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fdff 	bl	8004e52 <SDIO_GetPowerState>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800425a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800425e:	e0b8      	b.n	80043d2 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	2b03      	cmp	r3, #3
 8004266:	d02f      	beq.n	80042c8 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ffe0 	bl	8005232 <SDMMC_CmdSendCID>
 8004272:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <SD_InitCard+0x40>
    {
      return errorstate;
 800427a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427c:	e0a9      	b.n	80043d2 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe26 	bl	8004ed6 <SDIO_GetResponse>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2104      	movs	r1, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fe1d 	bl	8004ed6 <SDIO_GetResponse>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2108      	movs	r1, #8
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe14 	bl	8004ed6 <SDIO_GetResponse>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	210c      	movs	r1, #12
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fe0b 	bl	8004ed6 <SDIO_GetResponse>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d00d      	beq.n	80042ec <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f107 020e 	add.w	r2, r7, #14
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 ffe6 	bl	80052ac <SDMMC_CmdSetRelAdd>
 80042e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <SD_InitCard+0xae>
    {
      return errorstate;
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	e072      	b.n	80043d2 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d036      	beq.n	8004362 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80042f4:	89fb      	ldrh	r3, [r7, #14]
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f000 ffb0 	bl	800526e <SDMMC_CmdSendCSD>
 800430e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <SD_InitCard+0xdc>
    {
      return errorstate;
 8004316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004318:	e05b      	b.n	80043d2 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fdd8 	bl	8004ed6 <SDIO_GetResponse>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2104      	movs	r1, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fdcf 	bl	8004ed6 <SDIO_GetResponse>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2108      	movs	r1, #8
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fdc6 	bl	8004ed6 <SDIO_GetResponse>
 800434a:	4602      	mov	r2, r0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	210c      	movs	r1, #12
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fdbd 	bl	8004ed6 <SDIO_GetResponse>
 800435c:	4602      	mov	r2, r0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2104      	movs	r1, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fdb4 	bl	8004ed6 <SDIO_GetResponse>
 800436e:	4603      	mov	r3, r0
 8004370:	0d1a      	lsrs	r2, r3, #20
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004376:	f107 0310 	add.w	r3, r7, #16
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fd6f 	bl	8003e60 <HAL_SD_GetCardCSD>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800438c:	e021      	b.n	80043d2 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	2200      	movs	r2, #0
 800439a:	461c      	mov	r4, r3
 800439c:	4615      	mov	r5, r2
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	4608      	mov	r0, r1
 80043a4:	f000 fea0 	bl	80050e8 <SDMMC_CmdSelDesel>
 80043a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80043aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <SD_InitCard+0x176>
  {
    return errorstate;
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	e00e      	b.n	80043d2 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681d      	ldr	r5, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	466c      	mov	r4, sp
 80043bc:	f103 0210 	add.w	r2, r3, #16
 80043c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80043c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043c6:	3304      	adds	r3, #4
 80043c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 fcee 	bl	8004dac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3740      	adds	r7, #64	; 0x40
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080043dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fe9a 	bl	800512e <SDMMC_CmdGoIdleState>
 80043fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	e072      	b.n	80044ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fead 	bl	800516a <SDMMC_CmdOperCond>
 8004410:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00d      	beq.n	8004434 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fe83 	bl	800512e <SDMMC_CmdGoIdleState>
 8004428:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	e05b      	b.n	80044ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443e:	2b01      	cmp	r3, #1
 8004440:	d137      	bne.n	80044b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fead 	bl	80051a8 <SDMMC_CmdAppCommand>
 800444e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d02d      	beq.n	80044b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800445a:	e047      	b.n	80044ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fea0 	bl	80051a8 <SDMMC_CmdAppCommand>
 8004468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <SD_PowerON+0x98>
    {
      return errorstate;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	e03b      	b.n	80044ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	491e      	ldr	r1, [pc, #120]	; (80044f4 <SD_PowerON+0x118>)
 800447a:	4618      	mov	r0, r3
 800447c:	f000 feb6 	bl	80051ec <SDMMC_CmdAppOperCommand>
 8004480:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800448c:	e02e      	b.n	80044ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd1e 	bl	8004ed6 <SDIO_GetResponse>
 800449a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	0fdb      	lsrs	r3, r3, #31
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <SD_PowerON+0xcc>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <SD_PowerON+0xce>
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]

    count++;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d802      	bhi.n	80044c2 <SD_PowerON+0xe6>
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0cc      	beq.n	800445c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d902      	bls.n	80044d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d0:	e00c      	b.n	80044ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
 80044e2:	e002      	b.n	80044ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	c1100000 	.word	0xc1100000

080044f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800450c:	e018      	b.n	8004540 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 fee7 	bl	80052ee <SDMMC_CmdSendStatus>
 8004520:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	e009      	b.n	8004540 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2100      	movs	r1, #0
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fccf 	bl	8004ed6 <SDIO_GetResponse>
 8004538:	4602      	mov	r2, r0
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e041      	b.n	80045de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc ff94 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 fa82 	bl	8004a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d001      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e044      	b.n	800468a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1d      	ldr	r2, [pc, #116]	; (8004694 <HAL_TIM_Base_Start_IT+0xac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <HAL_TIM_Base_Start_IT+0xb0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_TIM_Base_Start_IT+0xb4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x6c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b06      	cmp	r3, #6
 8004664:	d010      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	e007      	b.n	8004688 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40013400 	.word	0x40013400
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00

080046a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0202 	mvn.w	r2, #2
 80046d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f9b4 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f9a7 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f9b6 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0204 	mvn.w	r2, #4
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f98a 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f97d 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f98c 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b08      	cmp	r3, #8
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b08      	cmp	r3, #8
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0208 	mvn.w	r2, #8
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2204      	movs	r2, #4
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f960 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f953 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f962 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0210 	mvn.w	r2, #16
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2208      	movs	r2, #8
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f936 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f929 	bl	8004a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f938 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0201 	mvn.w	r2, #1
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc fcf6 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d10e      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b80      	cmp	r3, #128	; 0x80
 8004846:	d107      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 faa1 	bl	8004d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8fc 	bl	8004a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b20      	cmp	r3, #32
 8004890:	d10e      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d107      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0220 	mvn.w	r2, #32
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa6c 	bl	8004d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_TIM_ConfigClockSource+0x1c>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e0b4      	b.n	8004a3e <HAL_TIM_ConfigClockSource+0x186>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490c:	d03e      	beq.n	800498c <HAL_TIM_ConfigClockSource+0xd4>
 800490e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004912:	f200 8087 	bhi.w	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	f000 8086 	beq.w	8004a2a <HAL_TIM_ConfigClockSource+0x172>
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004922:	d87f      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 8004924:	2b70      	cmp	r3, #112	; 0x70
 8004926:	d01a      	beq.n	800495e <HAL_TIM_ConfigClockSource+0xa6>
 8004928:	2b70      	cmp	r3, #112	; 0x70
 800492a:	d87b      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 800492c:	2b60      	cmp	r3, #96	; 0x60
 800492e:	d050      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004930:	2b60      	cmp	r3, #96	; 0x60
 8004932:	d877      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 8004934:	2b50      	cmp	r3, #80	; 0x50
 8004936:	d03c      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004938:	2b50      	cmp	r3, #80	; 0x50
 800493a:	d873      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d058      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d86f      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 8004944:	2b30      	cmp	r3, #48	; 0x30
 8004946:	d064      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x15a>
 8004948:	2b30      	cmp	r3, #48	; 0x30
 800494a:	d86b      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b20      	cmp	r3, #32
 800494e:	d060      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x15a>
 8004950:	2b20      	cmp	r3, #32
 8004952:	d867      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d05c      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x15a>
 8004958:	2b10      	cmp	r3, #16
 800495a:	d05a      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x15a>
 800495c:	e062      	b.n	8004a24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6899      	ldr	r1, [r3, #8]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f000 f980 	bl	8004c72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	609a      	str	r2, [r3, #8]
      break;
 800498a:	e04f      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6899      	ldr	r1, [r3, #8]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f000 f969 	bl	8004c72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ae:	609a      	str	r2, [r3, #8]
      break;
 80049b0:	e03c      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	461a      	mov	r2, r3
 80049c0:	f000 f8e0 	bl	8004b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2150      	movs	r1, #80	; 0x50
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f937 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 80049d0:	e02c      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 f8fe 	bl	8004be0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2160      	movs	r1, #96	; 0x60
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f927 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 80049f0:	e01c      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 f8c0 	bl	8004b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f917 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 8004a10:	e00c      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f000 f90e 	bl	8004c3e <TIM_ITRx_SetConfig>
      break;
 8004a22:	e003      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      break;
 8004a28:	e000      	b.n	8004a2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
	...

08004a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a33      	ldr	r2, [pc, #204]	; (8004b70 <TIM_Base_SetConfig+0xe0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a32      	ldr	r2, [pc, #200]	; (8004b74 <TIM_Base_SetConfig+0xe4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00f      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d00b      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <TIM_Base_SetConfig+0xe8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d007      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a2e      	ldr	r2, [pc, #184]	; (8004b7c <TIM_Base_SetConfig+0xec>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_Base_SetConfig+0x40>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a2d      	ldr	r2, [pc, #180]	; (8004b80 <TIM_Base_SetConfig+0xf0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d108      	bne.n	8004ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <TIM_Base_SetConfig+0xe0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <TIM_Base_SetConfig+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <TIM_Base_SetConfig+0xe8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <TIM_Base_SetConfig+0xec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x82>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <TIM_Base_SetConfig+0xf0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <TIM_Base_SetConfig+0xe0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_Base_SetConfig+0xc8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <TIM_Base_SetConfig+0xe4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d103      	bne.n	8004b60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	615a      	str	r2, [r3, #20]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40013400 	.word	0x40013400
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00

08004b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 030a 	bic.w	r3, r3, #10
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	031b      	lsls	r3, r3, #12
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b085      	sub	sp, #20
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f043 0307 	orr.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	609a      	str	r2, [r3, #8]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	021a      	lsls	r2, r3, #8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	609a      	str	r2, [r3, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e050      	b.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a14      	ldr	r2, [pc, #80]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00

08004d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004dac:	b084      	sub	sp, #16
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	f107 001c 	add.w	r0, r7, #28
 8004dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004dc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004dc6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004dca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004dce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004dd2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004dd6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004de6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	b004      	add	sp, #16
 8004dfe:	4770      	bx	lr

08004e00 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2203      	movs	r2, #3
 8004e44:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e90:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ea6:	f023 030f 	bic.w	r3, r3, #15
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr

08004ebe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	b2db      	uxtb	r3, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
}  
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f20:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004f26:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004f2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0

}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f5e:	2310      	movs	r3, #16
 8004f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f70:	f107 0308 	add.w	r3, r7, #8
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff ff78 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	2110      	movs	r1, #16
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f9d6 	bl	8005334 <SDMMC_GetCmdResp1>
 8004f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3720      	adds	r7, #32
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004fa2:	2311      	movs	r3, #17
 8004fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fa6:	2340      	movs	r3, #64	; 0x40
 8004fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fb4:	f107 0308 	add.w	r3, r7, #8
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ff56 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	2111      	movs	r1, #17
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f9b4 	bl	8005334 <SDMMC_GetCmdResp1>
 8004fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fce:	69fb      	ldr	r3, [r7, #28]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004fe6:	2312      	movs	r3, #18
 8004fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ff34 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005004:	f241 3288 	movw	r2, #5000	; 0x1388
 8005008:	2112      	movs	r1, #18
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f992 	bl	8005334 <SDMMC_GetCmdResp1>
 8005010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005012:	69fb      	ldr	r3, [r7, #28]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800502a:	2318      	movs	r3, #24
 800502c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800502e:	2340      	movs	r3, #64	; 0x40
 8005030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800503a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ff12 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	2118      	movs	r1, #24
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f970 	bl	8005334 <SDMMC_GetCmdResp1>
 8005054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005056:	69fb      	ldr	r3, [r7, #28]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800506e:	2319      	movs	r3, #25
 8005070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005072:	2340      	movs	r3, #64	; 0x40
 8005074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800507a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	4619      	mov	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fef0 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	2119      	movs	r1, #25
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f94e 	bl	8005334 <SDMMC_GetCmdResp1>
 8005098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800509a:	69fb      	ldr	r3, [r7, #28]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80050b0:	230c      	movs	r3, #12
 80050b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fecf 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <SDMMC_CmdStopTransfer+0x40>)
 80050d0:	210c      	movs	r1, #12
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f92e 	bl	8005334 <SDMMC_GetCmdResp1>
 80050d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050da:	69fb      	ldr	r3, [r7, #28]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	05f5e100 	.word	0x05f5e100

080050e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050f8:	2307      	movs	r3, #7
 80050fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005100:	2300      	movs	r3, #0
 8005102:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005108:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800510a:	f107 0310 	add.w	r3, r7, #16
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff feab 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	2107      	movs	r1, #7
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f909 	bl	8005334 <SDMMC_GetCmdResp1>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005126:	4618      	mov	r0, r3
 8005128:	3728      	adds	r7, #40	; 0x28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fe8a 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb21 	bl	80057a0 <SDMMC_GetCmdError>
 800515e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005160:	69fb      	ldr	r3, [r7, #28]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b088      	sub	sp, #32
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005172:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005178:	2308      	movs	r3, #8
 800517a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800517c:	2340      	movs	r3, #64	; 0x40
 800517e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005188:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fe6b 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fab4 	bl	8005704 <SDMMC_GetCmdResp7>
 800519c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800519e:	69fb      	ldr	r3, [r7, #28]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051b6:	2337      	movs	r3, #55	; 0x37
 80051b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c8:	f107 0308 	add.w	r3, r7, #8
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fe4c 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	2137      	movs	r1, #55	; 0x37
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8aa 	bl	8005334 <SDMMC_GetCmdResp1>
 80051e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051e2:	69fb      	ldr	r3, [r7, #28]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005202:	2329      	movs	r3, #41	; 0x29
 8005204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005206:	2340      	movs	r3, #64	; 0x40
 8005208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800520e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005214:	f107 0308 	add.w	r3, r7, #8
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fe26 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f9bd 	bl	80055a0 <SDMMC_GetCmdResp3>
 8005226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005228:	69fb      	ldr	r3, [r7, #28]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b088      	sub	sp, #32
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800523e:	2302      	movs	r3, #2
 8005240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005242:	23c0      	movs	r3, #192	; 0xc0
 8005244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005250:	f107 0308 	add.w	r3, r7, #8
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fe08 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f957 	bl	8005510 <SDMMC_GetCmdResp2>
 8005262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005264:	69fb      	ldr	r3, [r7, #28]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800527c:	2309      	movs	r3, #9
 800527e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005280:	23c0      	movs	r3, #192	; 0xc0
 8005282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800528c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fde9 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f938 	bl	8005510 <SDMMC_GetCmdResp2>
 80052a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a2:	69fb      	ldr	r3, [r7, #28]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80052ba:	2303      	movs	r3, #3
 80052bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052be:	2340      	movs	r3, #64	; 0x40
 80052c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052cc:	f107 0308 	add.w	r3, r7, #8
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fdca 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	2103      	movs	r1, #3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f99b 	bl	8005618 <SDMMC_GetCmdResp6>
 80052e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e4:	69fb      	ldr	r3, [r7, #28]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b088      	sub	sp, #32
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80052fc:	230d      	movs	r3, #13
 80052fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff fda9 	bl	8004e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800531a:	f241 3288 	movw	r2, #5000	; 0x1388
 800531e:	210d      	movs	r1, #13
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f807 	bl	8005334 <SDMMC_GetCmdResp1>
 8005326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005328:	69fb      	ldr	r3, [r7, #28]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	460b      	mov	r3, r1
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005342:	4b70      	ldr	r3, [pc, #448]	; (8005504 <SDMMC_GetCmdResp1+0x1d0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a70      	ldr	r2, [pc, #448]	; (8005508 <SDMMC_GetCmdResp1+0x1d4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	0a5a      	lsrs	r2, r3, #9
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	1e5a      	subs	r2, r3, #1
 800535a:	61fa      	str	r2, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005364:	e0c9      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ef      	beq.n	8005356 <SDMMC_GetCmdResp1+0x22>
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ea      	bne.n	8005356 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2204      	movs	r2, #4
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005392:	2304      	movs	r3, #4
 8005394:	e0b1      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0a6      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	22c5      	movs	r2, #197	; 0xc5
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff fd83 	bl	8004ebe <SDIO_GetCommandResponse>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	4293      	cmp	r3, r2
 80053c0:	d001      	beq.n	80053c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e099      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053c6:	2100      	movs	r1, #0
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fd84 	bl	8004ed6 <SDIO_GetResponse>
 80053ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4b4e      	ldr	r3, [pc, #312]	; (800550c <SDMMC_GetCmdResp1+0x1d8>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80053da:	2300      	movs	r3, #0
 80053dc:	e08d      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	da02      	bge.n	80053ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80053e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e8:	e087      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80053f4:	2340      	movs	r3, #64	; 0x40
 80053f6:	e080      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	e079      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005414:	e071      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005424:	e069      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005434:	e061      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005444:	e059      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005454:	e051      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005464:	e049      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005474:	e041      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005484:	e039      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005494:	e031      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80054a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054a4:	e029      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80054b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80054b4:	e021      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80054c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054c4:	e019      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80054d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054d4:	e011      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80054e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054e4:	e009      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80054f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054f4:	e001      	b.n	80054fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80054f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000050 	.word	0x20000050
 8005508:	10624dd3 	.word	0x10624dd3
 800550c:	fdffe008 	.word	0xfdffe008

08005510 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <SDMMC_GetCmdResp2+0x88>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <SDMMC_GetCmdResp2+0x8c>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	0a5b      	lsrs	r3, r3, #9
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	60fa      	str	r2, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800553c:	e026      	b.n	800558c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ef      	beq.n	800552e <SDMMC_GetCmdResp2+0x1e>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ea      	bne.n	800552e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800556a:	2304      	movs	r3, #4
 800556c:	e00e      	b.n	800558c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005580:	2301      	movs	r3, #1
 8005582:	e003      	b.n	800558c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	22c5      	movs	r2, #197	; 0xc5
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000050 	.word	0x20000050
 800559c:	10624dd3 	.word	0x10624dd3

080055a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <SDMMC_GetCmdResp3+0x70>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <SDMMC_GetCmdResp3+0x74>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	0a5b      	lsrs	r3, r3, #9
 80055b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1e5a      	subs	r2, r3, #1
 80055c2:	60fa      	str	r2, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055cc:	e01b      	b.n	8005606 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ef      	beq.n	80055be <SDMMC_GetCmdResp3+0x1e>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1ea      	bne.n	80055be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2204      	movs	r2, #4
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055fa:	2304      	movs	r3, #4
 80055fc:	e003      	b.n	8005606 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	22c5      	movs	r2, #197	; 0xc5
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr
 8005610:	20000050 	.word	0x20000050
 8005614:	10624dd3 	.word	0x10624dd3

08005618 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	460b      	mov	r3, r1
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005626:	4b35      	ldr	r3, [pc, #212]	; (80056fc <SDMMC_GetCmdResp6+0xe4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a35      	ldr	r2, [pc, #212]	; (8005700 <SDMMC_GetCmdResp6+0xe8>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	0a5b      	lsrs	r3, r3, #9
 8005632:	f241 3288 	movw	r2, #5000	; 0x1388
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1e5a      	subs	r2, r3, #1
 8005640:	61fa      	str	r2, [r7, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005646:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800564a:	e052      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005650:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0ef      	beq.n	800563c <SDMMC_GetCmdResp6+0x24>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ea      	bne.n	800563c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2204      	movs	r2, #4
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005678:	2304      	movs	r3, #4
 800567a:	e03a      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800568e:	2301      	movs	r3, #1
 8005690:	e02f      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fc13 	bl	8004ebe <SDIO_GetCommandResponse>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	7afb      	ldrb	r3, [r7, #11]
 800569e:	4293      	cmp	r3, r2
 80056a0:	d001      	beq.n	80056a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e025      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	22c5      	movs	r2, #197	; 0xc5
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80056ac:	2100      	movs	r1, #0
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff fc11 	bl	8004ed6 <SDIO_GetResponse>
 80056b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e011      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80056d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056dc:	e009      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80056e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ec:	e001      	b.n	80056f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000050 	.word	0x20000050
 8005700:	10624dd3 	.word	0x10624dd3

08005704 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800570c:	4b22      	ldr	r3, [pc, #136]	; (8005798 <SDMMC_GetCmdResp7+0x94>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a22      	ldr	r2, [pc, #136]	; (800579c <SDMMC_GetCmdResp7+0x98>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	0a5b      	lsrs	r3, r3, #9
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1e5a      	subs	r2, r3, #1
 8005726:	60fa      	str	r2, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800572c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005730:	e02c      	b.n	800578c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0ef      	beq.n	8005722 <SDMMC_GetCmdResp7+0x1e>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ea      	bne.n	8005722 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2204      	movs	r2, #4
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800575e:	2304      	movs	r3, #4
 8005760:	e014      	b.n	800578c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005774:	2301      	movs	r3, #1
 8005776:	e009      	b.n	800578c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2240      	movs	r2, #64	; 0x40
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800578a:	2300      	movs	r3, #0
  
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000050 	.word	0x20000050
 800579c:	10624dd3 	.word	0x10624dd3

080057a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057a8:	4b10      	ldr	r3, [pc, #64]	; (80057ec <SDMMC_GetCmdError+0x4c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <SDMMC_GetCmdError+0x50>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	0a5b      	lsrs	r3, r3, #9
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1e5a      	subs	r2, r3, #1
 80057c2:	60fa      	str	r2, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d102      	bne.n	80057ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057cc:	e009      	b.n	80057e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f1      	beq.n	80057be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	22c5      	movs	r2, #197	; 0xc5
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	20000050 	.word	0x20000050
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80057f8:	4904      	ldr	r1, [pc, #16]	; (800580c <MX_FATFS_Init+0x18>)
 80057fa:	4805      	ldr	r0, [pc, #20]	; (8005810 <MX_FATFS_Init+0x1c>)
 80057fc:	f002 fc90 	bl	8008120 <FATFS_LinkDriver>
 8005800:	4603      	mov	r3, r0
 8005802:	461a      	mov	r2, r3
 8005804:	4b03      	ldr	r3, [pc, #12]	; (8005814 <MX_FATFS_Init+0x20>)
 8005806:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005808:	bf00      	nop
 800580a:	bd80      	pop	{r7, pc}
 800580c:	200043f8 	.word	0x200043f8
 8005810:	08008554 	.word	0x08008554
 8005814:	200043f4 	.word	0x200043f4

08005818 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800581c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005832:	f000 f86b 	bl	800590c <BSP_SD_IsDetected>
 8005836:	4603      	mov	r3, r0
 8005838:	2b01      	cmp	r3, #1
 800583a:	d001      	beq.n	8005840 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e005      	b.n	800584c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005840:	4804      	ldr	r0, [pc, #16]	; (8005854 <BSP_SD_Init+0x2c>)
 8005842:	f7fd fef9 	bl	8003638 <HAL_SD_Init>
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800584a:	79fb      	ldrb	r3, [r7, #7]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	200000e4 	.word	0x200000e4

08005858 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	4806      	ldr	r0, [pc, #24]	; (8005890 <BSP_SD_ReadBlocks+0x38>)
 8005876:	f7fd ff8f 	bl	8003798 <HAL_SD_ReadBlocks>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200000e4 	.word	0x200000e4

08005894 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	4806      	ldr	r0, [pc, #24]	; (80058cc <BSP_SD_WriteBlocks+0x38>)
 80058b2:	f7fe f94f 	bl	8003b54 <HAL_SD_WriteBlocks>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	200000e4 	.word	0x200000e4

080058d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80058d4:	4805      	ldr	r0, [pc, #20]	; (80058ec <BSP_SD_GetCardState+0x1c>)
 80058d6:	f7fe fc92 	bl	80041fe <HAL_SD_GetCardState>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b04      	cmp	r3, #4
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200000e4 	.word	0x200000e4

080058f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4803      	ldr	r0, [pc, #12]	; (8005908 <BSP_SD_GetCardInfo+0x18>)
 80058fc:	f7fe fc54 	bl	80041a8 <HAL_SD_GetCardInfo>
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	200000e4 	.word	0x200000e4

0800590c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005912:	2301      	movs	r3, #1
 8005914:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005916:	f000 f80b 	bl	8005930 <BSP_PlatformIsDetected>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005920:	2300      	movs	r3, #0
 8005922:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	b2db      	uxtb	r3, r3
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005936:	2301      	movs	r3, #1
 8005938:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	4806      	ldr	r0, [pc, #24]	; (8005958 <BSP_PlatformIsDetected+0x28>)
 800593e:	f7fc fe77 	bl	8002630 <HAL_GPIO_ReadPin>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005948:	2300      	movs	r3, #0
 800594a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800594c:	79fb      	ldrb	r3, [r7, #7]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40011000 	.word	0x40011000

0800595c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	4a08      	ldr	r2, [pc, #32]	; (800598c <disk_status+0x30>)
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	79fa      	ldrb	r2, [r7, #7]
 8005974:	4905      	ldr	r1, [pc, #20]	; (800598c <disk_status+0x30>)
 8005976:	440a      	add	r2, r1
 8005978:	7a12      	ldrb	r2, [r2, #8]
 800597a:	4610      	mov	r0, r2
 800597c:	4798      	blx	r3
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000441c 	.word	0x2000441c

08005990 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	4a0d      	ldr	r2, [pc, #52]	; (80059d8 <disk_initialize+0x48>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d111      	bne.n	80059cc <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	4a0b      	ldr	r2, [pc, #44]	; (80059d8 <disk_initialize+0x48>)
 80059ac:	2101      	movs	r1, #1
 80059ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <disk_initialize+0x48>)
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	79fa      	ldrb	r2, [r7, #7]
 80059be:	4906      	ldr	r1, [pc, #24]	; (80059d8 <disk_initialize+0x48>)
 80059c0:	440a      	add	r2, r1
 80059c2:	7a12      	ldrb	r2, [r2, #8]
 80059c4:	4610      	mov	r0, r2
 80059c6:	4798      	blx	r3
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	2000441c 	.word	0x2000441c

080059dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <disk_read+0x3c>)
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	689c      	ldr	r4, [r3, #8]
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <disk_read+0x3c>)
 80059fc:	4413      	add	r3, r2
 80059fe:	7a18      	ldrb	r0, [r3, #8]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	47a0      	blx	r4
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd90      	pop	{r4, r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2000441c 	.word	0x2000441c

08005a1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	4a0a      	ldr	r2, [pc, #40]	; (8005a58 <disk_write+0x3c>)
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	68dc      	ldr	r4, [r3, #12]
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <disk_write+0x3c>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	7a18      	ldrb	r0, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	47a0      	blx	r4
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000441c 	.word	0x2000441c

08005a5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	603a      	str	r2, [r7, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <disk_ioctl+0x38>)
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <disk_ioctl+0x38>)
 8005a7c:	440a      	add	r2, r1
 8005a7e:	7a10      	ldrb	r0, [r2, #8]
 8005a80:	79b9      	ldrb	r1, [r7, #6]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	73fb      	strb	r3, [r7, #15]
  return res;
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	2000441c 	.word	0x2000441c

08005a98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005aac:	e007      	b.n	8005abe <mem_cpy+0x26>
		*d++ = *s++;
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	1c53      	adds	r3, r2, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	6179      	str	r1, [r7, #20]
 8005aba:	7812      	ldrb	r2, [r2, #0]
 8005abc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f2      	bne.n	8005aae <mem_cpy+0x16>
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005ae4:	e005      	b.n	8005af2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	617a      	str	r2, [r7, #20]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	1e5a      	subs	r2, r3, #1
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f4      	bne.n	8005ae6 <mem_set+0x12>
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005b20:	bf00      	nop
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	1e5a      	subs	r2, r3, #1
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <mem_cmp+0x40>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	61fa      	str	r2, [r7, #28]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	4619      	mov	r1, r3
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	61ba      	str	r2, [r7, #24]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	1acb      	subs	r3, r1, r3
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ec      	beq.n	8005b22 <mem_cmp+0x1a>
	return r;
 8005b48:	697b      	ldr	r3, [r7, #20]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3724      	adds	r7, #36	; 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b5e:	e002      	b.n	8005b66 <chk_chr+0x12>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3301      	adds	r3, #1
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <chk_chr+0x26>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d1f2      	bne.n	8005b60 <chk_chr+0xc>
	return *str;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e038      	b.n	8005c0e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005b9c:	492f      	ldr	r1, [pc, #188]	; (8005c5c <chk_lock+0xd4>)
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d029      	beq.n	8005c04 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005bb0:	492a      	ldr	r1, [pc, #168]	; (8005c5c <chk_lock+0xd4>)
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d11e      	bne.n	8005c08 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8005bca:	4924      	ldr	r1, [pc, #144]	; (8005c5c <chk_lock+0xd4>)
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3304      	adds	r3, #4
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d110      	bne.n	8005c08 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005be6:	491d      	ldr	r1, [pc, #116]	; (8005c5c <chk_lock+0xd4>)
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4613      	mov	r3, r2
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d102      	bne.n	8005c08 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005c02:	e007      	b.n	8005c14 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005c04:	2301      	movs	r3, #1
 8005c06:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d9c3      	bls.n	8005b9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d109      	bne.n	8005c2e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <chk_lock+0x9e>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d101      	bne.n	8005c2a <chk_lock+0xa2>
 8005c26:	2300      	movs	r3, #0
 8005c28:	e013      	b.n	8005c52 <chk_lock+0xca>
 8005c2a:	2312      	movs	r3, #18
 8005c2c:	e011      	b.n	8005c52 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <chk_lock+0xc4>
 8005c34:	4909      	ldr	r1, [pc, #36]	; (8005c5c <chk_lock+0xd4>)
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	330a      	adds	r3, #10
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4a:	d101      	bne.n	8005c50 <chk_lock+0xc8>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	e000      	b.n	8005c52 <chk_lock+0xca>
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	20004404 	.word	0x20004404

08005c60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	e002      	b.n	8005c72 <enq_lock+0x12>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d809      	bhi.n	8005c8c <enq_lock+0x2c>
 8005c78:	490a      	ldr	r1, [pc, #40]	; (8005ca4 <enq_lock+0x44>)
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1ef      	bne.n	8005c6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20004404 	.word	0x20004404

08005ca8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e02b      	b.n	8005d10 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005cb8:	4955      	ldr	r1, [pc, #340]	; (8005e10 <inc_lock+0x168>)
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d11b      	bne.n	8005d0a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8005cd2:	494f      	ldr	r1, [pc, #316]	; (8005e10 <inc_lock+0x168>)
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d10d      	bne.n	8005d0a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005cee:	4948      	ldr	r1, [pc, #288]	; (8005e10 <inc_lock+0x168>)
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	881a      	ldrh	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d006      	beq.n	8005d18 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d9d0      	bls.n	8005cb8 <inc_lock+0x10>
 8005d16:	e000      	b.n	8005d1a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005d18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d145      	bne.n	8005dac <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e002      	b.n	8005d2c <inc_lock+0x84>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d809      	bhi.n	8005d46 <inc_lock+0x9e>
 8005d32:	4937      	ldr	r1, [pc, #220]	; (8005e10 <inc_lock+0x168>)
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4613      	mov	r3, r2
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ef      	bne.n	8005d26 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d101      	bne.n	8005d50 <inc_lock+0xa8>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e05a      	b.n	8005e06 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005d56:	482e      	ldr	r0, [pc, #184]	; (8005e10 <inc_lock+0x168>)
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4403      	add	r3, r0
 8005d64:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005d6c:	4828      	ldr	r0, [pc, #160]	; (8005e10 <inc_lock+0x168>)
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4403      	add	r3, r0
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005d84:	4922      	ldr	r1, [pc, #136]	; (8005e10 <inc_lock+0x168>)
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	3308      	adds	r3, #8
 8005d94:	4602      	mov	r2, r0
 8005d96:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d98:	491d      	ldr	r1, [pc, #116]	; (8005e10 <inc_lock+0x168>)
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	330a      	adds	r3, #10
 8005da8:	2200      	movs	r2, #0
 8005daa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00c      	beq.n	8005dcc <inc_lock+0x124>
 8005db2:	4917      	ldr	r1, [pc, #92]	; (8005e10 <inc_lock+0x168>)
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	330a      	adds	r3, #10
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <inc_lock+0x124>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e01c      	b.n	8005e06 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10b      	bne.n	8005dea <inc_lock+0x142>
 8005dd2:	490f      	ldr	r1, [pc, #60]	; (8005e10 <inc_lock+0x168>)
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	330a      	adds	r3, #10
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	b299      	uxth	r1, r3
 8005de8:	e001      	b.n	8005dee <inc_lock+0x146>
 8005dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dee:	4808      	ldr	r0, [pc, #32]	; (8005e10 <inc_lock+0x168>)
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4403      	add	r3, r0
 8005dfc:	330a      	adds	r3, #10
 8005dfe:	460a      	mov	r2, r1
 8005e00:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3301      	adds	r3, #1
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	20004404 	.word	0x20004404

08005e14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	607b      	str	r3, [r7, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d82e      	bhi.n	8005e86 <dec_lock+0x72>
		n = Files[i].ctr;
 8005e28:	491b      	ldr	r1, [pc, #108]	; (8005e98 <dec_lock+0x84>)
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	330a      	adds	r3, #10
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e3c:	89fb      	ldrh	r3, [r7, #14]
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d101      	bne.n	8005e48 <dec_lock+0x34>
 8005e44:	2300      	movs	r3, #0
 8005e46:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <dec_lock+0x40>
 8005e4e:	89fb      	ldrh	r3, [r7, #14]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e54:	4910      	ldr	r1, [pc, #64]	; (8005e98 <dec_lock+0x84>)
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	330a      	adds	r3, #10
 8005e64:	89fa      	ldrh	r2, [r7, #14]
 8005e66:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e68:	89fb      	ldrh	r3, [r7, #14]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d108      	bne.n	8005e80 <dec_lock+0x6c>
 8005e6e:	490a      	ldr	r1, [pc, #40]	; (8005e98 <dec_lock+0x84>)
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	737b      	strb	r3, [r7, #13]
 8005e84:	e001      	b.n	8005e8a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e86:	2302      	movs	r3, #2
 8005e88:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005e8a:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	20004404 	.word	0x20004404

08005e9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e016      	b.n	8005ed8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005eaa:	4910      	ldr	r1, [pc, #64]	; (8005eec <clear_lock+0x50>)
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d108      	bne.n	8005ed2 <clear_lock+0x36>
 8005ec0:	490a      	ldr	r1, [pc, #40]	; (8005eec <clear_lock+0x50>)
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d9e5      	bls.n	8005eaa <clear_lock+0xe>
	}
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20004404 	.word	0x20004404

08005ef0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d038      	beq.n	8005f78 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005f0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	2301      	movs	r3, #1
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	f7ff fd7f 	bl	8005a1c <disk_write>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
 8005f28:	e026      	b.n	8005f78 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d218      	bcs.n	8005f78 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	e010      	b.n	8005f72 <sync_window+0x82>
					wsect += fs->fsize;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4413      	add	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	2301      	movs	r3, #1
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	f7ff fd58 	bl	8005a1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d8eb      	bhi.n	8005f50 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d01b      	beq.n	8005fd4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ffa7 	bl	8005ef0 <sync_window>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d113      	bne.n	8005fd4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	f7ff fd10 	bl	80059dc <disk_read>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff ff82 	bl	8005ef0 <sync_window>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 809b 	bne.w	800612e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	f040 8088 	bne.w	8006114 <sync_fs+0x136>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800600a:	2b01      	cmp	r3, #1
 800600c:	f040 8082 	bne.w	8006114 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff fd5b 	bl	8005ad4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2255      	movs	r2, #85	; 0x55
 8006022:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	22aa      	movs	r2, #170	; 0xaa
 800602a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2252      	movs	r2, #82	; 0x52
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2252      	movs	r2, #82	; 0x52
 8006038:	705a      	strb	r2, [r3, #1]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2261      	movs	r2, #97	; 0x61
 800603e:	709a      	strb	r2, [r3, #2]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2241      	movs	r2, #65	; 0x41
 8006044:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2272      	movs	r2, #114	; 0x72
 800604a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2272      	movs	r2, #114	; 0x72
 8006052:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2241      	movs	r2, #65	; 0x41
 800605a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2261      	movs	r2, #97	; 0x61
 8006062:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800606c:	b2da      	uxtb	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800607a:	b29b      	uxth	r3, r3
 800607c:	0a1b      	lsrs	r3, r3, #8
 800607e:	b29b      	uxth	r3, r3
 8006080:	b2da      	uxtb	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	b2da      	uxtb	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800609e:	0e1b      	lsrs	r3, r3, #24
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060bc:	b29b      	uxth	r3, r3
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060e0:	0e1b      	lsrs	r3, r3, #24
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006106:	2301      	movs	r3, #1
 8006108:	f7ff fc88 	bl	8005a1c <disk_write>
			fs->fsi_flag = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800611a:	2200      	movs	r2, #0
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fc9c 	bl	8005a5c <disk_ioctl>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3b02      	subs	r3, #2
 8006146:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800614e:	3b02      	subs	r3, #2
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d301      	bcc.n	800615a <clust2sect+0x22>
 8006156:	2300      	movs	r3, #0
 8006158:	e00a      	b.n	8006170 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006160:	461a      	mov	r2, r3
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	fb03 f202 	mul.w	r2, r3, r2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800616e:	4413      	add	r3, r2
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d905      	bls.n	8006196 <get_fat+0x1c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d302      	bcc.n	800619c <get_fat+0x22>
		val = 1;	/* Internal error */
 8006196:	2301      	movs	r3, #1
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e0a3      	b.n	80062e4 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d068      	beq.n	800627e <get_fat+0x104>
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	f300 808f 	bgt.w	80062d0 <get_fat+0x156>
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d002      	beq.n	80061bc <get_fat+0x42>
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d040      	beq.n	800623c <get_fat+0xc2>
 80061ba:	e089      	b.n	80062d0 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	0a5b      	lsrs	r3, r3, #9
 80061d4:	4413      	add	r3, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fed2 	bl	8005f82 <move_window>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d178      	bne.n	80062d6 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	60fa      	str	r2, [r7, #12]
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	5cd3      	ldrb	r3, [r2, r3]
 80061f2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	0a5b      	lsrs	r3, r3, #9
 80061fe:	4413      	add	r3, r2
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff febd 	bl	8005f82 <move_window>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d165      	bne.n	80062da <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	5cd3      	ldrb	r3, [r2, r3]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <get_fat+0xb8>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	091b      	lsrs	r3, r3, #4
 8006230:	e002      	b.n	8006238 <get_fat+0xbe>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006238:	617b      	str	r3, [r7, #20]
			break;
 800623a:	e053      	b.n	80062e4 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	4413      	add	r3, r2
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fe99 	bl	8005f82 <move_window>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d143      	bne.n	80062de <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	3301      	adds	r3, #1
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	b21a      	sxth	r2, r3
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b21b      	sxth	r3, r3
 8006274:	4313      	orrs	r3, r2
 8006276:	b21b      	sxth	r3, r3
 8006278:	b29b      	uxth	r3, r3
 800627a:	617b      	str	r3, [r7, #20]
			break;
 800627c:	e032      	b.n	80062e4 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	09db      	lsrs	r3, r3, #7
 8006288:	4413      	add	r3, r2
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fe78 	bl	8005f82 <move_window>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d124      	bne.n	80062e2 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4413      	add	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	3303      	adds	r3, #3
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	061a      	lsls	r2, r3, #24
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	3302      	adds	r3, #2
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	4313      	orrs	r3, r2
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	3201      	adds	r2, #1
 80062bc:	7812      	ldrb	r2, [r2, #0]
 80062be:	0212      	lsls	r2, r2, #8
 80062c0:	4313      	orrs	r3, r2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062cc:	617b      	str	r3, [r7, #20]
			break;
 80062ce:	e009      	b.n	80062e4 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80062d0:	2301      	movs	r3, #1
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e006      	b.n	80062e4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062d6:	bf00      	nop
 80062d8:	e004      	b.n	80062e4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062da:	bf00      	nop
 80062dc:	e002      	b.n	80062e4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80062e2:	bf00      	nop
		}
	}

	return val;
 80062e4:	697b      	ldr	r3, [r7, #20]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b088      	sub	sp, #32
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d905      	bls.n	800630c <put_fat+0x1e>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <put_fat+0x24>
		res = FR_INT_ERR;
 800630c:	2302      	movs	r3, #2
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e0f6      	b.n	8006500 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006318:	2b03      	cmp	r3, #3
 800631a:	f000 809e 	beq.w	800645a <put_fat+0x16c>
 800631e:	2b03      	cmp	r3, #3
 8006320:	f300 80e4 	bgt.w	80064ec <put_fat+0x1fe>
 8006324:	2b01      	cmp	r3, #1
 8006326:	d002      	beq.n	800632e <put_fat+0x40>
 8006328:	2b02      	cmp	r3, #2
 800632a:	d06f      	beq.n	800640c <put_fat+0x11e>
 800632c:	e0de      	b.n	80064ec <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	0a5b      	lsrs	r3, r3, #9
 8006346:	4413      	add	r3, r2
 8006348:	4619      	mov	r1, r3
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fe19 	bl	8005f82 <move_window>
 8006350:	4603      	mov	r3, r0
 8006352:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006354:	7ffb      	ldrb	r3, [r7, #31]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80cb 	bne.w	80064f2 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	617a      	str	r2, [r7, #20]
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <put_fat+0xa4>
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	b25b      	sxtb	r3, r3
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	b25a      	sxtb	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	b25b      	sxtb	r3, r3
 800638a:	4313      	orrs	r3, r2
 800638c:	b25b      	sxtb	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e001      	b.n	8006396 <put_fat+0xa8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	0a5b      	lsrs	r3, r3, #9
 80063ac:	4413      	add	r3, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff fde6 	bl	8005f82 <move_window>
 80063b6:	4603      	mov	r3, r0
 80063b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063ba:	7ffb      	ldrb	r3, [r7, #31]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 809a 	bne.w	80064f6 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <put_fat+0xf2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	091b      	lsrs	r3, r3, #4
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e00e      	b.n	80063fe <put_fat+0x110>
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	f023 030f 	bic.w	r3, r3, #15
 80063ea:	b25a      	sxtb	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b25b      	sxtb	r3, r3
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	4313      	orrs	r3, r2
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800640a:	e079      	b.n	8006500 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	4413      	add	r3, r2
 8006418:	4619      	mov	r1, r3
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fdb1 	bl	8005f82 <move_window>
 8006420:	4603      	mov	r3, r0
 8006422:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006424:	7ffb      	ldrb	r3, [r7, #31]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d167      	bne.n	80064fa <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	b29b      	uxth	r3, r3
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b29a      	uxth	r2, r3
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	3301      	adds	r3, #1
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006458:	e052      	b.n	8006500 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	4413      	add	r3, r2
 8006466:	4619      	mov	r1, r3
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fd8a 	bl	8005f82 <move_window>
 800646e:	4603      	mov	r3, r0
 8006470:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006472:	7ffb      	ldrb	r3, [r7, #31]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d142      	bne.n	80064fe <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	3303      	adds	r3, #3
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	061a      	lsls	r2, r3, #24
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	3302      	adds	r3, #2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	041b      	lsls	r3, r3, #16
 8006496:	4313      	orrs	r3, r2
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	3201      	adds	r2, #1
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	0212      	lsls	r2, r2, #8
 80064a0:	4313      	orrs	r3, r2
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	7812      	ldrb	r2, [r2, #0]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	0c1a      	lsrs	r2, r3, #16
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	3302      	adds	r3, #2
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	0e1a      	lsrs	r2, r3, #24
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	3303      	adds	r3, #3
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80064ea:	e009      	b.n	8006500 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80064ec:	2302      	movs	r3, #2
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e006      	b.n	8006500 <put_fat+0x212>
			if (res != FR_OK) break;
 80064f2:	bf00      	nop
 80064f4:	e004      	b.n	8006500 <put_fat+0x212>
			if (res != FR_OK) break;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <put_fat+0x212>
			if (res != FR_OK) break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <put_fat+0x212>
			if (res != FR_OK) break;
 80064fe:	bf00      	nop
		}
	}

	return res;
 8006500:	7ffb      	ldrb	r3, [r7, #31]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d905      	bls.n	8006526 <remove_chain+0x1c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d302      	bcc.n	800652c <remove_chain+0x22>
		res = FR_INT_ERR;
 8006526:	2302      	movs	r3, #2
 8006528:	73fb      	strb	r3, [r7, #15]
 800652a:	e043      	b.n	80065b4 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006530:	e036      	b.n	80065a0 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fe20 	bl	800617a <get_fat>
 800653a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d035      	beq.n	80065ae <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d102      	bne.n	800654e <remove_chain+0x44>
 8006548:	2302      	movs	r3, #2
 800654a:	73fb      	strb	r3, [r7, #15]
 800654c:	e032      	b.n	80065b4 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d102      	bne.n	800655c <remove_chain+0x52>
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e02b      	b.n	80065b4 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800655c:	2200      	movs	r2, #0
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff fec4 	bl	80062ee <put_fat>
 8006566:	4603      	mov	r3, r0
 8006568:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d120      	bne.n	80065b2 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d00f      	beq.n	800659c <remove_chain+0x92>
				fs->free_clust++;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d3c2      	bcc.n	8006532 <remove_chain+0x28>
 80065ac:	e002      	b.n	80065b4 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80065b2:	bf00      	nop
		}
	}

	return res;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80065d4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <create_chain+0x2a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d31c      	bcc.n	8006622 <create_chain+0x64>
 80065e8:	2301      	movs	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	e019      	b.n	8006622 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fdc2 	bl	800617a <get_fat>
 80065f6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d801      	bhi.n	8006602 <create_chain+0x44>
 80065fe:	2301      	movs	r3, #1
 8006600:	e076      	b.n	80066f0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d101      	bne.n	800660e <create_chain+0x50>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	e070      	b.n	80066f0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d201      	bcs.n	800661e <create_chain+0x60>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	e068      	b.n	80066f0 <create_chain+0x132>
		scl = clst;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	3301      	adds	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	429a      	cmp	r2, r3
 8006636:	d307      	bcc.n	8006648 <create_chain+0x8a>
			ncl = 2;
 8006638:	2302      	movs	r3, #2
 800663a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	429a      	cmp	r2, r3
 8006642:	d901      	bls.n	8006648 <create_chain+0x8a>
 8006644:	2300      	movs	r3, #0
 8006646:	e053      	b.n	80066f0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006648:	6979      	ldr	r1, [r7, #20]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fd95 	bl	800617a <get_fat>
 8006650:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00e      	beq.n	8006676 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d002      	beq.n	8006666 <create_chain+0xa8>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <create_chain+0xac>
			return cs;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	e042      	b.n	80066f0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d1d9      	bne.n	8006626 <create_chain+0x68>
 8006672:	2300      	movs	r3, #0
 8006674:	e03c      	b.n	80066f0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006676:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006678:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800667c:	6979      	ldr	r1, [r7, #20]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fe35 	bl	80062ee <put_fat>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <create_chain+0xe4>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fe28 	bl	80062ee <put_fat>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11a      	bne.n	80066de <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d018      	beq.n	80066ee <create_chain+0x130>
			fs->free_clust--;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066c2:	1e5a      	subs	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80066dc:	e007      	b.n	80066ee <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d102      	bne.n	80066ea <create_chain+0x12c>
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	e000      	b.n	80066ec <create_chain+0x12e>
 80066ea:	2301      	movs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80066ee:	697b      	ldr	r3, [r7, #20]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006708:	3304      	adds	r3, #4
 800670a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	0a5b      	lsrs	r3, r3, #9
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006716:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800671a:	fbb3 f3f2 	udiv	r3, r3, r2
 800671e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1d1a      	adds	r2, r3, #4
 8006724:	613a      	str	r2, [r7, #16]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <clmt_clust+0x3c>
 8006730:	2300      	movs	r3, #0
 8006732:	e010      	b.n	8006756 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d307      	bcc.n	800674c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3304      	adds	r3, #4
 8006748:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800674a:	e7e9      	b.n	8006720 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800674c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
}
 8006756:	4618      	mov	r0, r3
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	b29a      	uxth	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800677a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d007      	beq.n	8006792 <dir_sdi+0x32>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006788:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	429a      	cmp	r2, r3
 8006790:	d301      	bcc.n	8006796 <dir_sdi+0x36>
		return FR_INT_ERR;
 8006792:	2302      	movs	r3, #2
 8006794:	e074      	b.n	8006880 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10c      	bne.n	80067b6 <dir_sdi+0x56>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d105      	bne.n	80067b6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067b0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80067b4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d111      	bne.n	80067e0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067c2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80067c6:	461a      	mov	r2, r3
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d301      	bcc.n	80067d2 <dir_sdi+0x72>
			return FR_INT_ERR;
 80067ce:	2302      	movs	r3, #2
 80067d0:	e056      	b.n	8006880 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	e032      	b.n	8006846 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80067ee:	e01e      	b.n	800682e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067f6:	6979      	ldr	r1, [r7, #20]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fcbe 	bl	800617a <get_fat>
 80067fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d101      	bne.n	800680c <dir_sdi+0xac>
 8006808:	2301      	movs	r3, #1
 800680a:	e039      	b.n	8006880 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d907      	bls.n	8006822 <dir_sdi+0xc2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006818:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	429a      	cmp	r2, r3
 8006820:	d301      	bcc.n	8006826 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8006822:	2302      	movs	r3, #2
 8006824:	e02c      	b.n	8006880 <dir_sdi+0x120>
			idx -= ic;
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	429a      	cmp	r2, r3
 8006834:	d2dc      	bcs.n	80067f0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff fc7a 	bl	8006138 <clust2sect>
 8006844:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <dir_sdi+0xf8>
 8006854:	2302      	movs	r3, #2
 8006856:	e013      	b.n	8006880 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	091a      	lsrs	r2, r3, #4
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	441a      	add	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800686c:	461a      	mov	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	015b      	lsls	r3, r3, #5
 8006876:	441a      	add	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <dir_next+0x26>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <dir_next+0x2a>
		return FR_NO_FILE;
 80068ae:	2304      	movs	r3, #4
 80068b0:	e0dd      	b.n	8006a6e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 80c6 	bne.w	8006a4a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068dc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80068e0:	461a      	mov	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4293      	cmp	r3, r2
 80068e6:	f0c0 80b0 	bcc.w	8006a4a <dir_next+0x1c2>
				return FR_NO_FILE;
 80068ea:	2304      	movs	r3, #4
 80068ec:	e0bf      	b.n	8006a6e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	091b      	lsrs	r3, r3, #4
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80068f8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80068fc:	3a01      	subs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 80a2 	bne.w	8006a4a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f7ff fc30 	bl	800617a <get_fat>
 800691a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d801      	bhi.n	8006926 <dir_next+0x9e>
 8006922:	2302      	movs	r3, #2
 8006924:	e0a3      	b.n	8006a6e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d101      	bne.n	8006932 <dir_next+0xaa>
 800692e:	2301      	movs	r3, #1
 8006930:	e09d      	b.n	8006a6e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006938:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	429a      	cmp	r2, r3
 8006940:	d374      	bcc.n	8006a2c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <dir_next+0xc4>
 8006948:	2304      	movs	r3, #4
 800694a:	e090      	b.n	8006a6e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7ff fe2f 	bl	80065be <create_chain>
 8006960:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <dir_next+0xe4>
 8006968:	2307      	movs	r3, #7
 800696a:	e080      	b.n	8006a6e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <dir_next+0xee>
 8006972:	2302      	movs	r3, #2
 8006974:	e07b      	b.n	8006a6e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d101      	bne.n	8006982 <dir_next+0xfa>
 800697e:	2301      	movs	r3, #1
 8006980:	e075      	b.n	8006a6e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fab1 	bl	8005ef0 <sync_window>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <dir_next+0x110>
 8006994:	2301      	movs	r3, #1
 8006996:	e06a      	b.n	8006a6e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800699e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff f895 	bl	8005ad4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7ff fbbd 	bl	8006138 <clust2sect>
 80069be:	4603      	mov	r3, r0
 80069c0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	e01b      	b.n	8006a02 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fa87 	bl	8005ef0 <sync_window>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <dir_next+0x164>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e040      	b.n	8006a6e <dir_next+0x1e6>
						dp->fs->winsect++;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069f2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80069f6:	3201      	adds	r2, #1
 80069f8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3301      	adds	r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a08:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d3da      	bcc.n	80069ca <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a1a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	1a8a      	subs	r2, r1, r2
 8006a28:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a3a:	6979      	ldr	r1, [r7, #20]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff fb7b 	bl	8006138 <clust2sect>
 8006a42:	4602      	mov	r2, r0
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	015b      	lsls	r3, r3, #5
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd90      	pop	{r4, r7, pc}

08006a76 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006a80:	2100      	movs	r1, #0
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fe6c 	bl	8006760 <dir_sdi>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d131      	bne.n	8006af6 <dir_alloc+0x80>
		n = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f7ff fa6c 	bl	8005f82 <move_window>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11f      	bne.n	8006af4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2be5      	cmp	r3, #229	; 0xe5
 8006abe:	d005      	beq.n	8006acc <dir_alloc+0x56>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d107      	bne.n	8006adc <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d102      	bne.n	8006ae0 <dir_alloc+0x6a>
 8006ada:	e00c      	b.n	8006af6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006adc:	2300      	movs	r3, #0
 8006ade:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fed0 	bl	8006888 <dir_next>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0d1      	beq.n	8006a96 <dir_alloc+0x20>
 8006af2:	e000      	b.n	8006af6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006af4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d101      	bne.n	8006b00 <dir_alloc+0x8a>
 8006afc:	2307      	movs	r3, #7
 8006afe:	73fb      	strb	r3, [r7, #15]
	return res;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	331b      	adds	r3, #27
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	b21a      	sxth	r2, r3
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	331a      	adds	r3, #26
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b21b      	sxth	r3, r3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	b21b      	sxth	r3, r3
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d10f      	bne.n	8006b58 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	3315      	adds	r3, #21
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	b21a      	sxth	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	3314      	adds	r3, #20
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b21b      	sxth	r3, r3
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

	return cl;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	331a      	adds	r3, #26
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	331b      	adds	r3, #27
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	0c1a      	lsrs	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3315      	adds	r3, #21
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fdd0 	bl	8006760 <dir_sdi>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <dir_find+0x1e>
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	e03b      	b.n	8006c46 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7ff f9d0 	bl	8005f82 <move_window>
 8006be2:	4603      	mov	r3, r0
 8006be4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d128      	bne.n	8006c3e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bf2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <dir_find+0x56>
 8006c00:	2304      	movs	r3, #4
 8006c02:	75fb      	strb	r3, [r7, #23]
 8006c04:	e01e      	b.n	8006c44 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	330b      	adds	r3, #11
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <dir_find+0x7a>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c1a:	220b      	movs	r2, #11
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6938      	ldr	r0, [r7, #16]
 8006c20:	f7fe ff72 	bl	8005b08 <mem_cmp>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fe2b 	bl	8006888 <dir_next>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0c8      	beq.n	8006bce <dir_find+0x1e>
 8006c3c:	e002      	b.n	8006c44 <dir_find+0x94>
		if (res != FR_OK) break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <dir_find+0x94>
			break;
 8006c42:	bf00      	nop

	return res;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006c56:	2101      	movs	r1, #1
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff0c 	bl	8006a76 <dir_alloc>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d126      	bne.n	8006cb6 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f7ff f983 	bl	8005f82 <move_window>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d117      	bne.n	8006cb6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe ff1f 	bl	8005ad4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006ca2:	220b      	movs	r2, #11
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7fe fef7 	bl	8005a98 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e002      	b.n	8006cd8 <create_name+0x18>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b2f      	cmp	r3, #47	; 0x2f
 8006cde:	d0f8      	beq.n	8006cd2 <create_name+0x12>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ce6:	d0f4      	beq.n	8006cd2 <create_name+0x12>
	sfn = dp->fn;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006cee:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006cf0:	220b      	movs	r2, #11
 8006cf2:	2120      	movs	r1, #32
 8006cf4:	68b8      	ldr	r0, [r7, #8]
 8006cf6:	f7fe feed 	bl	8005ad4 <mem_set>
	si = i = b = 0; ni = 8;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	2308      	movs	r3, #8
 8006d08:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	617a      	str	r2, [r7, #20]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006d18:	7fbb      	ldrb	r3, [r7, #30]
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d953      	bls.n	8006dc6 <create_name+0x106>
 8006d1e:	7fbb      	ldrb	r3, [r7, #30]
 8006d20:	2b2f      	cmp	r3, #47	; 0x2f
 8006d22:	d050      	beq.n	8006dc6 <create_name+0x106>
 8006d24:	7fbb      	ldrb	r3, [r7, #30]
 8006d26:	2b5c      	cmp	r3, #92	; 0x5c
 8006d28:	d04d      	beq.n	8006dc6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006d2a:	7fbb      	ldrb	r3, [r7, #30]
 8006d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d2e:	d003      	beq.n	8006d38 <create_name+0x78>
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d30f      	bcc.n	8006d58 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d102      	bne.n	8006d44 <create_name+0x84>
 8006d3e:	7fbb      	ldrb	r3, [r7, #30]
 8006d40:	2b2e      	cmp	r3, #46	; 0x2e
 8006d42:	d001      	beq.n	8006d48 <create_name+0x88>
 8006d44:	2306      	movs	r3, #6
 8006d46:	e073      	b.n	8006e30 <create_name+0x170>
			i = 8; ni = 11;
 8006d48:	2308      	movs	r3, #8
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	230b      	movs	r3, #11
 8006d4e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006d50:	7ffb      	ldrb	r3, [r7, #31]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	77fb      	strb	r3, [r7, #31]
 8006d56:	e035      	b.n	8006dc4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006d58:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da08      	bge.n	8006d72 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006d60:	7ffb      	ldrb	r3, [r7, #31]
 8006d62:	f043 0303 	orr.w	r3, r3, #3
 8006d66:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006d68:	7fbb      	ldrb	r3, [r7, #30]
 8006d6a:	3b80      	subs	r3, #128	; 0x80
 8006d6c:	4a32      	ldr	r2, [pc, #200]	; (8006e38 <create_name+0x178>)
 8006d6e:	5cd3      	ldrb	r3, [r2, r3]
 8006d70:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006d72:	7fbb      	ldrb	r3, [r7, #30]
 8006d74:	4619      	mov	r1, r3
 8006d76:	4831      	ldr	r0, [pc, #196]	; (8006e3c <create_name+0x17c>)
 8006d78:	f7fe feec 	bl	8005b54 <chk_chr>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <create_name+0xc6>
				return FR_INVALID_NAME;
 8006d82:	2306      	movs	r3, #6
 8006d84:	e054      	b.n	8006e30 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006d86:	7fbb      	ldrb	r3, [r7, #30]
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d907      	bls.n	8006d9c <create_name+0xdc>
 8006d8c:	7fbb      	ldrb	r3, [r7, #30]
 8006d8e:	2b5a      	cmp	r3, #90	; 0x5a
 8006d90:	d804      	bhi.n	8006d9c <create_name+0xdc>
				b |= 2;
 8006d92:	7ffb      	ldrb	r3, [r7, #31]
 8006d94:	f043 0302 	orr.w	r3, r3, #2
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e00c      	b.n	8006db6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006d9c:	7fbb      	ldrb	r3, [r7, #30]
 8006d9e:	2b60      	cmp	r3, #96	; 0x60
 8006da0:	d909      	bls.n	8006db6 <create_name+0xf6>
 8006da2:	7fbb      	ldrb	r3, [r7, #30]
 8006da4:	2b7a      	cmp	r3, #122	; 0x7a
 8006da6:	d806      	bhi.n	8006db6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006da8:	7ffb      	ldrb	r3, [r7, #31]
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	7fbb      	ldrb	r3, [r7, #30]
 8006db2:	3b20      	subs	r3, #32
 8006db4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	613a      	str	r2, [r7, #16]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	7fba      	ldrb	r2, [r7, #30]
 8006dc2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006dc4:	e7a1      	b.n	8006d0a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	441a      	add	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006dd0:	7fbb      	ldrb	r3, [r7, #30]
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d801      	bhi.n	8006dda <create_name+0x11a>
 8006dd6:	2304      	movs	r3, #4
 8006dd8:	e000      	b.n	8006ddc <create_name+0x11c>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <create_name+0x128>
 8006de4:	2306      	movs	r3, #6
 8006de6:	e023      	b.n	8006e30 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2be5      	cmp	r3, #229	; 0xe5
 8006dee:	d102      	bne.n	8006df6 <create_name+0x136>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2205      	movs	r2, #5
 8006df4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d102      	bne.n	8006e02 <create_name+0x142>
 8006dfc:	7ffb      	ldrb	r3, [r7, #31]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006e02:	7ffb      	ldrb	r3, [r7, #31]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d103      	bne.n	8006e14 <create_name+0x154>
 8006e0c:	7fbb      	ldrb	r3, [r7, #30]
 8006e0e:	f043 0310 	orr.w	r3, r3, #16
 8006e12:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	f003 030c 	and.w	r3, r3, #12
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d103      	bne.n	8006e26 <create_name+0x166>
 8006e1e:	7fbb      	ldrb	r3, [r7, #30]
 8006e20:	f043 0308 	orr.w	r3, r3, #8
 8006e24:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	330b      	adds	r3, #11
 8006e2a:	7fba      	ldrb	r2, [r7, #30]
 8006e2c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e2e:	2300      	movs	r3, #0
#endif
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	080084d4 	.word	0x080084d4
 8006e3c:	08008450 	.word	0x08008450

08006e40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b2f      	cmp	r3, #47	; 0x2f
 8006e50:	d003      	beq.n	8006e5a <follow_path+0x1a>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b5c      	cmp	r3, #92	; 0x5c
 8006e58:	d102      	bne.n	8006e60 <follow_path+0x20>
		path++;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b1f      	cmp	r3, #31
 8006e6e:	d80a      	bhi.n	8006e86 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fc74 	bl	8006760 <dir_sdi>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006e84:	e045      	b.n	8006f12 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e86:	463b      	mov	r3, r7
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff ff18 	bl	8006cc0 <create_name>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d136      	bne.n	8006f08 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fe88 	bl	8006bb0 <dir_find>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006eaa:	7adb      	ldrb	r3, [r3, #11]
 8006eac:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d128      	bne.n	8006f0c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d123      	bne.n	8006f0c <follow_path+0xcc>
 8006ec4:	2305      	movs	r3, #5
 8006ec6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006ec8:	e020      	b.n	8006f0c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11d      	bne.n	8006f10 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eda:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	330b      	adds	r3, #11
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d102      	bne.n	8006ef0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006eea:	2305      	movs	r3, #5
 8006eec:	73fb      	strb	r3, [r7, #15]
 8006eee:	e010      	b.n	8006f12 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fe06 	bl	8006b0a <ld_clust>
 8006efe:	4602      	mov	r2, r0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f06:	e7be      	b.n	8006e86 <follow_path+0x46>
			if (res != FR_OK) break;
 8006f08:	bf00      	nop
 8006f0a:	e002      	b.n	8006f12 <follow_path+0xd2>
				break;
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f10:	bf00      	nop
		}
	}

	return res;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295
 8006f28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d031      	beq.n	8006f96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e002      	b.n	8006f40 <get_ldnumber+0x24>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d903      	bls.n	8006f50 <get_ldnumber+0x34>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b3a      	cmp	r3, #58	; 0x3a
 8006f4e:	d1f4      	bne.n	8006f3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b3a      	cmp	r3, #58	; 0x3a
 8006f56:	d11c      	bne.n	8006f92 <get_ldnumber+0x76>
			tp = *path;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	60fa      	str	r2, [r7, #12]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	3b30      	subs	r3, #48	; 0x30
 8006f68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	d80e      	bhi.n	8006f8e <get_ldnumber+0x72>
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d10a      	bne.n	8006f8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d107      	bne.n	8006f8e <get_ldnumber+0x72>
					vol = (int)i;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	3301      	adds	r3, #1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	e002      	b.n	8006f98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006f96:	693b      	ldr	r3, [r7, #16]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
	...

08006fa4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fe ffdd 	bl	8005f82 <move_window>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <check_fs+0x2e>
		return 3;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e04a      	b.n	8007068 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fd8:	3301      	adds	r3, #1
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	b21a      	sxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006fe6:	b21b      	sxth	r3, r3
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	4a20      	ldr	r2, [pc, #128]	; (8007070 <check_fs+0xcc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d001      	beq.n	8006ff6 <check_fs+0x52>
		return 2;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	e038      	b.n	8007068 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3336      	adds	r3, #54	; 0x36
 8006ffa:	3303      	adds	r3, #3
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	061a      	lsls	r2, r3, #24
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3336      	adds	r3, #54	; 0x36
 8007004:	3302      	adds	r3, #2
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	041b      	lsls	r3, r3, #16
 800700a:	4313      	orrs	r3, r2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	3236      	adds	r2, #54	; 0x36
 8007010:	3201      	adds	r2, #1
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	0212      	lsls	r2, r2, #8
 8007016:	4313      	orrs	r3, r2
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800701e:	4313      	orrs	r3, r2
 8007020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007024:	4a13      	ldr	r2, [pc, #76]	; (8007074 <check_fs+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d101      	bne.n	800702e <check_fs+0x8a>
		return 0;
 800702a:	2300      	movs	r3, #0
 800702c:	e01c      	b.n	8007068 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3352      	adds	r3, #82	; 0x52
 8007032:	3303      	adds	r3, #3
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	061a      	lsls	r2, r3, #24
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3352      	adds	r3, #82	; 0x52
 800703c:	3302      	adds	r3, #2
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	4313      	orrs	r3, r2
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	3252      	adds	r2, #82	; 0x52
 8007048:	3201      	adds	r2, #1
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	0212      	lsls	r2, r2, #8
 800704e:	4313      	orrs	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007056:	4313      	orrs	r3, r2
 8007058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800705c:	4a05      	ldr	r2, [pc, #20]	; (8007074 <check_fs+0xd0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d101      	bne.n	8007066 <check_fs+0xc2>
		return 0;
 8007062:	2300      	movs	r3, #0
 8007064:	e000      	b.n	8007068 <check_fs+0xc4>

	return 1;
 8007066:	2301      	movs	r3, #1
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	ffffaa55 	.word	0xffffaa55
 8007074:	00544146 	.word	0x00544146

08007078 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b096      	sub	sp, #88	; 0x58
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800708c:	68b8      	ldr	r0, [r7, #8]
 800708e:	f7ff ff45 	bl	8006f1c <get_ldnumber>
 8007092:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	da01      	bge.n	800709e <find_volume+0x26>
 800709a:	230b      	movs	r3, #11
 800709c:	e2a8      	b.n	80075f0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800709e:	4a9d      	ldr	r2, [pc, #628]	; (8007314 <find_volume+0x29c>)
 80070a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <find_volume+0x3a>
 80070ae:	230c      	movs	r3, #12
 80070b0:	e29e      	b.n	80075f0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01b      	beq.n	80070fa <find_volume+0x82>
		stat = disk_status(fs->drv);
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fc47 	bl	800595c <disk_status>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10c      	bne.n	80070fa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <find_volume+0x7e>
 80070e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80070f2:	230a      	movs	r3, #10
 80070f4:	e27c      	b.n	80075f0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80070f6:	2300      	movs	r3, #0
 80070f8:	e27a      	b.n	80075f0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007104:	b2da      	uxtb	r2, r3
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fc3c 	bl	8005990 <disk_initialize>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800711e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800712a:	2303      	movs	r3, #3
 800712c:	e260      	b.n	80075f0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <find_volume+0xcc>
 8007134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007140:	230a      	movs	r3, #10
 8007142:	e255      	b.n	80075f0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007148:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800714a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800714c:	f7ff ff2a 	bl	8006fa4 <check_fs>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800715a:	2b01      	cmp	r3, #1
 800715c:	d153      	bne.n	8007206 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800715e:	2300      	movs	r3, #0
 8007160:	643b      	str	r3, [r7, #64]	; 0x40
 8007162:	e028      	b.n	80071b6 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800716e:	4413      	add	r3, r2
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	3304      	adds	r3, #4
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d012      	beq.n	80071a2 <find_volume+0x12a>
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	330b      	adds	r3, #11
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	061a      	lsls	r2, r3, #24
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	330a      	adds	r3, #10
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	4313      	orrs	r3, r2
 800718e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007190:	3209      	adds	r2, #9
 8007192:	7812      	ldrb	r2, [r2, #0]
 8007194:	0212      	lsls	r2, r2, #8
 8007196:	4313      	orrs	r3, r2
 8007198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719a:	3208      	adds	r2, #8
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	431a      	orrs	r2, r3
 80071a0:	e000      	b.n	80071a4 <find_volume+0x12c>
 80071a2:	2200      	movs	r2, #0
 80071a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	3358      	adds	r3, #88	; 0x58
 80071aa:	443b      	add	r3, r7
 80071ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80071b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b2:	3301      	adds	r3, #1
 80071b4:	643b      	str	r3, [r7, #64]	; 0x40
 80071b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d9d3      	bls.n	8007164 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80071bc:	2300      	movs	r3, #0
 80071be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80071c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <find_volume+0x154>
 80071c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c8:	3b01      	subs	r3, #1
 80071ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80071cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3358      	adds	r3, #88	; 0x58
 80071d2:	443b      	add	r3, r7
 80071d4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071d8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80071da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <find_volume+0x174>
 80071e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071e4:	f7ff fede 	bl	8006fa4 <check_fs>
 80071e8:	4603      	mov	r3, r0
 80071ea:	e000      	b.n	80071ee <find_volume+0x176>
 80071ec:	2302      	movs	r3, #2
 80071ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80071f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <find_volume+0x18e>
 80071fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fc:	3301      	adds	r3, #1
 80071fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007202:	2b03      	cmp	r3, #3
 8007204:	d9e2      	bls.n	80071cc <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800720a:	2b03      	cmp	r3, #3
 800720c:	d101      	bne.n	8007212 <find_volume+0x19a>
 800720e:	2301      	movs	r3, #1
 8007210:	e1ee      	b.n	80075f0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <find_volume+0x1a6>
 800721a:	230d      	movs	r3, #13
 800721c:	e1e8      	b.n	80075f0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	7b1b      	ldrb	r3, [r3, #12]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	b21a      	sxth	r2, r3
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	7adb      	ldrb	r3, [r3, #11]
 800722a:	b21b      	sxth	r3, r3
 800722c:	4313      	orrs	r3, r2
 800722e:	b21b      	sxth	r3, r3
 8007230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007234:	d001      	beq.n	800723a <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8007236:	230d      	movs	r3, #13
 8007238:	e1da      	b.n	80075f0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	7ddb      	ldrb	r3, [r3, #23]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	b21a      	sxth	r2, r3
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	7d9b      	ldrb	r3, [r3, #22]
 8007246:	b21b      	sxth	r3, r3
 8007248:	4313      	orrs	r3, r2
 800724a:	b21b      	sxth	r3, r3
 800724c:	b29b      	uxth	r3, r3
 800724e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d112      	bne.n	800727c <find_volume+0x204>
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800725c:	061a      	lsls	r2, r3, #24
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	4313      	orrs	r3, r2
 8007268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800726e:	0212      	lsls	r2, r2, #8
 8007270:	4313      	orrs	r3, r2
 8007272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007274:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007278:	4313      	orrs	r3, r2
 800727a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007280:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	7c1a      	ldrb	r2, [r3, #16]
 8007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007294:	2b01      	cmp	r3, #1
 8007296:	d006      	beq.n	80072a6 <find_volume+0x22e>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d001      	beq.n	80072a6 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 80072a2:	230d      	movs	r3, #13
 80072a4:	e1a4      	b.n	80075f0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80072ac:	461a      	mov	r2, r3
 80072ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
 80072b4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	7b5a      	ldrb	r2, [r3, #13]
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <find_volume+0x268>
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80072d0:	461a      	mov	r2, r3
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80072d8:	3b01      	subs	r3, #1
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 80072e0:	230d      	movs	r3, #13
 80072e2:	e185      	b.n	80075f0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	7c9b      	ldrb	r3, [r3, #18]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b21a      	sxth	r2, r3
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	7c5b      	ldrb	r3, [r3, #17]
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	4313      	orrs	r3, r2
 80072f4:	b21b      	sxth	r3, r3
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800730e:	230d      	movs	r3, #13
 8007310:	e16e      	b.n	80075f0 <find_volume+0x578>
 8007312:	bf00      	nop
 8007314:	200043fc 	.word	0x200043fc

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	7d1b      	ldrb	r3, [r3, #20]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	b21a      	sxth	r2, r3
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	7cdb      	ldrb	r3, [r3, #19]
 8007324:	b21b      	sxth	r3, r3
 8007326:	4313      	orrs	r3, r2
 8007328:	b21b      	sxth	r3, r3
 800732a:	b29b      	uxth	r3, r3
 800732c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800732e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007330:	2b00      	cmp	r3, #0
 8007332:	d112      	bne.n	800735a <find_volume+0x2e2>
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800733a:	061a      	lsls	r2, r3, #24
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	4313      	orrs	r3, r2
 8007346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007348:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800734c:	0212      	lsls	r2, r2, #8
 800734e:	4313      	orrs	r3, r2
 8007350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007352:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007356:	4313      	orrs	r3, r2
 8007358:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	7bdb      	ldrb	r3, [r3, #15]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	b21a      	sxth	r2, r3
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	7b9b      	ldrb	r3, [r3, #14]
 8007366:	b21b      	sxth	r3, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	b21b      	sxth	r3, r3
 800736c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800736e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <find_volume+0x300>
 8007374:	230d      	movs	r3, #13
 8007376:	e13b      	b.n	80075f0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007378:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800737a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737c:	4413      	add	r3, r2
 800737e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007380:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007384:	0912      	lsrs	r2, r2, #4
 8007386:	b292      	uxth	r2, r2
 8007388:	4413      	add	r3, r2
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800738c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	429a      	cmp	r2, r3
 8007392:	d201      	bcs.n	8007398 <find_volume+0x320>
 8007394:	230d      	movs	r3, #13
 8007396:	e12b      	b.n	80075f0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80073a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <find_volume+0x33c>
 80073b0:	230d      	movs	r3, #13
 80073b2:	e11d      	b.n	80075f0 <find_volume+0x578>
	fmt = FS_FAT12;
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d902      	bls.n	80073ca <find_volume+0x352>
 80073c4:	2302      	movs	r3, #2
 80073c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d902      	bls.n	80073da <find_volume+0x362>
 80073d4:	2303      	movs	r3, #3
 80073d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	1c9a      	adds	r2, r3, #2
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80073ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80073ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f0:	441a      	add	r2, r3
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80073f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	441a      	add	r2, r3
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8007404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007408:	2b03      	cmp	r3, #3
 800740a:	d121      	bne.n	8007450 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <find_volume+0x3a2>
 8007416:	230d      	movs	r3, #13
 8007418:	e0ea      	b.n	80075f0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007420:	061a      	lsls	r2, r3, #24
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	4313      	orrs	r3, r2
 800742c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800742e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007432:	0212      	lsls	r2, r2, #8
 8007434:	4313      	orrs	r3, r2
 8007436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007438:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800743c:	431a      	orrs	r2, r3
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	647b      	str	r3, [r7, #68]	; 0x44
 800744e:	e025      	b.n	800749c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <find_volume+0x3e6>
 800745a:	230d      	movs	r3, #13
 800745c:	e0c8      	b.n	80075f0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007466:	441a      	add	r2, r3
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800746e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007472:	2b02      	cmp	r3, #2
 8007474:	d104      	bne.n	8007480 <find_volume+0x408>
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	e00c      	b.n	800749a <find_volume+0x422>
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007486:	4613      	mov	r3, r2
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4413      	add	r3, r2
 800748c:	085a      	lsrs	r2, r3, #1
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80074a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80074a8:	0a5b      	lsrs	r3, r3, #9
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d201      	bcs.n	80074b2 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80074ae:	230d      	movs	r3, #13
 80074b0:	e09e      	b.n	80075f0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	f04f 32ff 	mov.w	r2, #4294967295
 80074b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	2280      	movs	r2, #128	; 0x80
 80074cc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80074d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d177      	bne.n	80075c8 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	b21a      	sxth	r2, r3
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074e8:	b21b      	sxth	r3, r3
 80074ea:	4313      	orrs	r3, r2
 80074ec:	b21b      	sxth	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d16a      	bne.n	80075c8 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80074f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f4:	3301      	adds	r3, #1
 80074f6:	4619      	mov	r1, r3
 80074f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074fa:	f7fe fd42 	bl	8005f82 <move_window>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d161      	bne.n	80075c8 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	b21a      	sxth	r2, r3
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800751c:	b21b      	sxth	r3, r3
 800751e:	4313      	orrs	r3, r2
 8007520:	b21b      	sxth	r3, r3
 8007522:	4a35      	ldr	r2, [pc, #212]	; (80075f8 <find_volume+0x580>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d14f      	bne.n	80075c8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	061a      	lsls	r2, r3, #24
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	789b      	ldrb	r3, [r3, #2]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	4313      	orrs	r3, r2
 8007536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007538:	7852      	ldrb	r2, [r2, #1]
 800753a:	0212      	lsls	r2, r2, #8
 800753c:	4313      	orrs	r3, r2
 800753e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	4a2d      	ldr	r2, [pc, #180]	; (80075fc <find_volume+0x584>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d13e      	bne.n	80075c8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007550:	061a      	lsls	r2, r3, #24
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	4313      	orrs	r3, r2
 800755c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800755e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007562:	0212      	lsls	r2, r2, #8
 8007564:	4313      	orrs	r3, r2
 8007566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007568:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800756c:	4313      	orrs	r3, r2
 800756e:	4a24      	ldr	r2, [pc, #144]	; (8007600 <find_volume+0x588>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d129      	bne.n	80075c8 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800757a:	061a      	lsls	r2, r3, #24
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007582:	041b      	lsls	r3, r3, #16
 8007584:	4313      	orrs	r3, r2
 8007586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007588:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800758c:	0212      	lsls	r2, r2, #8
 800758e:	4313      	orrs	r3, r2
 8007590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007592:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007596:	431a      	orrs	r2, r3
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80075a4:	061a      	lsls	r2, r3, #24
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	4313      	orrs	r3, r2
 80075b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075b2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80075b6:	0212      	lsls	r2, r2, #8
 80075b8:	4313      	orrs	r3, r2
 80075ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075bc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80075c0:	431a      	orrs	r2, r3
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80075ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <find_volume+0x58c>)
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <find_volume+0x58c>)
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <find_volume+0x58c>)
 80075e0:	881a      	ldrh	r2, [r3, #0]
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80075e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ea:	f7fe fc57 	bl	8005e9c <clear_lock>
#endif

	return FR_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3758      	adds	r7, #88	; 0x58
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	ffffaa55 	.word	0xffffaa55
 80075fc:	41615252 	.word	0x41615252
 8007600:	61417272 	.word	0x61417272
 8007604:	20004400 	.word	0x20004400

08007608 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d022      	beq.n	8007660 <validate+0x58>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01d      	beq.n	8007660 <validate+0x58>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800762a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <validate+0x58>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007638:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007642:	429a      	cmp	r2, r3
 8007644:	d10c      	bne.n	8007660 <validate+0x58>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800764c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe f983 	bl	800595c <disk_status>
 8007656:	4603      	mov	r3, r0
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007660:	2309      	movs	r3, #9
 8007662:	e000      	b.n	8007666 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007682:	f107 0310 	add.w	r3, r7, #16
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fc48 	bl	8006f1c <get_ldnumber>
 800768c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da01      	bge.n	8007698 <f_mount+0x28>
 8007694:	230b      	movs	r3, #11
 8007696:	e02d      	b.n	80076f4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <f_mount+0x8c>)
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d006      	beq.n	80076b6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80076a8:	69b8      	ldr	r0, [r7, #24]
 80076aa:	f7fe fbf7 	bl	8005e9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	490d      	ldr	r1, [pc, #52]	; (80076fc <f_mount+0x8c>)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <f_mount+0x6a>
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <f_mount+0x6e>
 80076da:	2300      	movs	r3, #0
 80076dc:	e00a      	b.n	80076f4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80076de:	f107 0108 	add.w	r1, r7, #8
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	2200      	movs	r2, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fcc5 	bl	8007078 <find_volume>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200043fc 	.word	0x200043fc

08007700 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8007706:	af00      	add	r7, sp, #0
 8007708:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800770c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007710:	6018      	str	r0, [r3, #0]
 8007712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007716:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800771a:	6019      	str	r1, [r3, #0]
 800771c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007720:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007724:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800772a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <f_open+0x38>
 8007734:	2309      	movs	r3, #9
 8007736:	e257      	b.n	8007be8 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8007738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800773c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007750:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007754:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007758:	7812      	ldrb	r2, [r2, #0]
 800775a:	f002 021f 	and.w	r2, r2, #31
 800775e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007764:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	f107 0108 	add.w	r1, r7, #8
 8007774:	f107 0320 	add.w	r3, r7, #32
 8007778:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff fc7b 	bl	8007078 <find_volume>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007788:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800778c:	2b00      	cmp	r3, #0
 800778e:	f040 8229 	bne.w	8007be4 <f_open+0x4e4>
		INIT_BUF(dj);
 8007792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007796:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800779a:	f107 0214 	add.w	r2, r7, #20
 800779e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80077a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f107 0320 	add.w	r3, r7, #32
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fb44 	bl	8006e40 <follow_path>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80077be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80077c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077ca:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80077ce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d11d      	bne.n	8007812 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80077d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80077de:	2306      	movs	r3, #6
 80077e0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80077e4:	e015      	b.n	8007812 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80077e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ea:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bf14      	ite	ne
 80077f8:	2301      	movne	r3, #1
 80077fa:	2300      	moveq	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	f107 0320 	add.w	r3, r7, #32
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f9be 	bl	8005b88 <chk_lock>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007812:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007816:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 031c 	and.w	r3, r3, #28
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80e6 	beq.w	80079f2 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8007826:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800782a:	2b00      	cmp	r3, #0
 800782c:	d027      	beq.n	800787e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800782e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007832:	2b04      	cmp	r3, #4
 8007834:	d10e      	bne.n	8007854 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007836:	f7fe fa13 	bl	8005c60 <enq_lock>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <f_open+0x14e>
 8007840:	f107 0320 	add.w	r3, r7, #32
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fa02 	bl	8006c4e <dir_register>
 800784a:	4603      	mov	r3, r0
 800784c:	e000      	b.n	8007850 <f_open+0x150>
 800784e:	2312      	movs	r3, #18
 8007850:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007858:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800785c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007860:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	f042 0208 	orr.w	r2, r2, #8
 800786a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800786c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007870:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007874:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007878:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800787c:	e017      	b.n	80078ae <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800787e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007882:	330b      	adds	r3, #11
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 0311 	and.w	r3, r3, #17
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <f_open+0x196>
					res = FR_DENIED;
 800788e:	2307      	movs	r3, #7
 8007890:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007894:	e00b      	b.n	80078ae <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007896:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800789a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <f_open+0x1ae>
						res = FR_EXIST;
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80078ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 80c1 	bne.w	8007a3a <f_open+0x33a>
 80078b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078bc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80b7 	beq.w	8007a3a <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 80078cc:	f7fd ffa4 	bl	8005818 <get_fattime>
 80078d0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80078d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80078d8:	330e      	adds	r3, #14
 80078da:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	0a1b      	lsrs	r3, r3, #8
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80078f0:	330f      	adds	r3, #15
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80078fa:	0c1a      	lsrs	r2, r3, #16
 80078fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007900:	3310      	adds	r3, #16
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800790a:	0e1a      	lsrs	r2, r3, #24
 800790c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007910:	3311      	adds	r3, #17
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007916:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800791a:	330b      	adds	r3, #11
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007920:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007924:	331c      	adds	r3, #28
 8007926:	2200      	movs	r2, #0
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800792e:	331d      	adds	r3, #29
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007938:	331e      	adds	r3, #30
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007942:	331f      	adds	r3, #31
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800794c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007954:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007958:	4618      	mov	r0, r3
 800795a:	f7ff f8d6 	bl	8006b0a <ld_clust>
 800795e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8007962:	2100      	movs	r1, #0
 8007964:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8007968:	f7ff f8fc 	bl	8006b64 <st_clust>
				dj.fs->wflag = 1;
 800796c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007970:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800797e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007982:	2b00      	cmp	r3, #0
 8007984:	d059      	beq.n	8007a3a <f_open+0x33a>
					dw = dj.fs->winsect;
 8007986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800798e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007992:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007996:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800799a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80079a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079a6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fdad 	bl	800650a <remove_chain>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80079b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d13d      	bne.n	8007a3a <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80079be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80079c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079ca:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80079ce:	3a01      	subs	r2, #1
 80079d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80079d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80079dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079e0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe facc 	bl	8005f82 <move_window>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80079f0:	e023      	b.n	8007a3a <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80079f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d11f      	bne.n	8007a3a <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80079fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80079fe:	330b      	adds	r3, #11
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <f_open+0x312>
					res = FR_NO_FILE;
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007a10:	e013      	b.n	8007a3a <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a16:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <f_open+0x33a>
 8007a24:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007a28:	330b      	adds	r3, #11
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <f_open+0x33a>
						res = FR_DENIED;
 8007a34:	2307      	movs	r3, #7
 8007a36:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8007a3a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d153      	bne.n	8007aea <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a46:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <f_open+0x36c>
				mode |= FA__WRITTEN;
 8007a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a58:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007a5c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a60:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	f042 0220 	orr.w	r2, r2, #32
 8007a6a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a70:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a78:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a80:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007a98:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f023 0301 	bic.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bf14      	ite	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	2300      	moveq	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f107 0320 	add.w	r3, r7, #32
 8007aba:	4611      	mov	r1, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe f8f3 	bl	8005ca8 <inc_lock>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d102      	bne.n	8007aea <f_open+0x3ea>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007aea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d178      	bne.n	8007be4 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8007af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b00:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8007b0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007b1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b1e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b26:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe ffed 	bl	8006b0a <ld_clust>
 8007b30:	4602      	mov	r2, r0
 8007b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b36:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007b40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b44:	331f      	adds	r3, #31
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	061a      	lsls	r2, r3, #24
 8007b4a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007b4e:	331e      	adds	r3, #30
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	041b      	lsls	r3, r3, #16
 8007b54:	4313      	orrs	r3, r2
 8007b56:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007b5a:	321d      	adds	r2, #29
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	0212      	lsls	r2, r2, #8
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007b66:	321c      	adds	r2, #28
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b70:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b9e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bae:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007bb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bd2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007bd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bda:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007be4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b08c      	sub	sp, #48	; 0x30
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
 8007bfe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fcfc 	bl	8007608 <validate>
 8007c10:	4603      	mov	r3, r0
 8007c12:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007c14:	7ffb      	ldrb	r3, [r7, #31]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <f_read+0x2c>
 8007c1a:	7ffb      	ldrb	r3, [r7, #31]
 8007c1c:	e150      	b.n	8007ec0 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c2e:	e147      	b.n	8007ec0 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007c3e:	2307      	movs	r3, #7
 8007c40:	e13e      	b.n	8007ec0 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	f240 812d 	bls.w	8007eb6 <f_read+0x2c4>
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c60:	e129      	b.n	8007eb6 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 80f2 	bne.w	8007e56 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c78:	0a5b      	lsrs	r3, r3, #9
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c82:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d139      	bne.n	8007d08 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca6:	e018      	b.n	8007cda <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d008      	beq.n	8007cc4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7fe fd1c 	bl	80066f8 <clmt_clust>
 8007cc0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007cc2:	e00a      	b.n	8007cda <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f7fe fa51 	bl	800617a <get_fat>
 8007cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d805      	bhi.n	8007cec <f_read+0xfa>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e0e9      	b.n	8007ec0 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d105      	bne.n	8007d00 <f_read+0x10e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0df      	b.n	8007ec0 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7fe fa0e 	bl	8006138 <clust2sect>
 8007d1c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <f_read+0x13e>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e0c7      	b.n	8007ec0 <f_read+0x2ce>
			sect += csect;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4413      	add	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	0a5b      	lsrs	r3, r3, #9
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d046      	beq.n	8007dd2 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007d44:	7dfa      	ldrb	r2, [r7, #23]
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	4413      	add	r3, r2
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007d50:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d908      	bls.n	8007d6a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d5e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007d62:	461a      	mov	r2, r3
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d70:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	6a39      	ldr	r1, [r7, #32]
 8007d7a:	f7fd fe2f 	bl	80059dc <disk_read>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e097      	b.n	8007ec0 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d015      	beq.n	8007dca <f_read+0x1d8>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d90d      	bls.n	8007dca <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	025b      	lsls	r3, r3, #9
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	68f9      	ldr	r1, [r7, #12]
 8007dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fe67 	bl	8005a98 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	025b      	lsls	r3, r3, #9
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007dd0:	e05b      	b.n	8007e8a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d037      	beq.n	8007e4e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01d      	beq.n	8007e28 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007df2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f7fd fe0c 	bl	8005a1c <disk_write>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e12:	2301      	movs	r3, #1
 8007e14:	e054      	b.n	8007ec0 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e2e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	2301      	movs	r3, #1
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	f7fd fdd0 	bl	80059dc <disk_read>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d005      	beq.n	8007e4e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e038      	b.n	8007ec0 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e60:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d901      	bls.n	8007e72 <f_read+0x280>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e82:	4619      	mov	r1, r3
 8007e84:	6a38      	ldr	r0, [r7, #32]
 8007e86:	f7fd fe07 	bl	8005a98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e8a:	6a3a      	ldr	r2, [r7, #32]
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	4413      	add	r3, r2
 8007e90:	623b      	str	r3, [r7, #32]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	441a      	add	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	441a      	add	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f47f aed2 	bne.w	8007c62 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3730      	adds	r7, #48	; 0x30
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7ff fb99 	bl	8007608 <validate>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 80a8 	bne.w	8008032 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80a0 	beq.w	8008032 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d019      	beq.n	8007f34 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f06:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007f12:	2301      	movs	r3, #1
 8007f14:	f7fd fd82 	bl	8005a1c <disk_write>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e088      	b.n	8008034 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f7fe f81d 	bl	8005f82 <move_window>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d16f      	bne.n	8008032 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007f58:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	330b      	adds	r3, #11
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	330b      	adds	r3, #11
 8007f64:	f042 0220 	orr.w	r2, r2, #32
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	331c      	adds	r3, #28
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	331d      	adds	r3, #29
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f94:	0c1a      	lsrs	r2, r3, #16
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	331e      	adds	r3, #30
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007fa4:	0e1a      	lsrs	r2, r3, #24
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	331f      	adds	r3, #31
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6938      	ldr	r0, [r7, #16]
 8007fb8:	f7fe fdd4 	bl	8006b64 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007fbc:	f7fd fc2c 	bl	8005818 <get_fattime>
 8007fc0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	3316      	adds	r3, #22
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	3317      	adds	r3, #23
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	0c1a      	lsrs	r2, r3, #16
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3318      	adds	r3, #24
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	0e1a      	lsrs	r2, r3, #24
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	3319      	adds	r3, #25
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	3312      	adds	r3, #18
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	3313      	adds	r3, #19
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800800a:	f023 0320 	bic.w	r3, r3, #32
 800800e:	b2da      	uxtb	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008028:	4618      	mov	r0, r3
 800802a:	f7fd ffd8 	bl	8005fde <sync_fs>
 800802e:	4603      	mov	r3, r0
 8008030:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff ff3f 	bl	8007ec8 <f_sync>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d116      	bne.n	8008082 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fad7 	bl	8007608 <validate>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10e      	bne.n	8008082 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd fed2 	bl	8005e14 <dec_lock>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800809a:	2301      	movs	r3, #1
 800809c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80080a2:	4b1e      	ldr	r3, [pc, #120]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080a4:	7a5b      	ldrb	r3, [r3, #9]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d831      	bhi.n	8008110 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80080ac:	4b1b      	ldr	r3, [pc, #108]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080ae:	7a5b      	ldrb	r3, [r3, #9]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	4b19      	ldr	r3, [pc, #100]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080b6:	2100      	movs	r1, #0
 80080b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080bc:	7a5b      	ldrb	r3, [r3, #9]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4a16      	ldr	r2, [pc, #88]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080cc:	7a5b      	ldrb	r3, [r3, #9]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	461a      	mov	r2, r3
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080d4:	4413      	add	r3, r2
 80080d6:	79fa      	ldrb	r2, [r7, #7]
 80080d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80080da:	4b10      	ldr	r3, [pc, #64]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080dc:	7a5b      	ldrb	r3, [r3, #9]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	b2d1      	uxtb	r1, r2
 80080e4:	4a0d      	ldr	r2, [pc, #52]	; (800811c <FATFS_LinkDriverEx+0x90>)
 80080e6:	7251      	strb	r1, [r2, #9]
 80080e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80080ea:	7dbb      	ldrb	r3, [r7, #22]
 80080ec:	3330      	adds	r3, #48	; 0x30
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3301      	adds	r3, #1
 80080f8:	223a      	movs	r2, #58	; 0x3a
 80080fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3302      	adds	r3, #2
 8008100:	222f      	movs	r2, #47	; 0x2f
 8008102:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3303      	adds	r3, #3
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008110:	7dfb      	ldrb	r3, [r7, #23]
}
 8008112:	4618      	mov	r0, r3
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr
 800811c:	2000441c 	.word	0x2000441c

08008120 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800812a:	2200      	movs	r2, #0
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ffac 	bl	800808c <FATFS_LinkDriverEx>
 8008134:	4603      	mov	r3, r0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800814a:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <SD_initialize+0x38>)
 800814c:	2201      	movs	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008150:	f7fd fb6a 	bl	8005828 <BSP_SD_Init>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d107      	bne.n	800816a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <SD_initialize+0x38>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	b2da      	uxtb	r2, r3
 8008166:	4b04      	ldr	r3, [pc, #16]	; (8008178 <SD_initialize+0x38>)
 8008168:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800816a:	4b03      	ldr	r3, [pc, #12]	; (8008178 <SD_initialize+0x38>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	b2db      	uxtb	r3, r3
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000059 	.word	0x20000059

0800817c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <SD_status+0x38>)
 8008188:	2201      	movs	r2, #1
 800818a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800818c:	f7fd fba0 	bl	80058d0 <BSP_SD_GetCardState>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d107      	bne.n	80081a6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008196:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <SD_status+0x38>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <SD_status+0x38>)
 80081a4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80081a6:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <SD_status+0x38>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	b2db      	uxtb	r3, r3
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000059 	.word	0x20000059

080081b8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <SD_read+0x54>)
 80081ce:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <SD_read+0x58>)
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	6879      	ldr	r1, [r7, #4]
 80081d6:	68b8      	ldr	r0, [r7, #8]
 80081d8:	f7fd fb3e 	bl	8005858 <BSP_SD_ReadBlocks>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10e      	bne.n	8008200 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081e2:	e006      	b.n	80081f2 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	1e5a      	subs	r2, r3, #1
 80081e8:	613a      	str	r2, [r7, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <SD_read+0x3a>
      {
        return RES_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e007      	b.n	8008202 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081f2:	f7fd fb6d 	bl	80058d0 <BSP_SD_GetCardState>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f3      	bne.n	80081e4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	000186a0 	.word	0x000186a0
 8008210:	05f5e100 	.word	0x05f5e100

08008214 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8008228:	4b0f      	ldr	r3, [pc, #60]	; (8008268 <SD_write+0x54>)
 800822a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <SD_write+0x58>)
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	68b8      	ldr	r0, [r7, #8]
 8008234:	f7fd fb2e 	bl	8005894 <BSP_SD_WriteBlocks>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10e      	bne.n	800825c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800823e:	e006      	b.n	800824e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1e5a      	subs	r2, r3, #1
 8008244:	613a      	str	r2, [r7, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <SD_write+0x3a>
      {
        return RES_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e007      	b.n	800825e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800824e:	f7fd fb3f 	bl	80058d0 <BSP_SD_GetCardState>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f3      	bne.n	8008240 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	000186a0 	.word	0x000186a0
 800826c:	05f5e100 	.word	0x05f5e100

08008270 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	; 0x30
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	603a      	str	r2, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
 800827c:	460b      	mov	r3, r1
 800827e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008286:	4b24      	ldr	r3, [pc, #144]	; (8008318 <SD_ioctl+0xa8>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <SD_ioctl+0x28>
 8008294:	2303      	movs	r3, #3
 8008296:	e03b      	b.n	8008310 <SD_ioctl+0xa0>
  
  switch (cmd)
 8008298:	79bb      	ldrb	r3, [r7, #6]
 800829a:	2b03      	cmp	r3, #3
 800829c:	d833      	bhi.n	8008306 <SD_ioctl+0x96>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <SD_ioctl+0x34>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082b5 	.word	0x080082b5
 80082a8:	080082bd 	.word	0x080082bd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082ef 	.word	0x080082ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082ba:	e027      	b.n	800830c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80082bc:	f107 030c 	add.w	r3, r7, #12
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fd fb15 	bl	80058f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80082c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082d2:	e01b      	b.n	800830c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082d4:	f107 030c 	add.w	r3, r7, #12
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fd fb09 	bl	80058f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80082ec:	e00e      	b.n	800830c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80082ee:	f107 030c 	add.w	r3, r7, #12
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fd fafc 	bl	80058f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 80082f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008304:	e002      	b.n	800830c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8008306:	2304      	movs	r3, #4
 8008308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800830c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008310:	4618      	mov	r0, r3
 8008312:	3730      	adds	r7, #48	; 0x30
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000059 	.word	0x20000059

0800831c <__libc_init_array>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	2600      	movs	r6, #0
 8008320:	4d0c      	ldr	r5, [pc, #48]	; (8008354 <__libc_init_array+0x38>)
 8008322:	4c0d      	ldr	r4, [pc, #52]	; (8008358 <__libc_init_array+0x3c>)
 8008324:	1b64      	subs	r4, r4, r5
 8008326:	10a4      	asrs	r4, r4, #2
 8008328:	42a6      	cmp	r6, r4
 800832a:	d109      	bne.n	8008340 <__libc_init_array+0x24>
 800832c:	f000 f832 	bl	8008394 <_init>
 8008330:	2600      	movs	r6, #0
 8008332:	4d0a      	ldr	r5, [pc, #40]	; (800835c <__libc_init_array+0x40>)
 8008334:	4c0a      	ldr	r4, [pc, #40]	; (8008360 <__libc_init_array+0x44>)
 8008336:	1b64      	subs	r4, r4, r5
 8008338:	10a4      	asrs	r4, r4, #2
 800833a:	42a6      	cmp	r6, r4
 800833c:	d105      	bne.n	800834a <__libc_init_array+0x2e>
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	f855 3b04 	ldr.w	r3, [r5], #4
 8008344:	4798      	blx	r3
 8008346:	3601      	adds	r6, #1
 8008348:	e7ee      	b.n	8008328 <__libc_init_array+0xc>
 800834a:	f855 3b04 	ldr.w	r3, [r5], #4
 800834e:	4798      	blx	r3
 8008350:	3601      	adds	r6, #1
 8008352:	e7f2      	b.n	800833a <__libc_init_array+0x1e>
 8008354:	08008568 	.word	0x08008568
 8008358:	08008568 	.word	0x08008568
 800835c:	08008568 	.word	0x08008568
 8008360:	0800856c 	.word	0x0800856c

08008364 <memcmp>:
 8008364:	b510      	push	{r4, lr}
 8008366:	3901      	subs	r1, #1
 8008368:	4402      	add	r2, r0
 800836a:	4290      	cmp	r0, r2
 800836c:	d101      	bne.n	8008372 <memcmp+0xe>
 800836e:	2000      	movs	r0, #0
 8008370:	e005      	b.n	800837e <memcmp+0x1a>
 8008372:	7803      	ldrb	r3, [r0, #0]
 8008374:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008378:	42a3      	cmp	r3, r4
 800837a:	d001      	beq.n	8008380 <memcmp+0x1c>
 800837c:	1b18      	subs	r0, r3, r4
 800837e:	bd10      	pop	{r4, pc}
 8008380:	3001      	adds	r0, #1
 8008382:	e7f2      	b.n	800836a <memcmp+0x6>

08008384 <memset>:
 8008384:	4603      	mov	r3, r0
 8008386:	4402      	add	r2, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <_init>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	bf00      	nop
 8008398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839a:	bc08      	pop	{r3}
 800839c:	469e      	mov	lr, r3
 800839e:	4770      	bx	lr

080083a0 <_fini>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	bf00      	nop
 80083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a6:	bc08      	pop	{r3}
 80083a8:	469e      	mov	lr, r3
 80083aa:	4770      	bx	lr
