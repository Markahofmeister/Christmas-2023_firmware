
christmas-2023__master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007000  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007394  08007394  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08007394  08007394  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007394  08007394  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007398  08007398  00017398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800739c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004380  20000054  080073f0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200043d4  080073f0  000243d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef32  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6d  00000000  00000000  0002efaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8c2  00000000  00000000  000333c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001139a  00000000  00000000  0004ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd27  00000000  00000000  00060024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbd4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b4  00000000  00000000  000fbd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000054 	.word	0x20000054
 8000200:	00000000 	.word	0x00000000
 8000204:	080071cc 	.word	0x080071cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000058 	.word	0x20000058
 8000220:	080071cc 	.word	0x080071cc

08000224 <HAL_I2S_TxCpltCallback>:
volatile uint16_t signal_buff2[4096];

char *fileNames[] = {"yard.wav", "shit.wav", "gift.wav", "nut.wav", "grace.wav",
					"dump.wav", "treeBig.wav", "kma.wav", "winterMorn.wav", "rant.wav"};

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if(end_of_file_reached)
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <HAL_I2S_TxCpltCallback+0x4c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d118      	bne.n	8000268 <HAL_I2S_TxCpltCallback+0x44>
        return;

    volatile uint16_t* temp = signal_play_buff;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	60fb      	str	r3, [r7, #12]
    signal_play_buff = signal_read_buff;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000242:	6013      	str	r3, [r2, #0]
    signal_read_buff = temp;
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6013      	str	r3, [r2, #0]

    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	60bb      	str	r3, [r7, #8]
    HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_play_buff, nsamples);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	b292      	uxth	r2, r2
 8000258:	4619      	mov	r1, r3
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_I2S_TxCpltCallback+0x58>)
 800025c:	f001 fe64 	bl	8001f28 <HAL_I2S_Transmit_IT>
    read_next_chunk = true;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <HAL_I2S_TxCpltCallback+0x5c>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e000      	b.n	800026a <HAL_I2S_TxCpltCallback+0x46>
        return;
 8000268:	bf00      	nop
}
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000390 	.word	0x20000390
 8000274:	20000394 	.word	0x20000394
 8000278:	20000398 	.word	0x20000398
 800027c:	200000a0 	.word	0x200000a0
 8000280:	20000391 	.word	0x20000391

08000284 <playWavFile>:

int playWavFile(const char* fname) {
 8000284:	b580      	push	{r7, lr}
 8000286:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800028a:	af00      	add	r7, sp, #0
 800028c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000290:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000294:	6018      	str	r0, [r3, #0]

    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 8000296:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800029a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800029e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002a2:	2201      	movs	r2, #1
 80002a4:	6819      	ldr	r1, [r3, #0]
 80002a6:	f006 f947 	bl	8006538 <f_open>
 80002aa:	4603      	mov	r3, r0
 80002ac:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 80002b0:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <playWavFile+0x38>
        return EXIT_FAILURE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e1f7      	b.n	80006ac <playWavFile+0x428>
    }


    unsigned int bytesRead;
    uint8_t header[44];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 80002bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002c0:	f107 0108 	add.w	r1, r7, #8
 80002c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002c8:	222c      	movs	r2, #44	; 0x2c
 80002ca:	f006 fbae 	bl	8006a2a <f_read>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 80002d4:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d006      	beq.n	80002ea <playWavFile+0x66>
        f_close(&file);
 80002dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002e0:	4618      	mov	r0, r3
 80002e2:	f006 fdc7 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e1e0      	b.n	80006ac <playWavFile+0x428>
    }

    if(memcmp((const char*)header, "RIFF", 4) != 0) {
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2204      	movs	r2, #4
 80002f0:	49c7      	ldr	r1, [pc, #796]	; (8000610 <playWavFile+0x38c>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f006 ff52 	bl	800719c <memcmp>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d006      	beq.n	800030c <playWavFile+0x88>
        f_close(&file);
 80002fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000302:	4618      	mov	r0, r3
 8000304:	f006 fdb6 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 8000308:	2301      	movs	r3, #1
 800030a:	e1cf      	b.n	80006ac <playWavFile+0x428>
    }

    if(memcmp((const char*)header + 8, "WAVEfmt ", 8) != 0) {
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	3308      	adds	r3, #8
 8000312:	2208      	movs	r2, #8
 8000314:	49bf      	ldr	r1, [pc, #764]	; (8000614 <playWavFile+0x390>)
 8000316:	4618      	mov	r0, r3
 8000318:	f006 ff40 	bl	800719c <memcmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d006      	beq.n	8000330 <playWavFile+0xac>
        f_close(&file);
 8000322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000326:	4618      	mov	r0, r3
 8000328:	f006 fda4 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 800032c:	2301      	movs	r3, #1
 800032e:	e1bd      	b.n	80006ac <playWavFile+0x428>
    }

    if(memcmp((const char*)header + 36, "data", 4) != 0) {
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	3324      	adds	r3, #36	; 0x24
 8000336:	2204      	movs	r2, #4
 8000338:	49b7      	ldr	r1, [pc, #732]	; (8000618 <playWavFile+0x394>)
 800033a:	4618      	mov	r0, r3
 800033c:	f006 ff2e 	bl	800719c <memcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d006      	beq.n	8000354 <playWavFile+0xd0>
        f_close(&file);
 8000346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800034a:	4618      	mov	r0, r3
 800034c:	f006 fd92 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 8000350:	2301      	movs	r3, #1
 8000352:	e1ab      	b.n	80006ac <playWavFile+0x428>
    }

//    uint32_t fileSize = 8 + (header[4] | (header[5] << 8) | (header[6] << 16) | (header[7] << 24));
    uint32_t headerSizeLeft = header[16] | (header[17] << 8) | (header[18] << 16) | (header[19] << 24);
 8000354:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000358:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800035c:	7c1b      	ldrb	r3, [r3, #16]
 800035e:	461a      	mov	r2, r3
 8000360:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000364:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000368:	7c5b      	ldrb	r3, [r3, #17]
 800036a:	021b      	lsls	r3, r3, #8
 800036c:	431a      	orrs	r2, r3
 800036e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000372:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000376:	7c9b      	ldrb	r3, [r3, #18]
 8000378:	041b      	lsls	r3, r3, #16
 800037a:	431a      	orrs	r2, r3
 800037c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000380:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000384:	7cdb      	ldrb	r3, [r3, #19]
 8000386:	061b      	lsls	r3, r3, #24
 8000388:	4313      	orrs	r3, r2
 800038a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    uint16_t compression = header[20] | (header[21] << 8);
 800038e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000392:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000396:	7d1b      	ldrb	r3, [r3, #20]
 8000398:	b21a      	sxth	r2, r3
 800039a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800039e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003a2:	7d5b      	ldrb	r3, [r3, #21]
 80003a4:	021b      	lsls	r3, r3, #8
 80003a6:	b21b      	sxth	r3, r3
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
    uint16_t channelsNum = header[22] | (header[23] << 8);
 80003b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003b4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003b8:	7d9b      	ldrb	r3, [r3, #22]
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003c0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003c4:	7ddb      	ldrb	r3, [r3, #23]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	b21b      	sxth	r3, r3
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b21b      	sxth	r3, r3
 80003ce:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
    uint32_t sampleRate = header[24] | (header[25] << 8) | (header[26] << 16) | (header[27] << 24);
 80003d2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003d6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003da:	7e1b      	ldrb	r3, [r3, #24]
 80003dc:	461a      	mov	r2, r3
 80003de:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003e2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003e6:	7e5b      	ldrb	r3, [r3, #25]
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	431a      	orrs	r2, r3
 80003ec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003f0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003f4:	7e9b      	ldrb	r3, [r3, #26]
 80003f6:	041b      	lsls	r3, r3, #16
 80003f8:	431a      	orrs	r2, r3
 80003fa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003fe:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000402:	7edb      	ldrb	r3, [r3, #27]
 8000404:	061b      	lsls	r3, r3, #24
 8000406:	4313      	orrs	r3, r2
 8000408:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    uint32_t bytesPerSecond = header[28] | (header[29] << 8) | (header[30] << 16) | (header[31] << 24);
 800040c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000410:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000414:	7f1b      	ldrb	r3, [r3, #28]
 8000416:	461a      	mov	r2, r3
 8000418:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800041c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000420:	7f5b      	ldrb	r3, [r3, #29]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	431a      	orrs	r2, r3
 8000426:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800042a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800042e:	7f9b      	ldrb	r3, [r3, #30]
 8000430:	041b      	lsls	r3, r3, #16
 8000432:	431a      	orrs	r2, r3
 8000434:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000438:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800043c:	7fdb      	ldrb	r3, [r3, #31]
 800043e:	061b      	lsls	r3, r3, #24
 8000440:	4313      	orrs	r3, r2
 8000442:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
    uint16_t bytesPerSample = header[32] | (header[33] << 8);
 8000446:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800044a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800044e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000452:	b21a      	sxth	r2, r3
 8000454:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000458:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800045c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000460:	021b      	lsls	r3, r3, #8
 8000462:	b21b      	sxth	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b21b      	sxth	r3, r3
 8000468:	f8a7 326e 	strh.w	r3, [r7, #622]	; 0x26e
    uint16_t bitsPerSamplePerChannel = header[34] | (header[35] << 8);
 800046c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000470:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000474:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000478:	b21a      	sxth	r2, r3
 800047a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800047e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000482:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000486:	021b      	lsls	r3, r3, #8
 8000488:	b21b      	sxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b21b      	sxth	r3, r3
 800048e:	f8a7 326c 	strh.w	r3, [r7, #620]	; 0x26c
    uint32_t dataSize = header[40] | (header[41] << 8) | (header[42] << 16) | (header[43] << 24);
 8000492:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000496:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800049a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800049e:	461a      	mov	r2, r3
 80004a0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004a4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80004a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80004ac:	021b      	lsls	r3, r3, #8
 80004ae:	431a      	orrs	r2, r3
 80004b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004b4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80004b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80004bc:	041b      	lsls	r3, r3, #16
 80004be:	431a      	orrs	r2, r3
 80004c0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004c4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80004c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	4313      	orrs	r3, r2
 80004d0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
//        "Data size: %ld\r\n"
//        "------------------\r\n",
//        fileSize, headerSizeLeft, compression, channelsNum, sampleRate, bytesPerSecond, bytesPerSample,
//        bitsPerSamplePerChannel, dataSize);

    if(headerSizeLeft != 16) {
 80004d4:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80004d8:	2b10      	cmp	r3, #16
 80004da:	d006      	beq.n	80004ea <playWavFile+0x266>
        //UART_Printf("Wrong `headerSizeLeft` value, 16 expected\r\n");
        f_close(&file);
 80004dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004e0:	4618      	mov	r0, r3
 80004e2:	f006 fcc7 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e0e0      	b.n	80006ac <playWavFile+0x428>
    }

    if(compression != 1) {
 80004ea:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d006      	beq.n	8000500 <playWavFile+0x27c>
        //UART_Printf("Wrong `compression` value, 1 expected\r\n");
        f_close(&file);
 80004f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 fcbc 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e0d5      	b.n	80006ac <playWavFile+0x428>
    }

    if(channelsNum != 2) {
 8000500:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 8000504:	2b02      	cmp	r3, #2
 8000506:	d006      	beq.n	8000516 <playWavFile+0x292>
        //UART_Printf("Wrong `channelsNum` value, 2 expected\r\n");
        f_close(&file);
 8000508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800050c:	4618      	mov	r0, r3
 800050e:	f006 fcb1 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 8000512:	2301      	movs	r3, #1
 8000514:	e0ca      	b.n	80006ac <playWavFile+0x428>
    }

    if((sampleRate != 44100) || (bytesPerSample != 4) || (bitsPerSamplePerChannel != 16) || (bytesPerSecond != 44100*2*2)
 8000516:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800051a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800051e:	4293      	cmp	r3, r2
 8000520:	d111      	bne.n	8000546 <playWavFile+0x2c2>
 8000522:	f8b7 326e 	ldrh.w	r3, [r7, #622]	; 0x26e
 8000526:	2b04      	cmp	r3, #4
 8000528:	d10d      	bne.n	8000546 <playWavFile+0x2c2>
 800052a:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 800052e:	2b10      	cmp	r3, #16
 8000530:	d109      	bne.n	8000546 <playWavFile+0x2c2>
 8000532:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8000536:	4a39      	ldr	r2, [pc, #228]	; (800061c <playWavFile+0x398>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d104      	bne.n	8000546 <playWavFile+0x2c2>
       || (dataSize < sizeof(signal_buff1) + sizeof(signal_buff2))) {
 800053c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000544:	d206      	bcs.n	8000554 <playWavFile+0x2d0>
        //UART_Printf("Wrong file format, 16 bit file with sample rate 44100 expected\r\n");
        f_close(&file);
 8000546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fc92 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 8000550:	2301      	movs	r3, #1
 8000552:	e0ab      	b.n	80006ac <playWavFile+0x428>
    }

    res = f_read(&file, (uint8_t*)signal_buff1, sizeof(signal_buff1), &bytesRead);
 8000554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000558:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800055c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000560:	492f      	ldr	r1, [pc, #188]	; (8000620 <playWavFile+0x39c>)
 8000562:	f006 fa62 	bl	8006a2a <f_read>
 8000566:	4603      	mov	r3, r0
 8000568:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 800056c:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <playWavFile+0x2fe>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 8000574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000578:	4618      	mov	r0, r3
 800057a:	f006 fc7b 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 800057e:	2301      	movs	r3, #1
 8000580:	e094      	b.n	80006ac <playWavFile+0x428>
    }

    res = f_read(&file, (uint8_t*)signal_buff2, sizeof(signal_buff2), &bytesRead);
 8000582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000586:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800058a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058e:	4925      	ldr	r1, [pc, #148]	; (8000624 <playWavFile+0x3a0>)
 8000590:	f006 fa4b 	bl	8006a2a <f_read>
 8000594:	4603      	mov	r3, r0
 8000596:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 800059a:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <playWavFile+0x32c>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 80005a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 fc64 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e07d      	b.n	80006ac <playWavFile+0x428>
    }

    read_next_chunk = true;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <playWavFile+0x3a4>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
    end_of_file_reached = false;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <playWavFile+0x3a8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
    signal_play_buff = signal_buff1;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <playWavFile+0x3ac>)
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <playWavFile+0x39c>)
 80005c0:	601a      	str	r2, [r3, #0]
    signal_read_buff = signal_buff2;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <playWavFile+0x3b0>)
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <playWavFile+0x3a0>)
 80005c6:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef hal_res;
    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    hal_res = HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_buff1, nsamples);
 80005d0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	4911      	ldr	r1, [pc, #68]	; (8000620 <playWavFile+0x39c>)
 80005da:	4817      	ldr	r0, [pc, #92]	; (8000638 <playWavFile+0x3b4>)
 80005dc:	f001 fca4 	bl	8001f28 <HAL_I2S_Transmit_IT>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
    // hal_res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal_buff1, nsamples, 2000);
    if(hal_res != HAL_OK) {
 80005e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d047      	beq.n	800067e <playWavFile+0x3fa>
        //UART_Printf("I2S - HAL_I2S_Transmit failed, hal_res = %d!\r\n", hal_res);
        f_close(&file);
 80005ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f2:	4618      	mov	r0, r3
 80005f4:	f006 fc3e 	bl	8006e74 <f_close>
        return EXIT_FAILURE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e057      	b.n	80006ac <playWavFile+0x428>
    }

    while(dataSize >= sizeof(signal_buff1)) {
        if(!read_next_chunk) {
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <playWavFile+0x3a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f083 0301 	eor.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d017      	beq.n	800063c <playWavFile+0x3b8>
            continue;
 800060c:	e037      	b.n	800067e <playWavFile+0x3fa>
 800060e:	bf00      	nop
 8000610:	08007258 	.word	0x08007258
 8000614:	08007260 	.word	0x08007260
 8000618:	0800726c 	.word	0x0800726c
 800061c:	0002b110 	.word	0x0002b110
 8000620:	2000039c 	.word	0x2000039c
 8000624:	2000239c 	.word	0x2000239c
 8000628:	20000391 	.word	0x20000391
 800062c:	20000390 	.word	0x20000390
 8000630:	20000394 	.word	0x20000394
 8000634:	20000398 	.word	0x20000398
 8000638:	200000a0 	.word	0x200000a0
        }

        read_next_chunk = false;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <playWavFile+0x434>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]

        res = f_read(&file, (uint8_t*)signal_read_buff, sizeof(signal_buff1), &bytesRead);
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <playWavFile+0x438>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800064a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800064e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000652:	f006 f9ea 	bl	8006a2a <f_read>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
        if(res != FR_OK) {
 800065c:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000660:	2b00      	cmp	r3, #0
 8000662:	d006      	beq.n	8000672 <playWavFile+0x3ee>
            //UART_Printf("f_read() failed, res = %d\r\n", res);
            f_close(&file);
 8000664:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000668:	4618      	mov	r0, r3
 800066a:	f006 fc03 	bl	8006e74 <f_close>
            return EXIT_FAILURE;
 800066e:	2301      	movs	r3, #1
 8000670:	e01c      	b.n	80006ac <playWavFile+0x428>
        }

        dataSize -= sizeof(signal_buff1);
 8000672:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000676:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800067a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
    while(dataSize >= sizeof(signal_buff1)) {
 800067e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	d2b9      	bcs.n	80005fc <playWavFile+0x378>
    }

    end_of_file_reached = true;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <playWavFile+0x43c>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]

    res = f_close(&file);
 800068e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fbee 	bl	8006e74 <f_close>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 800069e:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <playWavFile+0x426>
        //UART_Printf("f_close() failed, res = %d\r\n", res);
        return EXIT_FAILURE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <playWavFile+0x428>
    }

    return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	f507 7722 	add.w	r7, r7, #648	; 0x288
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000391 	.word	0x20000391
 80006bc:	20000398 	.word	0x20000398
 80006c0:	20000390 	.word	0x20000390

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fcab 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f873 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f957 	bl	8000984 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80006d6:	f000 f935 	bl	8000944 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80006da:	f003 ffa7 	bl	800462c <MX_FATFS_Init>
  MX_I2S2_Init();
 80006de:	f000 f909 	bl	80008f4 <MX_I2S2_Init>
  MX_ADC1_Init();
 80006e2:	f000 f8c9 	bl	8000878 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80006e6:	482a      	ldr	r0, [pc, #168]	; (8000790 <main+0xcc>)
 80006e8:	f000 ffa0 	bl	800162c <HAL_ADCEx_Calibration_Start>

  FRESULT res = f_mount(&fs, "XMAS-23", 1);
 80006ec:	2201      	movs	r2, #1
 80006ee:	4929      	ldr	r1, [pc, #164]	; (8000794 <main+0xd0>)
 80006f0:	4829      	ldr	r0, [pc, #164]	; (8000798 <main+0xd4>)
 80006f2:	f005 fed9 	bl	80064a8 <f_mount>
 80006f6:	4603      	mov	r3, r0
 80006f8:	72fb      	strb	r3, [r7, #11]
	 if(res != FR_OK) {
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <main+0x40>
	   return EXIT_FAILURE;
 8000700:	2301      	movs	r3, #1
 8000702:	e041      	b.n	8000788 <main+0xc4>
	 }

	// Clear any existing shift register data
	HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[0]);
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <main+0xd8>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <main+0xdc>)
 800070a:	7812      	ldrb	r2, [r2, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	4825      	ldr	r0, [pc, #148]	; (80007a4 <main+0xe0>)
 8000710:	f001 faf3 	bl	8001cfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[1]);
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <main+0xd8>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <main+0xdc>)
 800071a:	7852      	ldrb	r2, [r2, #1]
 800071c:	4619      	mov	r1, r3
 800071e:	4821      	ldr	r0, [pc, #132]	; (80007a4 <main+0xe0>)
 8000720:	f001 faeb 	bl	8001cfa <HAL_GPIO_WritePin>

	// Store cleared data and Enable output
	HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[1]);
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <main+0xe4>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <main+0xdc>)
 800072a:	7852      	ldrb	r2, [r2, #1]
 800072c:	4619      	mov	r1, r3
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <main+0xe0>)
 8000730:	f001 fae3 	bl	8001cfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[0]);
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <main+0xe4>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <main+0xdc>)
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <main+0xe0>)
 8000740:	f001 fadb 	bl	8001cfa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, shiftOutputEnable, GPIOPinSet[0]);
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0xe8>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <main+0xdc>)
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4815      	ldr	r0, [pc, #84]	; (80007a4 <main+0xe0>)
 8000750:	f001 fad3 	bl	8001cfa <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (int i = 0; i < 10; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e012      	b.n	8000780 <main+0xbc>
		  char *currFile = fileNames[i];
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <main+0xec>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	607b      	str	r3, [r7, #4]
		playWavFile(currFile);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd8d 	bl	8000284 <playWavFile>
		  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <main+0xf0>)
 800076c:	f001 faf6 	bl	8001d5c <HAL_I2S_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <main+0xb6>
		   {
			 Error_Handler();
 8000776:	f000 fab9 	bl	8000cec <Error_Handler>
	  for (int i = 0; i < 10; i++) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b09      	cmp	r3, #9
 8000784:	dde9      	ble.n	800075a <main+0x96>
 8000786:	e7e5      	b.n	8000754 <main+0x90>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000070 	.word	0x20000070
 8000794:	08007274 	.word	0x08007274
 8000798:	20000160 	.word	0x20000160
 800079c:	20000004 	.word	0x20000004
 80007a0:	2000001c 	.word	0x2000001c
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000002 	.word	0x20000002
 80007b0:	20000020 	.word	0x20000020
 80007b4:	200000a0 	.word	0x200000a0

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b096      	sub	sp, #88	; 0x58
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c2:	2228      	movs	r2, #40	; 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 fcf8 	bl	80071bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000808:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fcd0 	bl	80021b8 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800081e:	f000 fa65 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f001 ff3c 	bl	80026bc <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800084a:	f000 fa4f 	bl	8000cec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2S2;
 800084e:	2306      	movs	r3, #6
 8000850:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000856:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f002 f8a8 	bl	80029b4 <HAL_RCCEx_PeriphCLKConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800086a:	f000 fa3f 	bl	8000cec <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3758      	adds	r7, #88	; 0x58
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_ADC1_Init+0x74>)
 800088a:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <MX_ADC1_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0x74>)
 80008a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_ADC1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x74>)
 80008b6:	f000 fc3b 	bl	8001130 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 fa14 	bl	8000cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x74>)
 80008d6:	f000 fd15 	bl	8001304 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008e0:	f000 fa04 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000070 	.word	0x20000070
 80008f0:	40012400 	.word	0x40012400

080008f4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_I2S2_Init+0x48>)
 80008fa:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_I2S2_Init+0x4c>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2S2_Init+0x48>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_I2S2_Init+0x48>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_I2S2_Init+0x48>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_I2S2_Init+0x48>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_I2S2_Init+0x48>)
 800091a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800091e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_I2S2_Init+0x48>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2S2_Init+0x48>)
 8000928:	f001 fa18 	bl	8001d5c <HAL_I2S_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000932:	f000 f9db 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000a0 	.word	0x200000a0
 8000940:	40003800 	.word	0x40003800

08000944 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SDIO_SD_Init+0x38>)
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <MX_SDIO_SD_Init+0x3c>)
 800094c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_SDIO_SD_Init+0x38>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SDIO_SD_Init+0x38>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_SDIO_SD_Init+0x38>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SDIO_SD_Init+0x38>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <MX_SDIO_SD_Init+0x38>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <MX_SDIO_SD_Init+0x38>)
 800096e:	2204      	movs	r2, #4
 8000970:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200000dc 	.word	0x200000dc
 8000980:	40018000 	.word	0x40018000

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b5f      	ldr	r3, [pc, #380]	; (8000b18 <MX_GPIO_Init+0x194>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a5e      	ldr	r2, [pc, #376]	; (8000b18 <MX_GPIO_Init+0x194>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b5c      	ldr	r3, [pc, #368]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a58      	ldr	r2, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b56      	ldr	r3, [pc, #344]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b53      	ldr	r3, [pc, #332]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a52      	ldr	r2, [pc, #328]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b50      	ldr	r3, [pc, #320]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x194>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2S_AMP_SD_GPIO_Port, I2S_AMP_SD_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2104      	movs	r1, #4
 80009fc:	4847      	ldr	r0, [pc, #284]	; (8000b1c <MX_GPIO_Init+0x198>)
 80009fe:	f001 f97c 	bl	8001cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2120      	movs	r1, #32
 8000a06:	4846      	ldr	r0, [pc, #280]	; (8000b20 <MX_GPIO_Init+0x19c>)
 8000a08:	f001 f977 	bl	8001cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFT_OE_Pin|SHIFT_DATA_OUT_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f640 4107 	movw	r1, #3079	; 0xc07
 8000a12:	4844      	ldr	r0, [pc, #272]	; (8000b24 <MX_GPIO_Init+0x1a0>)
 8000a14:	f001 f971 	bl	8001cfa <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : I2S_AMP_SD_Pin */
  GPIO_InitStruct.Pin = I2S_AMP_SD_Pin;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S_AMP_SD_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	483b      	ldr	r0, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x198>)
 8000a30:	f000 ffb8 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin;
 8000a34:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x1a4>)
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	4834      	ldr	r0, [pc, #208]	; (8000b1c <MX_GPIO_Init+0x198>)
 8000a4a:	f000 ffab 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8000a4e:	2310      	movs	r3, #16
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_GPIO_Init+0x1a4>)
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482f      	ldr	r0, [pc, #188]	; (8000b20 <MX_GPIO_Init+0x19c>)
 8000a62:	f000 ff9f 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 8000a66:	2320      	movs	r3, #32
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4828      	ldr	r0, [pc, #160]	; (8000b20 <MX_GPIO_Init+0x19c>)
 8000a7e:	f000 ff91 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFT_OE_Pin SHIFT_DATA_OUT_Pin SHIFT_DATA_CLK_Pin SHIFT_STORE_CLK_Pin
                           SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SHIFT_OE_Pin|SHIFT_DATA_OUT_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 8000a82:	f640 4307 	movw	r3, #3079	; 0xc07
 8000a86:	613b      	str	r3, [r7, #16]
                          |SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <MX_GPIO_Init+0x1a0>)
 8000a9c:	f000 ff82 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481b      	ldr	r0, [pc, #108]	; (8000b20 <MX_GPIO_Init+0x19c>)
 8000ab4:	f000 ff76 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_10_Pin BUTTON_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_10_Pin|BUTTON_8_Pin;
 8000ab8:	2328      	movs	r3, #40	; 0x28
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_GPIO_Init+0x1a4>)
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4816      	ldr	r0, [pc, #88]	; (8000b24 <MX_GPIO_Init+0x1a0>)
 8000acc:	f000 ff6a 	bl	80019a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2009      	movs	r0, #9
 8000ad6:	f000 ff2e 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ada:	2009      	movs	r0, #9
 8000adc:	f000 ff47 	bl	800196e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f000 ff26 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 ff3f 	bl	800196e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2017      	movs	r0, #23
 8000af6:	f000 ff1e 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000afa:	2017      	movs	r0, #23
 8000afc:	f000 ff37 	bl	800196e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2028      	movs	r0, #40	; 0x28
 8000b06:	f000 ff16 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0a:	2028      	movs	r0, #40	; 0x28
 8000b0c:	f000 ff2f 	bl	800196e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	10110000 	.word	0x10110000

08000b2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	80fb      	strh	r3, [r7, #6]

	int i = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]

	if(GPIO_Pin == buttonIn_1) {
 8000b3a:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d10c      	bne.n	8000b5e <HAL_GPIO_EXTI_Callback+0x32>
		playWavFile("yard.wav");
 8000b44:	4855      	ldr	r0, [pc, #340]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x170>)
 8000b46:	f7ff fb9d 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b4a:	4855      	ldr	r0, [pc, #340]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000b4c:	f001 f906 	bl	8001d5c <HAL_I2S_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 809c 	beq.w	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000b58:	f000 f8c8 	bl	8000cec <Error_Handler>
		playWavFile("rant.wav");
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
		   Error_Handler();
		}

}
 8000b5c:	e098      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_2) {
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d10c      	bne.n	8000b82 <HAL_GPIO_EXTI_Callback+0x56>
		playWavFile("shit.wav");
 8000b68:	484f      	ldr	r0, [pc, #316]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000b6a:	f7ff fb8b 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b6e:	484c      	ldr	r0, [pc, #304]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000b70:	f001 f8f4 	bl	8001d5c <HAL_I2S_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 808a 	beq.w	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000b7c:	f000 f8b6 	bl	8000cec <Error_Handler>
}
 8000b80:	e086      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_3) {
 8000b82:	4b4a      	ldr	r3, [pc, #296]	; (8000cac <HAL_GPIO_EXTI_Callback+0x180>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d10b      	bne.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x78>
		playWavFile("gift.wav");
 8000b8c:	4848      	ldr	r0, [pc, #288]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x184>)
 8000b8e:	f7ff fb79 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b92:	4843      	ldr	r0, [pc, #268]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000b94:	f001 f8e2 	bl	8001d5c <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d078      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000b9e:	f000 f8a5 	bl	8000cec <Error_Handler>
}
 8000ba2:	e075      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_4) {
 8000ba4:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x188>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	88fa      	ldrh	r2, [r7, #6]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d10b      	bne.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x9a>
		playWavFile("nut.wav");
 8000bae:	4842      	ldr	r0, [pc, #264]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x18c>)
 8000bb0:	f7ff fb68 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bb4:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bb6:	f001 f8d1 	bl	8001d5c <HAL_I2S_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d067      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000bc0:	f000 f894 	bl	8000cec <Error_Handler>
}
 8000bc4:	e064      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_5) {
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x190>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d10b      	bne.n	8000be8 <HAL_GPIO_EXTI_Callback+0xbc>
		playWavFile("grace.wav");
 8000bd0:	483b      	ldr	r0, [pc, #236]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x194>)
 8000bd2:	f7ff fb57 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bd6:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bd8:	f001 f8c0 	bl	8001d5c <HAL_I2S_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d056      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000be2:	f000 f883 	bl	8000cec <Error_Handler>
}
 8000be6:	e053      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_6) {
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x198>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	88fa      	ldrh	r2, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d10b      	bne.n	8000c0a <HAL_GPIO_EXTI_Callback+0xde>
		playWavFile("dump.wav");
 8000bf2:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000bf4:	f7ff fb46 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000bfa:	f001 f8af 	bl	8001d5c <HAL_I2S_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d045      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000c04:	f000 f872 	bl	8000cec <Error_Handler>
}
 8000c08:	e042      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_7) {
 8000c0a:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d10b      	bne.n	8000c2c <HAL_GPIO_EXTI_Callback+0x100>
		playWavFile("treeBig.wav");
 8000c14:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000c16:	f7ff fb35 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c1a:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c1c:	f001 f89e 	bl	8001d5c <HAL_I2S_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d034      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000c26:	f000 f861 	bl	8000cec <Error_Handler>
}
 8000c2a:	e031      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_8) {
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	88fa      	ldrh	r2, [r7, #6]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d10b      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0x122>
		playWavFile("kma.wav");
 8000c36:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c38:	f7ff fb24 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c3c:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c3e:	f001 f88d 	bl	8001d5c <HAL_I2S_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d023      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000c48:	f000 f850 	bl	8000cec <Error_Handler>
}
 8000c4c:	e020      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_9) {
 8000c4e:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	88fa      	ldrh	r2, [r7, #6]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d10b      	bne.n	8000c70 <HAL_GPIO_EXTI_Callback+0x144>
		playWavFile("winterMorn.wav");
 8000c58:	4821      	ldr	r0, [pc, #132]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000c5a:	f7ff fb13 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c60:	f001 f87c 	bl	8001d5c <HAL_I2S_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d012      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000c6a:	f000 f83f 	bl	8000cec <Error_Handler>
}
 8000c6e:	e00f      	b.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
	else if(GPIO_Pin == buttonIn_10) {
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	88fa      	ldrh	r2, [r7, #6]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d10a      	bne.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		playWavFile("rant.wav");
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000c7c:	f7ff fb02 	bl	8000284 <playWavFile>
	    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x174>)
 8000c82:	f001 f86b 	bl	8001d5c <HAL_I2S_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x164>
		   Error_Handler();
 8000c8c:	f000 f82e 	bl	8000cec <Error_Handler>
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000006 	.word	0x20000006
 8000c9c:	080071e4 	.word	0x080071e4
 8000ca0:	200000a0 	.word	0x200000a0
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	080071f0 	.word	0x080071f0
 8000cac:	2000000a 	.word	0x2000000a
 8000cb0:	080071fc 	.word	0x080071fc
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	08007208 	.word	0x08007208
 8000cbc:	2000000e 	.word	0x2000000e
 8000cc0:	08007210 	.word	0x08007210
 8000cc4:	20000010 	.word	0x20000010
 8000cc8:	0800721c 	.word	0x0800721c
 8000ccc:	20000012 	.word	0x20000012
 8000cd0:	08007228 	.word	0x08007228
 8000cd4:	20000014 	.word	0x20000014
 8000cd8:	08007234 	.word	0x08007234
 8000cdc:	20000016 	.word	0x20000016
 8000ce0:	0800723c 	.word	0x0800723c
 8000ce4:	20000018 	.word	0x20000018
 8000ce8:	0800724c 	.word	0x0800724c

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x8>
	...

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_MspInit+0x5c>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_MspInit+0x5c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x5c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x5c>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_MspInit+0x60>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_MspInit+0x60>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <HAL_ADC_MspInit+0x6c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d121      	bne.n	8000dc0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <HAL_ADC_MspInit+0x70>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_ADC_MspInit+0x70>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dac:	2302      	movs	r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_ADC_MspInit+0x74>)
 8000dbc:	f000 fdf2 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40012400 	.word	0x40012400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_I2S_MspInit+0x84>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d12c      	bne.n	8000e4e <HAL_I2S_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_I2S_MspInit+0x88>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_I2S_MspInit+0x88>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	61d3      	str	r3, [r2, #28]
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_I2S_MspInit+0x88>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_I2S_MspInit+0x88>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <HAL_I2S_MspInit+0x88>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_I2S_MspInit+0x88>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e24:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_I2S_MspInit+0x8c>)
 8000e3a:	f000 fdb3 	bl	80019a4 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2024      	movs	r0, #36	; 0x24
 8000e44:	f000 fd77 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e48:	2024      	movs	r0, #36	; 0x24
 8000e4a:	f000 fd90 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40003800 	.word	0x40003800
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010c00 	.word	0x40010c00

08000e64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <HAL_SD_MspInit+0xa4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d13c      	bne.n	8000efe <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6153      	str	r3, [r2, #20]
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_SD_MspInit+0xa8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000ecc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <HAL_SD_MspInit+0xac>)
 8000ee2:	f000 fd5f 	bl	80019a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <HAL_SD_MspInit+0xb0>)
 8000efa:	f000 fd53 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	; 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40018000 	.word	0x40018000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40011400 	.word	0x40011400

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f000 f8a7 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_10_Pin);
 8000f6a:	2008      	movs	r0, #8
 8000f6c:	f000 fede 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f000 fed7 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_8_Pin);
 8000f86:	2020      	movs	r0, #32
 8000f88:	f000 fed0 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8000f8c:	2080      	movs	r0, #128	; 0x80
 8000f8e:	f000 fecd 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 8000f92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f96:	f000 fec9 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8000f9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f9e:	f000 fec5 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <SPI2_IRQHandler+0x10>)
 8000fae:	f001 f82b 	bl	8002008 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000a0 	.word	0x200000a0

08000fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_5_Pin);
 8000fc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fc4:	f000 feb2 	bl	8001d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd8:	f7ff fff8 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fde:	490c      	ldr	r1, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ff4:	4c09      	ldr	r4, [pc, #36]	; (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f006 f8a7 	bl	8007154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001006:	f7ff fb5d 	bl	80006c4 <main>
  bx lr
 800100a:	4770      	bx	lr
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001014:	0800739c 	.word	0x0800739c
  ldr r2, =_sbss
 8001018:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800101c:	200043d4 	.word	0x200043d4

08001020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x28>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 fc73 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	200f      	movs	r0, #15
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fe5a 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fc8b 	bl	800198a <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 fc53 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000048 	.word	0x20000048
 80010a8:	20000050 	.word	0x20000050
 80010ac:	2000004c 	.word	0x2000004c

080010b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x1c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x20>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_IncTick+0x20>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000050 	.word	0x20000050
 80010d0:	2000439c 	.word	0x2000439c

080010d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <HAL_GetTick+0x10>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	2000439c 	.word	0x2000439c

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff fff0 	bl	80010d4 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffe0 	bl	80010d4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000050 	.word	0x20000050

08001130 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0ce      	b.n	80012f0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fdf4 	bl	8000d5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fa17 	bl	80015a8 <ADC_ConversionStop_Disable>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 80a9 	bne.w	80012de <HAL_ADC_Init+0x1ae>
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 80a5 	bne.w	80012de <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119c:	f023 0302 	bic.w	r3, r3, #2
 80011a0:	f043 0202 	orr.w	r2, r3, #2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4951      	ldr	r1, [pc, #324]	; (80012f8 <HAL_ADC_Init+0x1c8>)
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d10a      	bne.n	80011cc <HAL_ADC_Init+0x9c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011be:	d002      	beq.n	80011c6 <HAL_ADC_Init+0x96>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	e004      	b.n	80011d0 <HAL_ADC_Init+0xa0>
 80011c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011ca:	e001      	b.n	80011d0 <HAL_ADC_Init+0xa0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7b1b      	ldrb	r3, [r3, #12]
 80011d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	4313      	orrs	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e8:	d003      	beq.n	80011f2 <HAL_ADC_Init+0xc2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <HAL_ADC_Init+0xc8>
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	e000      	b.n	80011fa <HAL_ADC_Init+0xca>
 80011f8:	2300      	movs	r3, #0
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7d1b      	ldrb	r3, [r3, #20]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d119      	bne.n	800123c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7b1b      	ldrb	r3, [r3, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d109      	bne.n	8001224 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	3b01      	subs	r3, #1
 8001216:	035a      	lsls	r2, r3, #13
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	e00b      	b.n	800123c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	f043 0220 	orr.w	r2, r3, #32
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	f043 0201 	orr.w	r2, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_ADC_Init+0x1cc>)
 8001258:	4013      	ands	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	430b      	orrs	r3, r1
 8001262:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126c:	d003      	beq.n	8001276 <HAL_ADC_Init+0x146>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d104      	bne.n	8001280 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	3b01      	subs	r3, #1
 800127c:	051b      	lsls	r3, r3, #20
 800127e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	430a      	orrs	r2, r1
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_ADC_Init+0x1d0>)
 800129c:	4013      	ands	r3, r2
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d10b      	bne.n	80012bc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f023 0303 	bic.w	r3, r3, #3
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ba:	e018      	b.n	80012ee <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f023 0312 	bic.w	r3, r3, #18
 80012c4:	f043 0210 	orr.w	r2, r3, #16
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012dc:	e007      	b.n	80012ee <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f043 0210 	orr.w	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013c00 	.word	0x40013c00
 80012fc:	ffe1f7fd 	.word	0xffe1f7fd
 8001300:	ff1f0efe 	.word	0xff1f0efe

08001304 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x20>
 8001320:	2302      	movs	r3, #2
 8001322:	e0dc      	b.n	80014de <HAL_ADC_ConfigChannel+0x1da>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b06      	cmp	r3, #6
 8001332:	d81c      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b05      	subs	r3, #5
 8001346:	221f      	movs	r2, #31
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b05      	subs	r3, #5
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
 800136c:	e03c      	b.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b0c      	cmp	r3, #12
 8001374:	d81c      	bhi.n	80013b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b23      	subs	r3, #35	; 0x23
 8001388:	221f      	movs	r2, #31
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	4019      	ands	r1, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	3b23      	subs	r3, #35	; 0x23
 80013a2:	fa00 f203 	lsl.w	r2, r0, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
 80013ae:	e01b      	b.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b41      	subs	r3, #65	; 0x41
 80013c2:	221f      	movs	r2, #31
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b41      	subs	r3, #65	; 0x41
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d91c      	bls.n	800142a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	3b1e      	subs	r3, #30
 8001402:	2207      	movs	r2, #7
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	4019      	ands	r1, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	3b1e      	subs	r3, #30
 800141c:	fa00 f203 	lsl.w	r2, r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	e019      	b.n	800145e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6919      	ldr	r1, [r3, #16]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b10      	cmp	r3, #16
 8001464:	d003      	beq.n	800146e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800146a:	2b11      	cmp	r3, #17
 800146c:	d132      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d125      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d126      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001494:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d11a      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_ADC_ConfigChannel+0x1e8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9a      	lsrs	r2, r3, #18
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b4:	e002      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x1b2>
 80014c2:	e007      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40012400 	.word	0x40012400
 80014ec:	20000048 	.word	0x20000048
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d040      	beq.n	8001594 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <ADC_Enable+0xac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <ADC_Enable+0xb0>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001530:	e002      	b.n	8001538 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800153e:	f7ff fdc9 	bl	80010d4 <HAL_GetTick>
 8001542:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001544:	e01f      	b.n	8001586 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001546:	f7ff fdc5 	bl	80010d4 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d918      	bls.n	8001586 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d011      	beq.n	8001586 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e007      	b.n	8001596 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d1d8      	bne.n	8001546 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000048 	.word	0x20000048
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d12e      	bne.n	8001620 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015d2:	f7ff fd7f 	bl	80010d4 <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d8:	e01b      	b.n	8001612 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015da:	f7ff fd7b 	bl	80010d4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d914      	bls.n	8001612 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10d      	bne.n	8001612 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e007      	b.n	8001622 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d0dc      	beq.n	80015da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_ADCEx_Calibration_Start+0x1e>
 8001646:	2302      	movs	r3, #2
 8001648:	e097      	b.n	800177a <HAL_ADCEx_Calibration_Start+0x14e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa8 	bl	80015a8 <ADC_ConversionStop_Disable>
 8001658:	4603      	mov	r3, r0
 800165a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff49 	bl	80014f4 <ADC_Enable>
 8001662:	4603      	mov	r3, r0
 8001664:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 8081 	bne.w	8001770 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001676:	f023 0302 	bic.w	r3, r3, #2
 800167a:	f043 0202 	orr.w	r2, r3, #2
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001682:	4b40      	ldr	r3, [pc, #256]	; (8001784 <HAL_ADCEx_Calibration_Start+0x158>)
 8001684:	681c      	ldr	r4, [r3, #0]
 8001686:	2002      	movs	r0, #2
 8001688:	f001 fa4a 	bl	8002b20 <HAL_RCCEx_GetPeriphCLKFreq>
 800168c:	4603      	mov	r3, r0
 800168e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001692:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001694:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001696:	e002      	b.n	800169e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3b01      	subs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0208 	orr.w	r2, r2, #8
 80016b2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016b4:	f7ff fd0e 	bl	80010d4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016ba:	e01b      	b.n	80016f4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016bc:	f7ff fd0a 	bl	80010d4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d914      	bls.n	80016f4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00d      	beq.n	80016f4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f023 0312 	bic.w	r3, r3, #18
 80016e0:	f043 0210 	orr.w	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e042      	b.n	800177a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1dc      	bne.n	80016bc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0204 	orr.w	r2, r2, #4
 8001710:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001712:	f7ff fcdf 	bl	80010d4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001718:	e01b      	b.n	8001752 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800171a:	f7ff fcdb 	bl	80010d4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d914      	bls.n	8001752 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f023 0312 	bic.w	r3, r3, #18
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e013      	b.n	800177a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1dc      	bne.n	800171a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f023 0303 	bic.w	r3, r3, #3
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001778:	7dfb      	ldrb	r3, [r7, #23]
}
 800177a:	4618      	mov	r0, r3
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}
 8001782:	bf00      	nop
 8001784:	20000048 	.word	0x20000048

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4906      	ldr	r1, [pc, #24]	; (8001820 <__NVIC_EnableIRQ+0x34>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff90 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff2d 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff42 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff90 	bl	8001878 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5f 	bl	8001824 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff35 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b08b      	sub	sp, #44	; 0x2c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e179      	b.n	8001cac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b8:	2201      	movs	r2, #1
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8168 	bne.w	8001ca6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a96      	ldr	r2, [pc, #600]	; (8001c34 <HAL_GPIO_Init+0x290>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d05e      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019e0:	4a94      	ldr	r2, [pc, #592]	; (8001c34 <HAL_GPIO_Init+0x290>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d875      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019e6:	4a94      	ldr	r2, [pc, #592]	; (8001c38 <HAL_GPIO_Init+0x294>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d058      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019ec:	4a92      	ldr	r2, [pc, #584]	; (8001c38 <HAL_GPIO_Init+0x294>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d86f      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019f2:	4a92      	ldr	r2, [pc, #584]	; (8001c3c <HAL_GPIO_Init+0x298>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d052      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019f8:	4a90      	ldr	r2, [pc, #576]	; (8001c3c <HAL_GPIO_Init+0x298>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d869      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019fe:	4a90      	ldr	r2, [pc, #576]	; (8001c40 <HAL_GPIO_Init+0x29c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d04c      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a04:	4a8e      	ldr	r2, [pc, #568]	; (8001c40 <HAL_GPIO_Init+0x29c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d863      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a0a:	4a8e      	ldr	r2, [pc, #568]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d046      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a10:	4a8c      	ldr	r2, [pc, #560]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d85d      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d82a      	bhi.n	8001a70 <HAL_GPIO_Init+0xcc>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d859      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_GPIO_Init+0x80>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a79 	.word	0x08001a79
 8001a2c:	08001a8b 	.word	0x08001a8b
 8001a30:	08001acd 	.word	0x08001acd
 8001a34:	08001ad3 	.word	0x08001ad3
 8001a38:	08001ad3 	.word	0x08001ad3
 8001a3c:	08001ad3 	.word	0x08001ad3
 8001a40:	08001ad3 	.word	0x08001ad3
 8001a44:	08001ad3 	.word	0x08001ad3
 8001a48:	08001ad3 	.word	0x08001ad3
 8001a4c:	08001ad3 	.word	0x08001ad3
 8001a50:	08001ad3 	.word	0x08001ad3
 8001a54:	08001ad3 	.word	0x08001ad3
 8001a58:	08001ad3 	.word	0x08001ad3
 8001a5c:	08001ad3 	.word	0x08001ad3
 8001a60:	08001ad3 	.word	0x08001ad3
 8001a64:	08001ad3 	.word	0x08001ad3
 8001a68:	08001a81 	.word	0x08001a81
 8001a6c:	08001a95 	.word	0x08001a95
 8001a70:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a76:	e02c      	b.n	8001ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e029      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	3304      	adds	r3, #4
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e024      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	3308      	adds	r3, #8
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e01f      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e01a      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e013      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	611a      	str	r2, [r3, #16]
          break;
 8001abe:	e009      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	615a      	str	r2, [r3, #20]
          break;
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          break;
 8001ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d801      	bhi.n	8001ade <HAL_GPIO_Init+0x13a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_Init+0x13e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	; 0xff
 8001ae8:	d802      	bhi.n	8001af0 <HAL_GPIO_Init+0x14c>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x152>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3b08      	subs	r3, #8
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	210f      	movs	r1, #15
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80c1 	beq.w	8001ca6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b24:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b3c:	4a44      	ldr	r2, [pc, #272]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a3c      	ldr	r2, [pc, #240]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01f      	beq.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_GPIO_Init+0x2b4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d019      	beq.n	8001ba4 <HAL_GPIO_Init+0x200>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_GPIO_Init+0x1fc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a39      	ldr	r2, [pc, #228]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1f8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <HAL_GPIO_Init+0x2c0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1f4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a37      	ldr	r2, [pc, #220]	; (8001c68 <HAL_GPIO_Init+0x2c4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1f0>
 8001b90:	2305      	movs	r3, #5
 8001b92:	e00a      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b94:	2306      	movs	r3, #6
 8001b96:	e008      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x206>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bba:	4925      	ldr	r1, [pc, #148]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4924      	ldr	r1, [pc, #144]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4920      	ldr	r1, [pc, #128]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	491a      	ldr	r1, [pc, #104]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d025      	beq.n	8001c70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4910      	ldr	r1, [pc, #64]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e025      	b.n	8001c7e <HAL_GPIO_Init+0x2da>
 8001c32:	bf00      	nop
 8001c34:	10320000 	.word	0x10320000
 8001c38:	10310000 	.word	0x10310000
 8001c3c:	10220000 	.word	0x10220000
 8001c40:	10210000 	.word	0x10210000
 8001c44:	10120000 	.word	0x10120000
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40011400 	.word	0x40011400
 8001c64:	40011800 	.word	0x40011800
 8001c68:	40011c00 	.word	0x40011c00
 8001c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <HAL_GPIO_Init+0x324>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	3301      	adds	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f47f ae7e 	bne.w	80019b8 <HAL_GPIO_Init+0x14>
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40010400 	.word	0x40010400

08001ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	460b      	mov	r3, r1
 8001d04:	807b      	strh	r3, [r7, #2]
 8001d06:	4613      	mov	r3, r2
 8001d08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0a:	787b      	ldrb	r3, [r7, #1]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d16:	e003      	b.n	8001d20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	041a      	lsls	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	611a      	str	r2, [r3, #16]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe feee 	bl	8000b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0d2      	b.n	8001f14 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff f826 	bl	8000dd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d9e:	f023 030f 	bic.w	r3, r3, #15
 8001da2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2202      	movs	r2, #2
 8001daa:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d073      	beq.n	8001e9c <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e001      	b.n	8001dc6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_I2S_Init+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d104      	bne.n	8001de8 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8001dde:	2004      	movs	r0, #4
 8001de0:	f000 fe9e 	bl	8002b20 <HAL_RCCEx_GetPeriphCLKFreq>
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	e00c      	b.n	8001e02 <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_I2S_Init+0x1c4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d104      	bne.n	8001dfc <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 8001df2:	2008      	movs	r0, #8
 8001df4:	f000 fe94 	bl	8002b20 <HAL_RCCEx_GetPeriphCLKFreq>
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	e002      	b.n	8001e02 <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 8001dfc:	f000 fd48 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8001e00:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0a:	d125      	bne.n	8001e58 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d010      	beq.n	8001e36 <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	3305      	adds	r3, #5
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e01f      	b.n	8001e76 <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	3305      	adds	r3, #5
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e00e      	b.n	8001e76 <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	461a      	mov	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	3305      	adds	r3, #5
 8001e74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <HAL_I2S_Init+0x1c8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	08db      	lsrs	r3, r3, #3
 8001e80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	e003      	b.n	8001ea4 <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d902      	bls.n	8001eb0 <HAL_I2S_Init+0x154>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	2bff      	cmp	r3, #255	; 0xff
 8001eae:	d907      	bls.n	8001ec0 <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	f043 0210 	orr.w	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e029      	b.n	8001f14 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	ea42 0103 	orr.w	r1, r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ede:	f023 030f 	bic.w	r3, r3, #15
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6851      	ldr	r1, [r2, #4]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6892      	ldr	r2, [r2, #8]
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68d2      	ldr	r2, [r2, #12]
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6992      	ldr	r2, [r2, #24]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f02:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40003800 	.word	0x40003800
 8001f20:	40003c00 	.word	0x40003c00
 8001f24:	cccccccd 	.word	0xcccccccd

08001f28 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_I2S_Transmit_IT+0x1a>
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e05b      	b.n	8001ffe <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_I2S_Transmit_IT+0x2e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e053      	b.n	8001ffe <HAL_I2S_Transmit_IT+0xd6>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d005      	beq.n	8001f76 <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	e043      	b.n	8001ffe <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d002      	beq.n	8001fa2 <HAL_I2S_Transmit_IT+0x7a>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	845a      	strh	r2, [r3, #34]	; 0x22
 8001fb6:	e005      	b.n	8001fc4 <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001fd2:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d007      	beq.n	8001ff4 <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ff2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10e      	bne.n	800204a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f889 	bl	800215a <I2S_Receive_IT>
    return;
 8002048:	e044      	b.n	80020d4 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_I2S_IRQHandler+0x62>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	09db      	lsrs	r3, r3, #7
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f84b 	bl	80020fe <I2S_Transmit_IT>
    return;
 8002068:	e034      	b.n	80020d4 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02e      	beq.n	80020d4 <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00d      	beq.n	800209e <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002090:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	f043 0202 	orr.w	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b8:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	f043 0204 	orr.w	r2, r3, #4
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f80c 	bl	80020ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	1c9a      	adds	r2, r3, #2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10e      	bne.n	8002152 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002142:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe f869 	bl	8000224 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c9a      	adds	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10e      	bne.n	80021b0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff95 	bl	80020da <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e272      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8087 	beq.w	80022e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d8:	4b92      	ldr	r3, [pc, #584]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4b8f      	ldr	r3, [pc, #572]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
 80021f0:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d10b      	bne.n	8002216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d06c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x12c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d168      	bne.n	80022e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e24c      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x76>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a7f      	ldr	r2, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a77      	ldr	r2, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0xbc>
 800225a:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xd4>
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a67      	ldr	r2, [pc, #412]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe ff1e 	bl	80010d4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe ff1a 	bl	80010d4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e200      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xe4>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff0a 	bl	80010d4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe ff06 	bl	80010d4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1ec      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x10c>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fe:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1c0      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4939      	ldr	r1, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe febf 	bl	80010d4 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe febb 	bl	80010d4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1a1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4927      	ldr	r1, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x270>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fe9e 	bl	80010d4 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fe9a 	bl	80010d4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e180      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03a      	beq.n	800243c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d019      	beq.n	8002402 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x274>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fe7e 	bl	80010d4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fe7a 	bl	80010d4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e160      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 fabc 	bl	8002978 <RCC_Delay>
 8002400:	e01c      	b.n	800243c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x274>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe fe64 	bl	80010d4 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fe60 	bl	80010d4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d908      	bls.n	8002430 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e146      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	42420000 	.word	0x42420000
 800242c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a6 	beq.w	8002596 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a87      	ldr	r2, [pc, #540]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe fe21 	bl	80010d4 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fe1d 	bl	80010d4 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e103      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b75      	ldr	r3, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x4c8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x312>
 80024bc:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6213      	str	r3, [r2, #32]
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024d2:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x356>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a60      	ldr	r2, [pc, #384]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a5d      	ldr	r2, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x36e>
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a5a      	ldr	r2, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fdd1 	bl	80010d4 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fdcd 	bl	80010d4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0b1      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x37e>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fe fdbb 	bl	80010d4 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fdb7 	bl	80010d4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e09b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d061      	beq.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d146      	bne.n	8002642 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fd8b 	bl	80010d4 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fd87 	bl	80010d4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e06d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a19      	ldr	r1, [r3, #32]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	430b      	orrs	r3, r1
 800260e:	491b      	ldr	r1, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fd5b 	bl	80010d4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fd57 	bl	80010d4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x46a>
 8002640:	e035      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fd44 	bl	80010d4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fd40 	bl	80010d4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e026      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x4c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x498>
 800266e:	e01e      	b.n	80026ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e019      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x500>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7fe fc92 	bl	80010d4 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe fc8e 	bl	80010d4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fbf0 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	080072c0 	.word	0x080072c0
 8002888:	20000048 	.word	0x20000048
 800288c:	2000004c 	.word	0x2000004c

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e027      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e027      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c5b      	lsrs	r3, r3, #17
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	00b71b00 	.word	0x00b71b00
 800292c:	080072d8 	.word	0x080072d8
 8002930:	080072e8 	.word	0x080072e8
 8002934:	003d0900 	.word	0x003d0900
 8002938:	007a1200 	.word	0x007a1200

0800293c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <HAL_RCC_GetHCLKFreq+0x10>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20000048 	.word	0x20000048

08002950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002954:	f7ff fff2 	bl	800293c <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0adb      	lsrs	r3, r3, #11
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	080072d0 	.word	0x080072d0

08002978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <RCC_Delay+0x34>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <RCC_Delay+0x38>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0a5b      	lsrs	r3, r3, #9
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002994:	bf00      	nop
  }
  while (Delay --);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f9      	bne.n	8002994 <RCC_Delay+0x1c>
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000048 	.word	0x20000048
 80029b0:	10624dd3 	.word	0x10624dd3

080029b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d07d      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a4b      	ldr	r2, [pc, #300]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d118      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a08:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a14:	f7fe fb5e 	bl	80010d4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	e008      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe fb5a 	bl	80010d4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e06d      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b3a      	ldr	r3, [pc, #232]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d02e      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d027      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a68:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a6e:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d014      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fb29 	bl	80010d4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe fb25 	bl	80010d4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e036      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4917      	ldr	r1, [pc, #92]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	490b      	ldr	r1, [pc, #44]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af6:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	42420440 	.word	0x42420440

08002b20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	f200 80ae 	bhi.w	8002ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002c23 	.word	0x08002c23
 8002b50:	08002c87 	.word	0x08002c87
 8002b54:	08002ca3 	.word	0x08002ca3
 8002b58:	08002c13 	.word	0x08002c13
 8002b5c:	08002ca3 	.word	0x08002ca3
 8002b60:	08002ca3 	.word	0x08002ca3
 8002b64:	08002ca3 	.word	0x08002ca3
 8002b68:	08002c1b 	.word	0x08002c1b
 8002b6c:	08002ca3 	.word	0x08002ca3
 8002b70:	08002ca3 	.word	0x08002ca3
 8002b74:	08002ca3 	.word	0x08002ca3
 8002b78:	08002ca3 	.word	0x08002ca3
 8002b7c:	08002ca3 	.word	0x08002ca3
 8002b80:	08002ca3 	.word	0x08002ca3
 8002b84:	08002ca3 	.word	0x08002ca3
 8002b88:	08002b8d 	.word	0x08002b8d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8083 	beq.w	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0c9b      	lsrs	r3, r3, #18
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	4a44      	ldr	r2, [pc, #272]	; (8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bb8:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0c5b      	lsrs	r3, r3, #17
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	4a3f      	ldr	r2, [pc, #252]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002bc4:	5cd3      	ldrb	r3, [r2, r3]
 8002bc6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e004      	b.n	8002bee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4a38      	ldr	r2, [pc, #224]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002c00:	e051      	b.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
      break;
 8002c10:	e049      	b.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002c12:	f7ff fe3d 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002c16:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002c18:	e048      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002c1a:	f7ff fe39 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002c1e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002c20:	e044      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c32:	d108      	bne.n	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e01e      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c50:	d109      	bne.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002c5e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	e00e      	b.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c70:	d11b      	bne.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d015      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8002c80:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002c82:	e012      	b.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8002c84:	e011      	b.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c86:	f7ff fe63 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0b9b      	lsrs	r3, r3, #14
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	61bb      	str	r3, [r7, #24]
      break;
 8002ca0:	e004      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 8002caa:	bf00      	nop
    }
  }
  return (frequency);
 8002cac:	69bb      	ldr	r3, [r7, #24]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	080072ec 	.word	0x080072ec
 8002cc0:	080072fc 	.word	0x080072fc
 8002cc4:	00b71b00 	.word	0x00b71b00
 8002cc8:	003d0900 	.word	0x003d0900
 8002ccc:	aaaaaaab 	.word	0xaaaaaaab
 8002cd0:	00016e36 	.word	0x00016e36

08002cd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e022      	b.n	8002d2c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fe f8b3 	bl	8000e64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f814 	bl	8002d34 <HAL_SD_InitCard>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00a      	b.n	8002d2c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af04      	add	r7, sp, #16
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d50:	2376      	movs	r3, #118	; 0x76
 8002d52:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681d      	ldr	r5, [r3, #0]
 8002d58:	466c      	mov	r4, sp
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 ff39 	bl	8003be4 <SDIO_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e04f      	b.n	8002e24 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_SD_InitCard+0xf8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 ff6e 	bl	8003c70 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_SD_InitCard+0xf8>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	f7fe f9a4 	bl	80010e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fe69 	bl	8003a78 <SD_PowerON>
 8002da6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02e      	b.n	8002e24 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fd87 	bl	80038da <SD_InitCard>
 8002dcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01b      	b.n	8002e24 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ffc7 	bl	8003d88 <SDMMC_CmdBlockLength>
 8002dfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_SD_InitCard+0xfc>)
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2c:	423000a0 	.word	0x423000a0
 8002e30:	004005ff 	.word	0x004005ff

08002e34 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b092      	sub	sp, #72	; 0x48
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e42:	f7fe f947 	bl	80010d4 <HAL_GetTick>
 8002e46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1bd      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	f040 81b0 	bne.w	80031d4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	441a      	add	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d907      	bls.n	8002e98 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e1a4      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d002      	beq.n	8002eb6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	025b      	lsls	r3, r3, #9
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	025b      	lsls	r3, r3, #9
 8002ec0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ec2:	2390      	movs	r3, #144	; 0x90
 8002ec4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f107 0214 	add.w	r2, r7, #20
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ff28 	bl	8003d32 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d90a      	bls.n	8002efe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2202      	movs	r2, #2
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ff8b 	bl	8003e10 <SDMMC_CmdReadMultiBlock>
 8002efa:	6478      	str	r0, [r7, #68]	; 0x44
 8002efc:	e009      	b.n	8002f12 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff5e 	bl	8003dcc <SDMMC_CmdReadSingleBlock>
 8002f10:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7a      	ldr	r2, [pc, #488]	; (8003108 <HAL_SD_ReadBlocks+0x2d4>)
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e151      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f42:	e061      	b.n	8003008 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03c      	beq.n	8002fcc <HAL_SD_ReadBlocks+0x198>
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d039      	beq.n	8002fcc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f5c:	e033      	b.n	8002fc6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fe68 	bl	8003c38 <SDIO_ReadFIFO>
 8002f68:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	3301      	adds	r3, #1
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	3b01      	subs	r3, #1
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	0e1b      	lsrs	r3, r3, #24
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc8:	2b07      	cmp	r3, #7
 8002fca:	d9c8      	bls.n	8002f5e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fcc:	f7fe f882 	bl	80010d4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d902      	bls.n	8002fe2 <HAL_SD_ReadBlocks+0x1ae>
 8002fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d112      	bne.n	8003008 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_SD_ReadBlocks+0x2d4>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0ec      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300e:	f240 332a 	movw	r3, #810	; 0x32a
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d095      	beq.n	8002f44 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d022      	beq.n	800306c <HAL_SD_ReadBlocks+0x238>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d91f      	bls.n	800306c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	2b03      	cmp	r3, #3
 8003032:	d01b      	beq.n	800306c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 ff4f 	bl	8003edc <SDMMC_CmdStopTransfer>
 800303e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	2b00      	cmp	r3, #0
 8003044:	d012      	beq.n	800306c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2f      	ldr	r2, [pc, #188]	; (8003108 <HAL_SD_ReadBlocks+0x2d4>)
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0ba      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a22      	ldr	r2, [pc, #136]	; (8003108 <HAL_SD_ReadBlocks+0x2d4>)
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	f043 0208 	orr.w	r2, r3, #8
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0a0      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a15      	ldr	r2, [pc, #84]	; (8003108 <HAL_SD_ReadBlocks+0x2d4>)
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	f043 0202 	orr.w	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e086      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <HAL_SD_ReadBlocks+0x2d4>)
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e06c      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
 8003108:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd91 	bl	8003c38 <SDIO_ReadFIFO>
 8003116:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	b2da      	uxtb	r2, r3
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003122:	3301      	adds	r3, #1
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003128:	3b01      	subs	r3, #1
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b2da      	uxtb	r2, r3
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	3301      	adds	r3, #1
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800313c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313e:	3b01      	subs	r3, #1
 8003140:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	b2da      	uxtb	r2, r3
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	3301      	adds	r3, #1
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	3b01      	subs	r3, #1
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	0e1b      	lsrs	r3, r3, #24
 800315c:	b2da      	uxtb	r2, r3
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003164:	3301      	adds	r3, #1
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	3b01      	subs	r3, #1
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800316e:	f7fd ffb1 	bl	80010d4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800317a:	429a      	cmp	r2, r3
 800317c:	d902      	bls.n	8003184 <HAL_SD_ReadBlocks+0x350>
 800317e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003180:	2b00      	cmp	r3, #0
 8003182:	d112      	bne.n	80031aa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_SD_ReadBlocks+0x3b8>)
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e01b      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_SD_ReadBlocks+0x38a>
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1a6      	bne.n	800310c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e006      	b.n	80031e2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3748      	adds	r7, #72	; 0x48
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	004005ff 	.word	0x004005ff

080031f0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b092      	sub	sp, #72	; 0x48
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031fe:	f7fd ff69 	bl	80010d4 <HAL_GetTick>
 8003202:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e166      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 8159 	bne.w	80034e2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	441a      	add	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	429a      	cmp	r2, r3
 8003242:	d907      	bls.n	8003254 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e14d      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2203      	movs	r2, #3
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	2b01      	cmp	r3, #1
 800326a:	d002      	beq.n	8003272 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	025b      	lsls	r3, r3, #9
 8003270:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
 8003276:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	025b      	lsls	r3, r3, #9
 800327c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800327e:	2390      	movs	r3, #144	; 0x90
 8003280:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003286:	2300      	movs	r3, #0
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800328a:	2301      	movs	r3, #1
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f107 0218 	add.w	r2, r7, #24
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fd4a 	bl	8003d32 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d90a      	bls.n	80032ba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fdf1 	bl	8003e98 <SDMMC_CmdWriteMultiBlock>
 80032b6:	6478      	str	r0, [r7, #68]	; 0x44
 80032b8:	e009      	b.n	80032ce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2210      	movs	r2, #16
 80032be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fdc4 	bl	8003e54 <SDMMC_CmdWriteSingleBlock>
 80032cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a87      	ldr	r2, [pc, #540]	; (80034f8 <HAL_SD_WriteBlocks+0x308>)
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0fa      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032fe:	e065      	b.n	80033cc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d040      	beq.n	8003390 <HAL_SD_WriteBlocks+0x1a0>
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03d      	beq.n	8003390 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003314:	2300      	movs	r3, #0
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
 8003318:	e037      	b.n	800338a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003322:	3301      	adds	r3, #1
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003328:	3b01      	subs	r3, #1
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	021a      	lsls	r2, r3, #8
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	3301      	adds	r3, #1
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	3b01      	subs	r3, #1
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	041a      	lsls	r2, r3, #16
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003352:	3301      	adds	r3, #1
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	3b01      	subs	r3, #1
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	061a      	lsls	r2, r3, #24
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	3301      	adds	r3, #1
 800336c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800336e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003370:	3b01      	subs	r3, #1
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f107 0214 	add.w	r2, r7, #20
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fc66 	bl	8003c50 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003386:	3301      	adds	r3, #1
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
 800338a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338c:	2b07      	cmp	r3, #7
 800338e:	d9c4      	bls.n	800331a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003390:	f7fd fea0 	bl	80010d4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800339c:	429a      	cmp	r2, r3
 800339e:	d902      	bls.n	80033a6 <HAL_SD_WriteBlocks+0x1b6>
 80033a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d112      	bne.n	80033cc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a53      	ldr	r2, [pc, #332]	; (80034f8 <HAL_SD_WriteBlocks+0x308>)
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e091      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d2:	f240 331a 	movw	r3, #794	; 0x31a
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d091      	beq.n	8003300 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d022      	beq.n	8003430 <HAL_SD_WriteBlocks+0x240>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d91f      	bls.n	8003430 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d01b      	beq.n	8003430 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fd6d 	bl	8003edc <SDMMC_CmdStopTransfer>
 8003402:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3a      	ldr	r2, [pc, #232]	; (80034f8 <HAL_SD_WriteBlocks+0x308>)
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e05f      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <HAL_SD_WriteBlocks+0x308>)
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f043 0208 	orr.w	r2, r3, #8
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e045      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <HAL_SD_WriteBlocks+0x308>)
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e02b      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d012      	beq.n	80034cc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_SD_WriteBlocks+0x308>)
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e011      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e006      	b.n	80034f0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3748      	adds	r7, #72	; 0x48
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	004005ff 	.word	0x004005ff

080034fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350a:	0f9b      	lsrs	r3, r3, #30
 800350c:	b2da      	uxtb	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003516:	0e9b      	lsrs	r3, r3, #26
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	b2da      	uxtb	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003528:	0e1b      	lsrs	r3, r3, #24
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	b2da      	uxtb	r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2da      	uxtb	r2, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b2da      	uxtb	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003552:	b2da      	uxtb	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355c:	0d1b      	lsrs	r3, r3, #20
 800355e:	b29a      	uxth	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003568:	0c1b      	lsrs	r3, r3, #16
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	0bdb      	lsrs	r3, r3, #15
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	b2da      	uxtb	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	0b9b      	lsrs	r3, r3, #14
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b0:	0b1b      	lsrs	r3, r3, #12
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d163      	bne.n	8003694 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d6:	4013      	ands	r3, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80035dc:	0f92      	lsrs	r2, r2, #30
 80035de:	431a      	orrs	r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e8:	0edb      	lsrs	r3, r3, #27
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	0e1b      	lsrs	r3, r3, #24
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	b2da      	uxtb	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360c:	0d5b      	lsrs	r3, r3, #21
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	b2da      	uxtb	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361e:	0c9b      	lsrs	r3, r3, #18
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	b2da      	uxtb	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003630:	0bdb      	lsrs	r3, r3, #15
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b2da      	uxtb	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	3302      	adds	r3, #2
 8003654:	2201      	movs	r2, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800365e:	fb03 f202 	mul.w	r2, r3, r2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	7a1b      	ldrb	r3, [r3, #8]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	2201      	movs	r2, #1
 8003672:	409a      	lsls	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003680:	0a52      	lsrs	r2, r2, #9
 8003682:	fb03 f202 	mul.w	r2, r3, r2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003690:	661a      	str	r2, [r3, #96]	; 0x60
 8003692:	e031      	b.n	80036f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11d      	bne.n	80036d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a0:	041b      	lsls	r3, r3, #16
 80036a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	0c1b      	lsrs	r3, r3, #16
 80036ac:	431a      	orrs	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	3301      	adds	r3, #1
 80036b8:	029a      	lsls	r2, r3, #10
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
 80036d6:	e00f      	b.n	80036f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_SD_GetCardCSD+0x344>)
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e09d      	b.n	8003834 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fc:	0b9b      	lsrs	r3, r3, #14
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370e:	09db      	lsrs	r3, r3, #7
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003716:	b2da      	uxtb	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003726:	b2da      	uxtb	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	0fdb      	lsrs	r3, r3, #31
 8003732:	b2da      	uxtb	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	0f5b      	lsrs	r3, r3, #29
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	b2da      	uxtb	r2, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	0e9b      	lsrs	r3, r3, #26
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	b2da      	uxtb	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	0d9b      	lsrs	r3, r3, #22
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	0d5b      	lsrs	r3, r3, #21
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	0bdb      	lsrs	r3, r3, #15
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	0b9b      	lsrs	r3, r3, #14
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	0b1b      	lsrs	r3, r3, #12
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	b2da      	uxtb	r2, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	004005ff 	.word	0x004005ff

08003844 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f971 	bl	8003b94 <SD_SendStatus>
 80038b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0a5b      	lsrs	r3, r3, #9
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038d0:	693b      	ldr	r3, [r7, #16]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80038da:	b5b0      	push	{r4, r5, r7, lr}
 80038dc:	b094      	sub	sp, #80	; 0x50
 80038de:	af04      	add	r7, sp, #16
 80038e0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80038e2:	2301      	movs	r3, #1
 80038e4:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f9cd 	bl	8003c8a <SDIO_GetPowerState>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038fa:	e0b8      	b.n	8003a6e <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	2b03      	cmp	r3, #3
 8003902:	d02f      	beq.n	8003964 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fbae 	bl	800406a <SDMMC_CmdSendCID>
 800390e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <SD_InitCard+0x40>
    {
      return errorstate;
 8003916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003918:	e0a9      	b.n	8003a6e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f9f4 	bl	8003d0e <SDIO_GetResponse>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2104      	movs	r1, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f9eb 	bl	8003d0e <SDIO_GetResponse>
 8003938:	4602      	mov	r2, r0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2108      	movs	r1, #8
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f9e2 	bl	8003d0e <SDIO_GetResponse>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	210c      	movs	r1, #12
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f9d9 	bl	8003d0e <SDIO_GetResponse>
 800395c:	4602      	mov	r2, r0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	2b03      	cmp	r3, #3
 800396a:	d00d      	beq.n	8003988 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f107 020e 	add.w	r2, r7, #14
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fbb4 	bl	80040e4 <SDMMC_CmdSetRelAdd>
 800397c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <SD_InitCard+0xae>
    {
      return errorstate;
 8003984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003986:	e072      	b.n	8003a6e <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	2b03      	cmp	r3, #3
 800398e:	d036      	beq.n	80039fe <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003990:	89fb      	ldrh	r3, [r7, #14]
 8003992:	461a      	mov	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f000 fb7e 	bl	80040a6 <SDMMC_CmdSendCSD>
 80039aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <SD_InitCard+0xdc>
    {
      return errorstate;
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	e05b      	b.n	8003a6e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f9a6 	bl	8003d0e <SDIO_GetResponse>
 80039c2:	4602      	mov	r2, r0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2104      	movs	r1, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f99d 	bl	8003d0e <SDIO_GetResponse>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2108      	movs	r1, #8
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f994 	bl	8003d0e <SDIO_GetResponse>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	210c      	movs	r1, #12
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f98b 	bl	8003d0e <SDIO_GetResponse>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2104      	movs	r1, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f982 	bl	8003d0e <SDIO_GetResponse>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	0d1a      	lsrs	r2, r3, #20
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fd6f 	bl	80034fc <HAL_SD_GetCardCSD>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a28:	e021      	b.n	8003a6e <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	2200      	movs	r2, #0
 8003a36:	461c      	mov	r4, r3
 8003a38:	4615      	mov	r5, r2
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	462b      	mov	r3, r5
 8003a3e:	4608      	mov	r0, r1
 8003a40:	f000 fa6e 	bl	8003f20 <SDMMC_CmdSelDesel>
 8003a44:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <SD_InitCard+0x176>
  {
    return errorstate;
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4e:	e00e      	b.n	8003a6e <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681d      	ldr	r5, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	466c      	mov	r4, sp
 8003a58:	f103 0210 	add.w	r2, r3, #16
 8003a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a62:	3304      	adds	r3, #4
 8003a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a66:	4628      	mov	r0, r5
 8003a68:	f000 f8bc 	bl	8003be4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3740      	adds	r7, #64	; 0x40
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fa68 	bl	8003f66 <SDMMC_CmdGoIdleState>
 8003a96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	e072      	b.n	8003b88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fa7b 	bl	8003fa2 <SDMMC_CmdOperCond>
 8003aac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa51 	bl	8003f66 <SDMMC_CmdGoIdleState>
 8003ac4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e05b      	b.n	8003b88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d137      	bne.n	8003b4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa7b 	bl	8003fe0 <SDMMC_CmdAppCommand>
 8003aea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02d      	beq.n	8003b4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003af6:	e047      	b.n	8003b88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fa6e 	bl	8003fe0 <SDMMC_CmdAppCommand>
 8003b04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	e03b      	b.n	8003b88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	491e      	ldr	r1, [pc, #120]	; (8003b90 <SD_PowerON+0x118>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fa84 	bl	8004024 <SDMMC_CmdAppOperCommand>
 8003b1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b28:	e02e      	b.n	8003b88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f8ec 	bl	8003d0e <SDIO_GetResponse>
 8003b36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	0fdb      	lsrs	r3, r3, #31
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <SD_PowerON+0xcc>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <SD_PowerON+0xce>
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]

    count++;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d802      	bhi.n	8003b5e <SD_PowerON+0xe6>
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0cc      	beq.n	8003af8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d902      	bls.n	8003b6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	e00c      	b.n	8003b88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
 8003b7e:	e002      	b.n	8003b86 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	c1100000 	.word	0xc1100000

08003b94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ba4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ba8:	e018      	b.n	8003bdc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f000 fab5 	bl	8004126 <SDMMC_CmdSendStatus>
 8003bbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	e009      	b.n	8003bdc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f89d 	bl	8003d0e <SDIO_GetResponse>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 001c 	add.w	r0, r7, #28
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003bfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003bfe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003c02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003c06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003c0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003c0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003c1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	b004      	add	sp, #16
 8003c36:	4770      	bx	lr

08003c38 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0303 	and.w	r3, r3, #3
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cc2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003cc8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003cce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003cde:	f023 030f 	bic.w	r3, r3, #15
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	b2db      	uxtb	r3, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3314      	adds	r3, #20
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
}  
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003d5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003d64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0

}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003d96:	2310      	movs	r3, #16
 8003d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003da8:	f107 0308 	add.w	r3, r7, #8
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ff78 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	2110      	movs	r1, #16
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9d6 	bl	800416c <SDMMC_GetCmdResp1>
 8003dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003dda:	2311      	movs	r3, #17
 8003ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dde:	2340      	movs	r3, #64	; 0x40
 8003de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ff56 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	2111      	movs	r1, #17
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9b4 	bl	800416c <SDMMC_GetCmdResp1>
 8003e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e06:	69fb      	ldr	r3, [r7, #28]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e1e:	2312      	movs	r3, #18
 8003e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ff34 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	2112      	movs	r1, #18
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f992 	bl	800416c <SDMMC_GetCmdResp1>
 8003e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003e62:	2318      	movs	r3, #24
 8003e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ff12 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	2118      	movs	r1, #24
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f970 	bl	800416c <SDMMC_GetCmdResp1>
 8003e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003ea6:	2319      	movs	r3, #25
 8003ea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003eb8:	f107 0308 	add.w	r3, r7, #8
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fef0 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	2119      	movs	r1, #25
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f94e 	bl	800416c <SDMMC_GetCmdResp1>
 8003ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003ee8:	230c      	movs	r3, #12
 8003eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eec:	2340      	movs	r3, #64	; 0x40
 8003eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fecf 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <SDMMC_CmdStopTransfer+0x40>)
 8003f08:	210c      	movs	r1, #12
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f92e 	bl	800416c <SDMMC_GetCmdResp1>
 8003f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f12:	69fb      	ldr	r3, [r7, #28]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	05f5e100 	.word	0x05f5e100

08003f20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f30:	2307      	movs	r3, #7
 8003f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f42:	f107 0310 	add.w	r3, r7, #16
 8003f46:	4619      	mov	r1, r3
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff feab 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	2107      	movs	r1, #7
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f909 	bl	800416c <SDMMC_GetCmdResp1>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff fe8a 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb21 	bl	80045d8 <SDMMC_GetCmdError>
 8003f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f98:	69fb      	ldr	r3, [r7, #28]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b088      	sub	sp, #32
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003faa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fe6b 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fab4 	bl	800453c <SDMMC_GetCmdResp7>
 8003fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003fee:	2337      	movs	r3, #55	; 0x37
 8003ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ff2:	2340      	movs	r3, #64	; 0x40
 8003ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe4c 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	2137      	movs	r1, #55	; 0x37
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8aa 	bl	800416c <SDMMC_GetCmdResp1>
 8004018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800401a:	69fb      	ldr	r3, [r7, #28]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800403a:	2329      	movs	r3, #41	; 0x29
 800403c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800404c:	f107 0308 	add.w	r3, r7, #8
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fe26 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f9bd 	bl	80043d8 <SDMMC_GetCmdResp3>
 800405e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004060:	69fb      	ldr	r3, [r7, #28]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b088      	sub	sp, #32
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004076:	2302      	movs	r3, #2
 8004078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800407a:	23c0      	movs	r3, #192	; 0xc0
 800407c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fe08 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f957 	bl	8004348 <SDMMC_GetCmdResp2>
 800409a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800409c:	69fb      	ldr	r3, [r7, #28]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b088      	sub	sp, #32
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80040b4:	2309      	movs	r3, #9
 80040b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040b8:	23c0      	movs	r3, #192	; 0xc0
 80040ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fde9 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f938 	bl	8004348 <SDMMC_GetCmdResp2>
 80040d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040da:	69fb      	ldr	r3, [r7, #28]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80040f2:	2303      	movs	r3, #3
 80040f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004102:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004104:	f107 0308 	add.w	r3, r7, #8
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fdca 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	2103      	movs	r1, #3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f99b 	bl	8004450 <SDMMC_GetCmdResp6>
 800411a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800411c:	69fb      	ldr	r3, [r7, #28]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b088      	sub	sp, #32
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004134:	230d      	movs	r3, #13
 8004136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004138:	2340      	movs	r3, #64	; 0x40
 800413a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004144:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fda9 	bl	8003ca4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	210d      	movs	r1, #13
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f807 	bl	800416c <SDMMC_GetCmdResp1>
 800415e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004160:	69fb      	ldr	r3, [r7, #28]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	460b      	mov	r3, r1
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800417a:	4b70      	ldr	r3, [pc, #448]	; (800433c <SDMMC_GetCmdResp1+0x1d0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a70      	ldr	r2, [pc, #448]	; (8004340 <SDMMC_GetCmdResp1+0x1d4>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	0a5a      	lsrs	r2, r3, #9
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	61fa      	str	r2, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800419c:	e0c9      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ef      	beq.n	800418e <SDMMC_GetCmdResp1+0x22>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ea      	bne.n	800418e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2204      	movs	r2, #4
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041ca:	2304      	movs	r3, #4
 80041cc:	e0b1      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0a6      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	22c5      	movs	r2, #197	; 0xc5
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff fd83 	bl	8003cf6 <SDIO_GetCommandResponse>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461a      	mov	r2, r3
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d001      	beq.n	80041fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e099      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80041fe:	2100      	movs	r1, #0
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fd84 	bl	8003d0e <SDIO_GetResponse>
 8004206:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4b4e      	ldr	r3, [pc, #312]	; (8004344 <SDMMC_GetCmdResp1+0x1d8>)
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	e08d      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	da02      	bge.n	8004222 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800421c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004220:	e087      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	e080      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	e079      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800424c:	e071      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800425c:	e069      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426c:	e061      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800427c:	e059      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428c:	e051      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800429c:	e049      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80042a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042ac:	e041      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80042b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042bc:	e039      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80042c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042cc:	e031      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80042d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042dc:	e029      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80042e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80042ec:	e021      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80042f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80042fc:	e019      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004308:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800430c:	e011      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800431c:	e009      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004328:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800432c:	e001      	b.n	8004332 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800432e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000048 	.word	0x20000048
 8004340:	10624dd3 	.word	0x10624dd3
 8004344:	fdffe008 	.word	0xfdffe008

08004348 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <SDMMC_GetCmdResp2+0x88>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <SDMMC_GetCmdResp2+0x8c>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004374:	e026      	b.n	80043c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ef      	beq.n	8004366 <SDMMC_GetCmdResp2+0x1e>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1ea      	bne.n	8004366 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2204      	movs	r2, #4
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043a2:	2304      	movs	r3, #4
 80043a4:	e00e      	b.n	80043c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e003      	b.n	80043c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	22c5      	movs	r2, #197	; 0xc5
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000048 	.word	0x20000048
 80043d4:	10624dd3 	.word	0x10624dd3

080043d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <SDMMC_GetCmdResp3+0x70>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <SDMMC_GetCmdResp3+0x74>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0a5b      	lsrs	r3, r3, #9
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	60fa      	str	r2, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004404:	e01b      	b.n	800443e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ef      	beq.n	80043f6 <SDMMC_GetCmdResp3+0x1e>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ea      	bne.n	80043f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004432:	2304      	movs	r3, #4
 8004434:	e003      	b.n	800443e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	22c5      	movs	r2, #197	; 0xc5
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	20000048 	.word	0x20000048
 800444c:	10624dd3 	.word	0x10624dd3

08004450 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	460b      	mov	r3, r1
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800445e:	4b35      	ldr	r3, [pc, #212]	; (8004534 <SDMMC_GetCmdResp6+0xe4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a35      	ldr	r2, [pc, #212]	; (8004538 <SDMMC_GetCmdResp6+0xe8>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	0a5b      	lsrs	r3, r3, #9
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	61fa      	str	r2, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800447e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004482:	e052      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ef      	beq.n	8004474 <SDMMC_GetCmdResp6+0x24>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ea      	bne.n	8004474 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2204      	movs	r2, #4
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044b0:	2304      	movs	r3, #4
 80044b2:	e03a      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e02f      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff fc13 	bl	8003cf6 <SDIO_GetCommandResponse>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	7afb      	ldrb	r3, [r7, #11]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d001      	beq.n	80044de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044da:	2301      	movs	r3, #1
 80044dc:	e025      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	22c5      	movs	r2, #197	; 0xc5
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80044e4:	2100      	movs	r1, #0
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fc11 	bl	8003d0e <SDIO_GetResponse>
 80044ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004502:	2300      	movs	r3, #0
 8004504:	e011      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004514:	e009      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004524:	e001      	b.n	800452a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000048 	.word	0x20000048
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004544:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <SDMMC_GetCmdResp7+0x94>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <SDMMC_GetCmdResp7+0x98>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0a5b      	lsrs	r3, r3, #9
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	60fa      	str	r2, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004568:	e02c      	b.n	80045c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ef      	beq.n	800455a <SDMMC_GetCmdResp7+0x1e>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ea      	bne.n	800455a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2204      	movs	r2, #4
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004596:	2304      	movs	r3, #4
 8004598:	e014      	b.n	80045c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e009      	b.n	80045c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2240      	movs	r2, #64	; 0x40
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045c2:	2300      	movs	r3, #0
  
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000048 	.word	0x20000048
 80045d4:	10624dd3 	.word	0x10624dd3

080045d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <SDMMC_GetCmdError+0x4c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a10      	ldr	r2, [pc, #64]	; (8004628 <SDMMC_GetCmdError+0x50>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	0a5b      	lsrs	r3, r3, #9
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	60fa      	str	r2, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004604:	e009      	b.n	800461a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f1      	beq.n	80045f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	22c5      	movs	r2, #197	; 0xc5
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	20000048 	.word	0x20000048
 8004628:	10624dd3 	.word	0x10624dd3

0800462c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004630:	4904      	ldr	r1, [pc, #16]	; (8004644 <MX_FATFS_Init+0x18>)
 8004632:	4805      	ldr	r0, [pc, #20]	; (8004648 <MX_FATFS_Init+0x1c>)
 8004634:	f002 fc90 	bl	8006f58 <FATFS_LinkDriver>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <MX_FATFS_Init+0x20>)
 800463e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200043a4 	.word	0x200043a4
 8004648:	08007380 	.word	0x08007380
 800464c:	200043a0 	.word	0x200043a0

08004650 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004654:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
	...

08004660 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800466a:	f000 f86b 	bl	8004744 <BSP_SD_IsDetected>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e005      	b.n	8004684 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004678:	4804      	ldr	r0, [pc, #16]	; (800468c <BSP_SD_Init+0x2c>)
 800467a:	f7fe fb2b 	bl	8002cd4 <HAL_SD_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004682:	79fb      	ldrb	r3, [r7, #7]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200000dc 	.word	0x200000dc

08004690 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	4806      	ldr	r0, [pc, #24]	; (80046c8 <BSP_SD_ReadBlocks+0x38>)
 80046ae:	f7fe fbc1 	bl	8002e34 <HAL_SD_ReadBlocks>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200000dc 	.word	0x200000dc

080046cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	4806      	ldr	r0, [pc, #24]	; (8004704 <BSP_SD_WriteBlocks+0x38>)
 80046ea:	f7fe fd81 	bl	80031f0 <HAL_SD_WriteBlocks>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200000dc 	.word	0x200000dc

08004708 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800470c:	4805      	ldr	r0, [pc, #20]	; (8004724 <BSP_SD_GetCardState+0x1c>)
 800470e:	f7ff f8c4 	bl	800389a <HAL_SD_GetCardState>
 8004712:	4603      	mov	r3, r0
 8004714:	2b04      	cmp	r3, #4
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
}
 800471e:	4618      	mov	r0, r3
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	200000dc 	.word	0x200000dc

08004728 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4803      	ldr	r0, [pc, #12]	; (8004740 <BSP_SD_GetCardInfo+0x18>)
 8004734:	f7ff f886 	bl	8003844 <HAL_SD_GetCardInfo>
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200000dc 	.word	0x200000dc

08004744 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800474a:	2301      	movs	r3, #1
 800474c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800474e:	f000 f80b 	bl	8004768 <BSP_PlatformIsDetected>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004758:	2300      	movs	r3, #0
 800475a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	b2db      	uxtb	r3, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800476e:	2301      	movs	r3, #1
 8004770:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004772:	2180      	movs	r1, #128	; 0x80
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <BSP_PlatformIsDetected+0x28>)
 8004776:	f7fd faa9 	bl	8001ccc <HAL_GPIO_ReadPin>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8004780:	2300      	movs	r3, #0
 8004782:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8004784:	79fb      	ldrb	r3, [r7, #7]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000

08004794 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <disk_status+0x30>)
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	79fa      	ldrb	r2, [r7, #7]
 80047ac:	4905      	ldr	r1, [pc, #20]	; (80047c4 <disk_status+0x30>)
 80047ae:	440a      	add	r2, r1
 80047b0:	7a12      	ldrb	r2, [r2, #8]
 80047b2:	4610      	mov	r0, r2
 80047b4:	4798      	blx	r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200043c8 	.word	0x200043c8

080047c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	4a0d      	ldr	r2, [pc, #52]	; (8004810 <disk_initialize+0x48>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	4a0b      	ldr	r2, [pc, #44]	; (8004810 <disk_initialize+0x48>)
 80047e4:	2101      	movs	r1, #1
 80047e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <disk_initialize+0x48>)
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	79fa      	ldrb	r2, [r7, #7]
 80047f6:	4906      	ldr	r1, [pc, #24]	; (8004810 <disk_initialize+0x48>)
 80047f8:	440a      	add	r2, r1
 80047fa:	7a12      	ldrb	r2, [r2, #8]
 80047fc:	4610      	mov	r0, r2
 80047fe:	4798      	blx	r3
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200043c8 	.word	0x200043c8

08004814 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4603      	mov	r3, r0
 8004822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <disk_read+0x3c>)
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	689c      	ldr	r4, [r3, #8]
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	4a07      	ldr	r2, [pc, #28]	; (8004850 <disk_read+0x3c>)
 8004834:	4413      	add	r3, r2
 8004836:	7a18      	ldrb	r0, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	47a0      	blx	r4
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]
  return res;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
}
 8004846:	4618      	mov	r0, r3
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	bf00      	nop
 8004850:	200043c8 	.word	0x200043c8

08004854 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <disk_write+0x3c>)
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68dc      	ldr	r4, [r3, #12]
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	4a07      	ldr	r2, [pc, #28]	; (8004890 <disk_write+0x3c>)
 8004874:	4413      	add	r3, r2
 8004876:	7a18      	ldrb	r0, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	47a0      	blx	r4
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]
  return res;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd90      	pop	{r4, r7, pc}
 800488e:	bf00      	nop
 8004890:	200043c8 	.word	0x200043c8

08004894 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	603a      	str	r2, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
 80048a0:	460b      	mov	r3, r1
 80048a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	4a09      	ldr	r2, [pc, #36]	; (80048cc <disk_ioctl+0x38>)
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	79fa      	ldrb	r2, [r7, #7]
 80048b2:	4906      	ldr	r1, [pc, #24]	; (80048cc <disk_ioctl+0x38>)
 80048b4:	440a      	add	r2, r1
 80048b6:	7a10      	ldrb	r0, [r2, #8]
 80048b8:	79b9      	ldrb	r1, [r7, #6]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4798      	blx	r3
 80048be:	4603      	mov	r3, r0
 80048c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	200043c8 	.word	0x200043c8

080048d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80048e4:	e007      	b.n	80048f6 <mem_cpy+0x26>
		*d++ = *s++;
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	1c53      	adds	r3, r2, #1
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	6179      	str	r1, [r7, #20]
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1e5a      	subs	r2, r3, #1
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f2      	bne.n	80048e6 <mem_cpy+0x16>
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800491c:	e005      	b.n	800492a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	617a      	str	r2, [r7, #20]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f4      	bne.n	800491e <mem_set+0x12>
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	; 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004958:	bf00      	nop
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	1e5a      	subs	r2, r3, #1
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <mem_cmp+0x40>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	61fa      	str	r2, [r7, #28]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	4619      	mov	r1, r3
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	61ba      	str	r2, [r7, #24]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	1acb      	subs	r3, r1, r3
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ec      	beq.n	800495a <mem_cmp+0x1a>
	return r;
 8004980:	697b      	ldr	r3, [r7, #20]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004996:	e002      	b.n	800499e <chk_chr+0x12>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3301      	adds	r3, #1
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <chk_chr+0x26>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d1f2      	bne.n	8004998 <chk_chr+0xc>
	return *str;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e038      	b.n	8004a46 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80049d4:	492f      	ldr	r1, [pc, #188]	; (8004a94 <chk_lock+0xd4>)
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d029      	beq.n	8004a3c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80049e8:	492a      	ldr	r1, [pc, #168]	; (8004a94 <chk_lock+0xd4>)
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4613      	mov	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d11e      	bne.n	8004a40 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8004a02:	4924      	ldr	r1, [pc, #144]	; (8004a94 <chk_lock+0xd4>)
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3304      	adds	r3, #4
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d110      	bne.n	8004a40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004a1e:	491d      	ldr	r1, [pc, #116]	; (8004a94 <chk_lock+0xd4>)
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	881a      	ldrh	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d102      	bne.n	8004a40 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8004a3a:	e007      	b.n	8004a4c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d9c3      	bls.n	80049d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d109      	bne.n	8004a66 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <chk_lock+0x9e>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d101      	bne.n	8004a62 <chk_lock+0xa2>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e013      	b.n	8004a8a <chk_lock+0xca>
 8004a62:	2312      	movs	r3, #18
 8004a64:	e011      	b.n	8004a8a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10b      	bne.n	8004a84 <chk_lock+0xc4>
 8004a6c:	4909      	ldr	r1, [pc, #36]	; (8004a94 <chk_lock+0xd4>)
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	330a      	adds	r3, #10
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d101      	bne.n	8004a88 <chk_lock+0xc8>
 8004a84:	2310      	movs	r3, #16
 8004a86:	e000      	b.n	8004a8a <chk_lock+0xca>
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	200043b0 	.word	0x200043b0

08004a98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	e002      	b.n	8004aaa <enq_lock+0x12>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	607b      	str	r3, [r7, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d809      	bhi.n	8004ac4 <enq_lock+0x2c>
 8004ab0:	490a      	ldr	r1, [pc, #40]	; (8004adc <enq_lock+0x44>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ef      	bne.n	8004aa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	bf14      	ite	ne
 8004aca:	2301      	movne	r3, #1
 8004acc:	2300      	moveq	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200043b0 	.word	0x200043b0

08004ae0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e02b      	b.n	8004b48 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004af0:	4955      	ldr	r1, [pc, #340]	; (8004c48 <inc_lock+0x168>)
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d11b      	bne.n	8004b42 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8004b0a:	494f      	ldr	r1, [pc, #316]	; (8004c48 <inc_lock+0x168>)
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3304      	adds	r3, #4
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d10d      	bne.n	8004b42 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8004b26:	4948      	ldr	r1, [pc, #288]	; (8004c48 <inc_lock+0x168>)
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3308      	adds	r3, #8
 8004b36:	881a      	ldrh	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d006      	beq.n	8004b50 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d9d0      	bls.n	8004af0 <inc_lock+0x10>
 8004b4e:	e000      	b.n	8004b52 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8004b50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d145      	bne.n	8004be4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e002      	b.n	8004b64 <inc_lock+0x84>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d809      	bhi.n	8004b7e <inc_lock+0x9e>
 8004b6a:	4937      	ldr	r1, [pc, #220]	; (8004c48 <inc_lock+0x168>)
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ef      	bne.n	8004b5e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d101      	bne.n	8004b88 <inc_lock+0xa8>
 8004b84:	2300      	movs	r3, #0
 8004b86:	e05a      	b.n	8004c3e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004b8e:	482e      	ldr	r0, [pc, #184]	; (8004c48 <inc_lock+0x168>)
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4403      	add	r3, r0
 8004b9c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004ba4:	4828      	ldr	r0, [pc, #160]	; (8004c48 <inc_lock+0x168>)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4403      	add	r3, r0
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004bbc:	4922      	ldr	r1, [pc, #136]	; (8004c48 <inc_lock+0x168>)
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3308      	adds	r3, #8
 8004bcc:	4602      	mov	r2, r0
 8004bce:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004bd0:	491d      	ldr	r1, [pc, #116]	; (8004c48 <inc_lock+0x168>)
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	330a      	adds	r3, #10
 8004be0:	2200      	movs	r2, #0
 8004be2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <inc_lock+0x124>
 8004bea:	4917      	ldr	r1, [pc, #92]	; (8004c48 <inc_lock+0x168>)
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	330a      	adds	r3, #10
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <inc_lock+0x124>
 8004c00:	2300      	movs	r3, #0
 8004c02:	e01c      	b.n	8004c3e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <inc_lock+0x142>
 8004c0a:	490f      	ldr	r1, [pc, #60]	; (8004c48 <inc_lock+0x168>)
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	330a      	adds	r3, #10
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b299      	uxth	r1, r3
 8004c20:	e001      	b.n	8004c26 <inc_lock+0x146>
 8004c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c26:	4808      	ldr	r0, [pc, #32]	; (8004c48 <inc_lock+0x168>)
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4403      	add	r3, r0
 8004c34:	330a      	adds	r3, #10
 8004c36:	460a      	mov	r2, r1
 8004c38:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	200043b0 	.word	0x200043b0

08004c4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	607b      	str	r3, [r7, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d82e      	bhi.n	8004cbe <dec_lock+0x72>
		n = Files[i].ctr;
 8004c60:	491b      	ldr	r1, [pc, #108]	; (8004cd0 <dec_lock+0x84>)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	330a      	adds	r3, #10
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c74:	89fb      	ldrh	r3, [r7, #14]
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d101      	bne.n	8004c80 <dec_lock+0x34>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <dec_lock+0x40>
 8004c86:	89fb      	ldrh	r3, [r7, #14]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004c8c:	4910      	ldr	r1, [pc, #64]	; (8004cd0 <dec_lock+0x84>)
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	330a      	adds	r3, #10
 8004c9c:	89fa      	ldrh	r2, [r7, #14]
 8004c9e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d108      	bne.n	8004cb8 <dec_lock+0x6c>
 8004ca6:	490a      	ldr	r1, [pc, #40]	; (8004cd0 <dec_lock+0x84>)
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	737b      	strb	r3, [r7, #13]
 8004cbc:	e001      	b.n	8004cc2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004cc2:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bc80      	pop	{r7}
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	200043b0 	.word	0x200043b0

08004cd4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e016      	b.n	8004d10 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ce2:	4910      	ldr	r1, [pc, #64]	; (8004d24 <clear_lock+0x50>)
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d108      	bne.n	8004d0a <clear_lock+0x36>
 8004cf8:	490a      	ldr	r1, [pc, #40]	; (8004d24 <clear_lock+0x50>)
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d9e5      	bls.n	8004ce2 <clear_lock+0xe>
	}
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	200043b0 	.word	0x200043b0

08004d28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d038      	beq.n	8004db0 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004d44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	f7ff fd7f 	bl	8004854 <disk_write>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e026      	b.n	8004db0 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d218      	bcs.n	8004db0 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e010      	b.n	8004daa <sync_window+0x82>
					wsect += fs->fsize;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	f7ff fd58 	bl	8004854 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d8eb      	bhi.n	8004d88 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d01b      	beq.n	8004e0c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ffa7 	bl	8004d28 <sync_window>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d113      	bne.n	8004e0c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	2301      	movs	r3, #1
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	f7ff fd10 	bl	8004814 <disk_read>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ff82 	bl	8004d28 <sync_window>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f040 809b 	bne.w	8004f66 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	f040 8088 	bne.w	8004f4c <sync_fs+0x136>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	f040 8082 	bne.w	8004f4c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fd5b 	bl	800490c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2255      	movs	r2, #85	; 0x55
 8004e5a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	22aa      	movs	r2, #170	; 0xaa
 8004e62:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2252      	movs	r2, #82	; 0x52
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2252      	movs	r2, #82	; 0x52
 8004e70:	705a      	strb	r2, [r3, #1]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2261      	movs	r2, #97	; 0x61
 8004e76:	709a      	strb	r2, [r3, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2241      	movs	r2, #65	; 0x41
 8004e7c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2272      	movs	r2, #114	; 0x72
 8004e82:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2272      	movs	r2, #114	; 0x72
 8004e8a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2241      	movs	r2, #65	; 0x41
 8004e92:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2261      	movs	r2, #97	; 0x61
 8004e9a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	0a1b      	lsrs	r3, r3, #8
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004ed6:	0e1b      	lsrs	r3, r3, #24
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f7ff fc88 	bl	8004854 <disk_write>
			fs->fsi_flag = 0;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f52:	2200      	movs	r2, #0
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fc9c 	bl	8004894 <disk_ioctl>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	3b02      	subs	r3, #2
 8004f7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f86:	3b02      	subs	r3, #2
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d301      	bcc.n	8004f92 <clust2sect+0x22>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e00a      	b.n	8004fa8 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004f98:	461a      	mov	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	fb03 f202 	mul.w	r2, r3, r2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004fa6:	4413      	add	r3, r2
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d905      	bls.n	8004fce <get_fat+0x1c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <get_fat+0x22>
		val = 1;	/* Internal error */
 8004fce:	2301      	movs	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e0a3      	b.n	800511c <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d068      	beq.n	80050b6 <get_fat+0x104>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	f300 808f 	bgt.w	8005108 <get_fat+0x156>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d002      	beq.n	8004ff4 <get_fat+0x42>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d040      	beq.n	8005074 <get_fat+0xc2>
 8004ff2:	e089      	b.n	8005108 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	0a5b      	lsrs	r3, r3, #9
 800500c:	4413      	add	r3, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff fed2 	bl	8004dba <move_window>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d178      	bne.n	800510e <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	60fa      	str	r2, [r7, #12]
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	5cd3      	ldrb	r3, [r2, r3]
 800502a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	4413      	add	r3, r2
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff febd 	bl	8004dba <move_window>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d165      	bne.n	8005112 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	5cd3      	ldrb	r3, [r2, r3]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	461a      	mov	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <get_fat+0xb8>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	e002      	b.n	8005070 <get_fat+0xbe>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	617b      	str	r3, [r7, #20]
			break;
 8005072:	e053      	b.n	800511c <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	4413      	add	r3, r2
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fe99 	bl	8004dba <move_window>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d143      	bne.n	8005116 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3301      	adds	r3, #1
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	b21a      	sxth	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b21b      	sxth	r3, r3
 80050ac:	4313      	orrs	r3, r2
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	617b      	str	r3, [r7, #20]
			break;
 80050b4:	e032      	b.n	800511c <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	09db      	lsrs	r3, r3, #7
 80050c0:	4413      	add	r3, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fe78 	bl	8004dba <move_window>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d124      	bne.n	800511a <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	3303      	adds	r3, #3
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	061a      	lsls	r2, r3, #24
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	3302      	adds	r3, #2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	4313      	orrs	r3, r2
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	3201      	adds	r2, #1
 80050f4:	7812      	ldrb	r2, [r2, #0]
 80050f6:	0212      	lsls	r2, r2, #8
 80050f8:	4313      	orrs	r3, r2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005104:	617b      	str	r3, [r7, #20]
			break;
 8005106:	e009      	b.n	800511c <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8005108:	2301      	movs	r3, #1
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e006      	b.n	800511c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800510e:	bf00      	nop
 8005110:	e004      	b.n	800511c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800511a:	bf00      	nop
		}
	}

	return val;
 800511c:	697b      	ldr	r3, [r7, #20]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d905      	bls.n	8005144 <put_fat+0x1e>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <put_fat+0x24>
		res = FR_INT_ERR;
 8005144:	2302      	movs	r3, #2
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e0f6      	b.n	8005338 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005150:	2b03      	cmp	r3, #3
 8005152:	f000 809e 	beq.w	8005292 <put_fat+0x16c>
 8005156:	2b03      	cmp	r3, #3
 8005158:	f300 80e4 	bgt.w	8005324 <put_fat+0x1fe>
 800515c:	2b01      	cmp	r3, #1
 800515e:	d002      	beq.n	8005166 <put_fat+0x40>
 8005160:	2b02      	cmp	r3, #2
 8005162:	d06f      	beq.n	8005244 <put_fat+0x11e>
 8005164:	e0de      	b.n	8005324 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	0a5b      	lsrs	r3, r3, #9
 800517e:	4413      	add	r3, r2
 8005180:	4619      	mov	r1, r3
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fe19 	bl	8004dba <move_window>
 8005188:	4603      	mov	r3, r0
 800518a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 80cb 	bne.w	800532a <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	617a      	str	r2, [r7, #20]
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <put_fat+0xa4>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	b25a      	sxtb	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b25b      	sxtb	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	e001      	b.n	80051ce <put_fat+0xa8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	0a5b      	lsrs	r3, r3, #9
 80051e4:	4413      	add	r3, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7ff fde6 	bl	8004dba <move_window>
 80051ee:	4603      	mov	r3, r0
 80051f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f040 809a 	bne.w	800532e <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <put_fat+0xf2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e00e      	b.n	8005236 <put_fat+0x110>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	b25b      	sxtb	r3, r3
 800521e:	f023 030f 	bic.w	r3, r3, #15
 8005222:	b25a      	sxtb	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	b25b      	sxtb	r3, r3
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	b25b      	sxtb	r3, r3
 8005230:	4313      	orrs	r3, r2
 8005232:	b25b      	sxtb	r3, r3
 8005234:	b2db      	uxtb	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005242:	e079      	b.n	8005338 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	4413      	add	r3, r2
 8005250:	4619      	mov	r1, r3
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff fdb1 	bl	8004dba <move_window>
 8005258:	4603      	mov	r3, r0
 800525a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800525c:	7ffb      	ldrb	r3, [r7, #31]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d167      	bne.n	8005332 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	b29b      	uxth	r3, r3
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	b29a      	uxth	r2, r3
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	3301      	adds	r3, #1
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005290:	e052      	b.n	8005338 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	09db      	lsrs	r3, r3, #7
 800529c:	4413      	add	r3, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff fd8a 	bl	8004dba <move_window>
 80052a6:	4603      	mov	r3, r0
 80052a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052aa:	7ffb      	ldrb	r3, [r7, #31]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d142      	bne.n	8005336 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	3303      	adds	r3, #3
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	061a      	lsls	r2, r3, #24
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	3302      	adds	r3, #2
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	4313      	orrs	r3, r2
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	3201      	adds	r2, #1
 80052d4:	7812      	ldrb	r2, [r2, #0]
 80052d6:	0212      	lsls	r2, r2, #8
 80052d8:	4313      	orrs	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	3301      	adds	r3, #1
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0c1a      	lsrs	r2, r3, #16
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	3302      	adds	r3, #2
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	0e1a      	lsrs	r2, r3, #24
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	3303      	adds	r3, #3
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005322:	e009      	b.n	8005338 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8005324:	2302      	movs	r3, #2
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e006      	b.n	8005338 <put_fat+0x212>
			if (res != FR_OK) break;
 800532a:	bf00      	nop
 800532c:	e004      	b.n	8005338 <put_fat+0x212>
			if (res != FR_OK) break;
 800532e:	bf00      	nop
 8005330:	e002      	b.n	8005338 <put_fat+0x212>
			if (res != FR_OK) break;
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <put_fat+0x212>
			if (res != FR_OK) break;
 8005336:	bf00      	nop
		}
	}

	return res;
 8005338:	7ffb      	ldrb	r3, [r7, #31]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d905      	bls.n	800535e <remove_chain+0x1c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <remove_chain+0x22>
		res = FR_INT_ERR;
 800535e:	2302      	movs	r3, #2
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	e043      	b.n	80053ec <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005368:	e036      	b.n	80053d8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fe20 	bl	8004fb2 <get_fat>
 8005372:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d035      	beq.n	80053e6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d102      	bne.n	8005386 <remove_chain+0x44>
 8005380:	2302      	movs	r3, #2
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e032      	b.n	80053ec <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d102      	bne.n	8005394 <remove_chain+0x52>
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
 8005392:	e02b      	b.n	80053ec <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005394:	2200      	movs	r2, #0
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fec4 	bl	8005126 <put_fat>
 800539e:	4603      	mov	r3, r0
 80053a0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d120      	bne.n	80053ea <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d00f      	beq.n	80053d4 <remove_chain+0x92>
				fs->free_clust++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80053c8:	f043 0301 	orr.w	r3, r3, #1
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d3c2      	bcc.n	800536a <remove_chain+0x28>
 80053e4:	e002      	b.n	80053ec <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <remove_chain+0xaa>
			if (res != FR_OK) break;
 80053ea:	bf00      	nop
		}
	}

	return res;
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800540c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <create_chain+0x2a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	d31c      	bcc.n	800545a <create_chain+0x64>
 8005420:	2301      	movs	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e019      	b.n	800545a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fdc2 	bl	8004fb2 <get_fat>
 800542e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d801      	bhi.n	800543a <create_chain+0x44>
 8005436:	2301      	movs	r3, #1
 8005438:	e076      	b.n	8005528 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d101      	bne.n	8005446 <create_chain+0x50>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	e070      	b.n	8005528 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d201      	bcs.n	8005456 <create_chain+0x60>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	e068      	b.n	8005528 <create_chain+0x132>
		scl = clst;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	3301      	adds	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	429a      	cmp	r2, r3
 800546e:	d307      	bcc.n	8005480 <create_chain+0x8a>
			ncl = 2;
 8005470:	2302      	movs	r3, #2
 8005472:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d901      	bls.n	8005480 <create_chain+0x8a>
 800547c:	2300      	movs	r3, #0
 800547e:	e053      	b.n	8005528 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fd95 	bl	8004fb2 <get_fat>
 8005488:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d002      	beq.n	800549e <create_chain+0xa8>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <create_chain+0xac>
			return cs;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	e042      	b.n	8005528 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d1d9      	bne.n	800545e <create_chain+0x68>
 80054aa:	2300      	movs	r3, #0
 80054ac:	e03c      	b.n	8005528 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80054ae:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80054b0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fe35 	bl	8005126 <put_fat>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d109      	bne.n	80054da <create_chain+0xe4>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff fe28 	bl	8005126 <put_fat>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11a      	bne.n	8005516 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d018      	beq.n	8005526 <create_chain+0x130>
			fs->free_clust--;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054fa:	1e5a      	subs	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	b2da      	uxtb	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005514:	e007      	b.n	8005526 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <create_chain+0x12c>
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	e000      	b.n	8005524 <create_chain+0x12e>
 8005522:	2301      	movs	r3, #1
 8005524:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005526:	697b      	ldr	r3, [r7, #20]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005540:	3304      	adds	r3, #4
 8005542:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	0a5b      	lsrs	r3, r3, #9
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800554e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005552:	fbb3 f3f2 	udiv	r3, r3, r2
 8005556:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	613a      	str	r2, [r7, #16]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <clmt_clust+0x3c>
 8005568:	2300      	movs	r3, #0
 800556a:	e010      	b.n	800558e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d307      	bcc.n	8005584 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	3304      	adds	r3, #4
 8005580:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005582:	e7e9      	b.n	8005558 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8005584:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
}
 800558e:	4618      	mov	r0, r3
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80055b2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d007      	beq.n	80055ca <dir_sdi+0x32>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d301      	bcc.n	80055ce <dir_sdi+0x36>
		return FR_INT_ERR;
 80055ca:	2302      	movs	r3, #2
 80055cc:	e074      	b.n	80056b8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10c      	bne.n	80055ee <dir_sdi+0x56>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d105      	bne.n	80055ee <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80055ec:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d111      	bne.n	8005618 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055fa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80055fe:	461a      	mov	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4293      	cmp	r3, r2
 8005604:	d301      	bcc.n	800560a <dir_sdi+0x72>
			return FR_INT_ERR;
 8005606:	2302      	movs	r3, #2
 8005608:	e056      	b.n	80056b8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005610:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	e032      	b.n	800567e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800561e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005626:	e01e      	b.n	8005666 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800562e:	6979      	ldr	r1, [r7, #20]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fcbe 	bl	8004fb2 <get_fat>
 8005636:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563e:	d101      	bne.n	8005644 <dir_sdi+0xac>
 8005640:	2301      	movs	r3, #1
 8005642:	e039      	b.n	80056b8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d907      	bls.n	800565a <dir_sdi+0xc2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005650:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	429a      	cmp	r2, r3
 8005658:	d301      	bcc.n	800565e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800565a:	2302      	movs	r3, #2
 800565c:	e02c      	b.n	80056b8 <dir_sdi+0x120>
			idx -= ic;
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d2dc      	bcs.n	8005628 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff fc7a 	bl	8004f70 <clust2sect>
 800567c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <dir_sdi+0xf8>
 800568c:	2302      	movs	r3, #2
 800568e:	e013      	b.n	80056b8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	091a      	lsrs	r2, r3, #4
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	441a      	add	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056a4:	461a      	mov	r2, r3
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	015b      	lsls	r3, r3, #5
 80056ae:	441a      	add	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <dir_next+0x26>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <dir_next+0x2a>
		return FR_NO_FILE;
 80056e6:	2304      	movs	r3, #4
 80056e8:	e0dd      	b.n	80058a6 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f040 80c6 	bne.w	8005882 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005714:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005718:	461a      	mov	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4293      	cmp	r3, r2
 800571e:	f0c0 80b0 	bcc.w	8005882 <dir_next+0x1c2>
				return FR_NO_FILE;
 8005722:	2304      	movs	r3, #4
 8005724:	e0bf      	b.n	80058a6 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005730:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005734:	3a01      	subs	r2, #1
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 80a2 	bne.w	8005882 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f7ff fc30 	bl	8004fb2 <get_fat>
 8005752:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d801      	bhi.n	800575e <dir_next+0x9e>
 800575a:	2302      	movs	r3, #2
 800575c:	e0a3      	b.n	80058a6 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005764:	d101      	bne.n	800576a <dir_next+0xaa>
 8005766:	2301      	movs	r3, #1
 8005768:	e09d      	b.n	80058a6 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	429a      	cmp	r2, r3
 8005778:	d374      	bcc.n	8005864 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <dir_next+0xc4>
 8005780:	2304      	movs	r3, #4
 8005782:	e090      	b.n	80058a6 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f7ff fe2f 	bl	80053f6 <create_chain>
 8005798:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <dir_next+0xe4>
 80057a0:	2307      	movs	r3, #7
 80057a2:	e080      	b.n	80058a6 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <dir_next+0xee>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e07b      	b.n	80058a6 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d101      	bne.n	80057ba <dir_next+0xfa>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e075      	b.n	80058a6 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fab1 	bl	8004d28 <sync_window>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <dir_next+0x110>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e06a      	b.n	80058a6 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff f895 	bl	800490c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	4610      	mov	r0, r2
 80057f2:	f7ff fbbd 	bl	8004f70 <clust2sect>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	e01b      	b.n	800583a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fa87 	bl	8004d28 <sync_window>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <dir_next+0x164>
 8005820:	2301      	movs	r3, #1
 8005822:	e040      	b.n	80058a6 <dir_next+0x1e6>
						dp->fs->winsect++;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800582a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800582e:	3201      	adds	r2, #1
 8005830:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3301      	adds	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005840:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005844:	461a      	mov	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4293      	cmp	r3, r2
 800584a:	d3da      	bcc.n	8005802 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005852:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	1a8a      	subs	r2, r1, r2
 8005860:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005872:	6979      	ldr	r1, [r7, #20]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fb7b 	bl	8004f70 <clust2sect>
 800587a:	4602      	mov	r2, r0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	015b      	lsls	r3, r3, #5
 800589c:	441a      	add	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd90      	pop	{r4, r7, pc}

080058ae <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80058b8:	2100      	movs	r1, #0
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fe6c 	bl	8005598 <dir_sdi>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d131      	bne.n	800592e <dir_alloc+0x80>
		n = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7ff fa6c 	bl	8004dba <move_window>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d11f      	bne.n	800592c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2be5      	cmp	r3, #229	; 0xe5
 80058f6:	d005      	beq.n	8005904 <dir_alloc+0x56>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	3301      	adds	r3, #1
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d102      	bne.n	8005918 <dir_alloc+0x6a>
 8005912:	e00c      	b.n	800592e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005914:	2300      	movs	r3, #0
 8005916:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005918:	2101      	movs	r1, #1
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fed0 	bl	80056c0 <dir_next>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0d1      	beq.n	80058ce <dir_alloc+0x20>
 800592a:	e000      	b.n	800592e <dir_alloc+0x80>
			if (res != FR_OK) break;
 800592c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d101      	bne.n	8005938 <dir_alloc+0x8a>
 8005934:	2307      	movs	r3, #7
 8005936:	73fb      	strb	r3, [r7, #15]
	return res;
 8005938:	7bfb      	ldrb	r3, [r7, #15]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	331b      	adds	r3, #27
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	b21a      	sxth	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	331a      	adds	r3, #26
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b21b      	sxth	r3, r3
 800595e:	4313      	orrs	r3, r2
 8005960:	b21b      	sxth	r3, r3
 8005962:	b29b      	uxth	r3, r3
 8005964:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800596c:	2b03      	cmp	r3, #3
 800596e:	d10f      	bne.n	8005990 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	3315      	adds	r3, #21
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	b21a      	sxth	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b21b      	sxth	r3, r3
 8005982:	4313      	orrs	r3, r2
 8005984:	b21b      	sxth	r3, r3
 8005986:	b29b      	uxth	r3, r3
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

	return cl;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	331a      	adds	r3, #26
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	331b      	adds	r3, #27
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	0c1a      	lsrs	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3314      	adds	r3, #20
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	0c1b      	lsrs	r3, r3, #16
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3315      	adds	r3, #21
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80059f0:	2100      	movs	r1, #0
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fdd0 	bl	8005598 <dir_sdi>
 80059f8:	4603      	mov	r3, r0
 80059fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <dir_find+0x1e>
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	e03b      	b.n	8005a7e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7ff f9d0 	bl	8004dba <move_window>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d128      	bne.n	8005a76 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a2a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <dir_find+0x56>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	75fb      	strb	r3, [r7, #23]
 8005a3c:	e01e      	b.n	8005a7c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	330b      	adds	r3, #11
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <dir_find+0x7a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a52:	220b      	movs	r2, #11
 8005a54:	4619      	mov	r1, r3
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f7fe ff72 	bl	8004940 <mem_cmp>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fe2b 	bl	80056c0 <dir_next>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0c8      	beq.n	8005a06 <dir_find+0x1e>
 8005a74:	e002      	b.n	8005a7c <dir_find+0x94>
		if (res != FR_OK) break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <dir_find+0x94>
			break;
 8005a7a:	bf00      	nop

	return res;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff ff0c 	bl	80058ae <dir_alloc>
 8005a96:	4603      	mov	r3, r0
 8005a98:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d126      	bne.n	8005aee <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7ff f983 	bl	8004dba <move_window>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d117      	bne.n	8005aee <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe ff1f 	bl	800490c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ada:	220b      	movs	r2, #11
 8005adc:	4619      	mov	r1, r3
 8005ade:	f7fe fef7 	bl	80048d0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e002      	b.n	8005b10 <create_name+0x18>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b2f      	cmp	r3, #47	; 0x2f
 8005b16:	d0f8      	beq.n	8005b0a <create_name+0x12>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b1e:	d0f4      	beq.n	8005b0a <create_name+0x12>
	sfn = dp->fn;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b26:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005b28:	220b      	movs	r2, #11
 8005b2a:	2120      	movs	r1, #32
 8005b2c:	68b8      	ldr	r0, [r7, #8]
 8005b2e:	f7fe feed 	bl	800490c <mem_set>
	si = i = b = 0; ni = 8;
 8005b32:	2300      	movs	r3, #0
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	2308      	movs	r3, #8
 8005b40:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	617a      	str	r2, [r7, #20]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005b50:	7fbb      	ldrb	r3, [r7, #30]
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d953      	bls.n	8005bfe <create_name+0x106>
 8005b56:	7fbb      	ldrb	r3, [r7, #30]
 8005b58:	2b2f      	cmp	r3, #47	; 0x2f
 8005b5a:	d050      	beq.n	8005bfe <create_name+0x106>
 8005b5c:	7fbb      	ldrb	r3, [r7, #30]
 8005b5e:	2b5c      	cmp	r3, #92	; 0x5c
 8005b60:	d04d      	beq.n	8005bfe <create_name+0x106>
		if (c == '.' || i >= ni) {
 8005b62:	7fbb      	ldrb	r3, [r7, #30]
 8005b64:	2b2e      	cmp	r3, #46	; 0x2e
 8005b66:	d003      	beq.n	8005b70 <create_name+0x78>
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d30f      	bcc.n	8005b90 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d102      	bne.n	8005b7c <create_name+0x84>
 8005b76:	7fbb      	ldrb	r3, [r7, #30]
 8005b78:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7a:	d001      	beq.n	8005b80 <create_name+0x88>
 8005b7c:	2306      	movs	r3, #6
 8005b7e:	e073      	b.n	8005c68 <create_name+0x170>
			i = 8; ni = 11;
 8005b80:	2308      	movs	r3, #8
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	230b      	movs	r3, #11
 8005b86:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005b88:	7ffb      	ldrb	r3, [r7, #31]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e035      	b.n	8005bfc <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005b90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da08      	bge.n	8005baa <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005b98:	7ffb      	ldrb	r3, [r7, #31]
 8005b9a:	f043 0303 	orr.w	r3, r3, #3
 8005b9e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005ba0:	7fbb      	ldrb	r3, [r7, #30]
 8005ba2:	3b80      	subs	r3, #128	; 0x80
 8005ba4:	4a32      	ldr	r2, [pc, #200]	; (8005c70 <create_name+0x178>)
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005baa:	7fbb      	ldrb	r3, [r7, #30]
 8005bac:	4619      	mov	r1, r3
 8005bae:	4831      	ldr	r0, [pc, #196]	; (8005c74 <create_name+0x17c>)
 8005bb0:	f7fe feec 	bl	800498c <chk_chr>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <create_name+0xc6>
				return FR_INVALID_NAME;
 8005bba:	2306      	movs	r3, #6
 8005bbc:	e054      	b.n	8005c68 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005bbe:	7fbb      	ldrb	r3, [r7, #30]
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d907      	bls.n	8005bd4 <create_name+0xdc>
 8005bc4:	7fbb      	ldrb	r3, [r7, #30]
 8005bc6:	2b5a      	cmp	r3, #90	; 0x5a
 8005bc8:	d804      	bhi.n	8005bd4 <create_name+0xdc>
				b |= 2;
 8005bca:	7ffb      	ldrb	r3, [r7, #31]
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e00c      	b.n	8005bee <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8005bd4:	7fbb      	ldrb	r3, [r7, #30]
 8005bd6:	2b60      	cmp	r3, #96	; 0x60
 8005bd8:	d909      	bls.n	8005bee <create_name+0xf6>
 8005bda:	7fbb      	ldrb	r3, [r7, #30]
 8005bdc:	2b7a      	cmp	r3, #122	; 0x7a
 8005bde:	d806      	bhi.n	8005bee <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005be0:	7ffb      	ldrb	r3, [r7, #31]
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	7fbb      	ldrb	r3, [r7, #30]
 8005bea:	3b20      	subs	r3, #32
 8005bec:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	613a      	str	r2, [r7, #16]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	7fba      	ldrb	r2, [r7, #30]
 8005bfa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005bfc:	e7a1      	b.n	8005b42 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	441a      	add	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005c08:	7fbb      	ldrb	r3, [r7, #30]
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d801      	bhi.n	8005c12 <create_name+0x11a>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	e000      	b.n	8005c14 <create_name+0x11c>
 8005c12:	2300      	movs	r3, #0
 8005c14:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <create_name+0x128>
 8005c1c:	2306      	movs	r3, #6
 8005c1e:	e023      	b.n	8005c68 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2be5      	cmp	r3, #229	; 0xe5
 8005c26:	d102      	bne.n	8005c2e <create_name+0x136>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2205      	movs	r2, #5
 8005c2c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d102      	bne.n	8005c3a <create_name+0x142>
 8005c34:	7ffb      	ldrb	r3, [r7, #31]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005c3a:	7ffb      	ldrb	r3, [r7, #31]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d103      	bne.n	8005c4c <create_name+0x154>
 8005c44:	7fbb      	ldrb	r3, [r7, #30]
 8005c46:	f043 0310 	orr.w	r3, r3, #16
 8005c4a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8005c4c:	7ffb      	ldrb	r3, [r7, #31]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d103      	bne.n	8005c5e <create_name+0x166>
 8005c56:	7fbb      	ldrb	r3, [r7, #30]
 8005c58:	f043 0308 	orr.w	r3, r3, #8
 8005c5c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	330b      	adds	r3, #11
 8005c62:	7fba      	ldrb	r2, [r7, #30]
 8005c64:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005c66:	2300      	movs	r3, #0
#endif
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3720      	adds	r7, #32
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08007300 	.word	0x08007300
 8005c74:	0800727c 	.word	0x0800727c

08005c78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b2f      	cmp	r3, #47	; 0x2f
 8005c88:	d003      	beq.n	8005c92 <follow_path+0x1a>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b5c      	cmp	r3, #92	; 0x5c
 8005c90:	d102      	bne.n	8005c98 <follow_path+0x20>
		path++;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b1f      	cmp	r3, #31
 8005ca6:	d80a      	bhi.n	8005cbe <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005ca8:	2100      	movs	r1, #0
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fc74 	bl	8005598 <dir_sdi>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005cbc:	e045      	b.n	8005d4a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ff18 	bl	8005af8 <create_name>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d136      	bne.n	8005d40 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fe88 	bl	80059e8 <dir_find>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ce2:	7adb      	ldrb	r3, [r3, #11]
 8005ce4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d128      	bne.n	8005d44 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d123      	bne.n	8005d44 <follow_path+0xcc>
 8005cfc:	2305      	movs	r3, #5
 8005cfe:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005d00:	e020      	b.n	8005d44 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11d      	bne.n	8005d48 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d12:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	330b      	adds	r3, #11
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8005d22:	2305      	movs	r3, #5
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	e010      	b.n	8005d4a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fe06 	bl	8005942 <ld_clust>
 8005d36:	4602      	mov	r2, r0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d3e:	e7be      	b.n	8005cbe <follow_path+0x46>
			if (res != FR_OK) break;
 8005d40:	bf00      	nop
 8005d42:	e002      	b.n	8005d4a <follow_path+0xd2>
				break;
 8005d44:	bf00      	nop
 8005d46:	e000      	b.n	8005d4a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d48:	bf00      	nop
		}
	}

	return res;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d60:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d031      	beq.n	8005dce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e002      	b.n	8005d78 <get_ldnumber+0x24>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	3301      	adds	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d903      	bls.n	8005d88 <get_ldnumber+0x34>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b3a      	cmp	r3, #58	; 0x3a
 8005d86:	d1f4      	bne.n	8005d72 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b3a      	cmp	r3, #58	; 0x3a
 8005d8e:	d11c      	bne.n	8005dca <get_ldnumber+0x76>
			tp = *path;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	60fa      	str	r2, [r7, #12]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	3b30      	subs	r3, #48	; 0x30
 8005da0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b09      	cmp	r3, #9
 8005da6:	d80e      	bhi.n	8005dc6 <get_ldnumber+0x72>
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d10a      	bne.n	8005dc6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d107      	bne.n	8005dc6 <get_ldnumber+0x72>
					vol = (int)i;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	e002      	b.n	8005dd0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005dce:	693b      	ldr	r3, [r7, #16]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr
	...

08005ddc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe ffdd 	bl	8004dba <move_window>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <check_fs+0x2e>
		return 3;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e04a      	b.n	8005ea0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e10:	3301      	adds	r3, #1
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b21a      	sxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	4313      	orrs	r3, r2
 8005e22:	b21b      	sxth	r3, r3
 8005e24:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <check_fs+0xcc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d001      	beq.n	8005e2e <check_fs+0x52>
		return 2;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e038      	b.n	8005ea0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3336      	adds	r3, #54	; 0x36
 8005e32:	3303      	adds	r3, #3
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	061a      	lsls	r2, r3, #24
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3336      	adds	r3, #54	; 0x36
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	4313      	orrs	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	3236      	adds	r2, #54	; 0x36
 8005e48:	3201      	adds	r2, #1
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	0212      	lsls	r2, r2, #8
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	4a13      	ldr	r2, [pc, #76]	; (8005eac <check_fs+0xd0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <check_fs+0x8a>
		return 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e01c      	b.n	8005ea0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3352      	adds	r3, #82	; 0x52
 8005e6a:	3303      	adds	r3, #3
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	061a      	lsls	r2, r3, #24
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3352      	adds	r3, #82	; 0x52
 8005e74:	3302      	adds	r3, #2
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	3252      	adds	r2, #82	; 0x52
 8005e80:	3201      	adds	r2, #1
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	0212      	lsls	r2, r2, #8
 8005e86:	4313      	orrs	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e94:	4a05      	ldr	r2, [pc, #20]	; (8005eac <check_fs+0xd0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <check_fs+0xc2>
		return 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <check_fs+0xc4>

	return 1;
 8005e9e:	2301      	movs	r3, #1
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	ffffaa55 	.word	0xffffaa55
 8005eac:	00544146 	.word	0x00544146

08005eb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b096      	sub	sp, #88	; 0x58
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f7ff ff45 	bl	8005d54 <get_ldnumber>
 8005eca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da01      	bge.n	8005ed6 <find_volume+0x26>
 8005ed2:	230b      	movs	r3, #11
 8005ed4:	e2a8      	b.n	8006428 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ed6:	4a9d      	ldr	r2, [pc, #628]	; (800614c <find_volume+0x29c>)
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ede:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <find_volume+0x3a>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	e29e      	b.n	8006428 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01b      	beq.n	8005f32 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe fc47 	bl	8004794 <disk_status>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10c      	bne.n	8005f32 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <find_volume+0x7e>
 8005f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	e27c      	b.n	8006428 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e27a      	b.n	8006428 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fc3c 	bl	80047c8 <disk_initialize>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005f56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f62:	2303      	movs	r3, #3
 8005f64:	e260      	b.n	8006428 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <find_volume+0xcc>
 8005f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8005f78:	230a      	movs	r3, #10
 8005f7a:	e255      	b.n	8006428 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005f80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f84:	f7ff ff2a 	bl	8005ddc <check_fs>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d153      	bne.n	800603e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005f96:	2300      	movs	r3, #0
 8005f98:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9a:	e028      	b.n	8005fee <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005fa6:	4413      	add	r3, r2
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	3304      	adds	r3, #4
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d012      	beq.n	8005fda <find_volume+0x12a>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	330b      	adds	r3, #11
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	061a      	lsls	r2, r3, #24
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	330a      	adds	r3, #10
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc8:	3209      	adds	r2, #9
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	0212      	lsls	r2, r2, #8
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	3208      	adds	r2, #8
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	e000      	b.n	8005fdc <find_volume+0x12c>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	3358      	adds	r3, #88	; 0x58
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fea:	3301      	adds	r3, #1
 8005fec:	643b      	str	r3, [r7, #64]	; 0x40
 8005fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d9d3      	bls.n	8005f9c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <find_volume+0x154>
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006000:	3b01      	subs	r3, #1
 8006002:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	3358      	adds	r3, #88	; 0x58
 800600a:	443b      	add	r3, r7
 800600c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006010:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <find_volume+0x174>
 8006018:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800601a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800601c:	f7ff fede 	bl	8005ddc <check_fs>
 8006020:	4603      	mov	r3, r0
 8006022:	e000      	b.n	8006026 <find_volume+0x176>
 8006024:	2302      	movs	r3, #2
 8006026:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800602a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <find_volume+0x18e>
 8006032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006034:	3301      	adds	r3, #1
 8006036:	643b      	str	r3, [r7, #64]	; 0x40
 8006038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603a:	2b03      	cmp	r3, #3
 800603c:	d9e2      	bls.n	8006004 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800603e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006042:	2b03      	cmp	r3, #3
 8006044:	d101      	bne.n	800604a <find_volume+0x19a>
 8006046:	2301      	movs	r3, #1
 8006048:	e1ee      	b.n	8006428 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800604a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <find_volume+0x1a6>
 8006052:	230d      	movs	r3, #13
 8006054:	e1e8      	b.n	8006428 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	7b1b      	ldrb	r3, [r3, #12]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	b21a      	sxth	r2, r3
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	7adb      	ldrb	r3, [r3, #11]
 8006062:	b21b      	sxth	r3, r3
 8006064:	4313      	orrs	r3, r2
 8006066:	b21b      	sxth	r3, r3
 8006068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606c:	d001      	beq.n	8006072 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800606e:	230d      	movs	r3, #13
 8006070:	e1da      	b.n	8006428 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	7ddb      	ldrb	r3, [r3, #23]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	b21a      	sxth	r2, r3
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	7d9b      	ldrb	r3, [r3, #22]
 800607e:	b21b      	sxth	r3, r3
 8006080:	4313      	orrs	r3, r2
 8006082:	b21b      	sxth	r3, r3
 8006084:	b29b      	uxth	r3, r3
 8006086:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d112      	bne.n	80060b4 <find_volume+0x204>
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006094:	061a      	lsls	r2, r3, #24
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	4313      	orrs	r3, r2
 80060a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060a2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80060a6:	0212      	lsls	r2, r2, #8
 80060a8:	4313      	orrs	r3, r2
 80060aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ac:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80060b0:	4313      	orrs	r3, r2
 80060b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	7c1a      	ldrb	r2, [r3, #16]
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d006      	beq.n	80060de <find_volume+0x22e>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d001      	beq.n	80060de <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 80060da:	230d      	movs	r3, #13
 80060dc:	e1a4      	b.n	8006428 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80060e4:	461a      	mov	r2, r3
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	7b5a      	ldrb	r2, [r3, #13]
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <find_volume+0x268>
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006108:	461a      	mov	r2, r3
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006110:	3b01      	subs	r3, #1
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8006118:	230d      	movs	r3, #13
 800611a:	e185      	b.n	8006428 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	7c9b      	ldrb	r3, [r3, #18]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b21a      	sxth	r2, r3
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	7c5b      	ldrb	r3, [r3, #17]
 8006128:	b21b      	sxth	r3, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	b21b      	sxth	r3, r3
 800612e:	b29a      	uxth	r2, r3
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006146:	230d      	movs	r3, #13
 8006148:	e16e      	b.n	8006428 <find_volume+0x578>
 800614a:	bf00      	nop
 800614c:	200043a8 	.word	0x200043a8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	7d1b      	ldrb	r3, [r3, #20]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b21a      	sxth	r2, r3
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	7cdb      	ldrb	r3, [r3, #19]
 800615c:	b21b      	sxth	r3, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	b21b      	sxth	r3, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006168:	2b00      	cmp	r3, #0
 800616a:	d112      	bne.n	8006192 <find_volume+0x2e2>
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006172:	061a      	lsls	r2, r3, #24
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	4313      	orrs	r3, r2
 800617e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006180:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006184:	0212      	lsls	r2, r2, #8
 8006186:	4313      	orrs	r3, r2
 8006188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800618a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800618e:	4313      	orrs	r3, r2
 8006190:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	7bdb      	ldrb	r3, [r3, #15]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	b21a      	sxth	r2, r3
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	7b9b      	ldrb	r3, [r3, #14]
 800619e:	b21b      	sxth	r3, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	b21b      	sxth	r3, r3
 80061a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80061a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <find_volume+0x300>
 80061ac:	230d      	movs	r3, #13
 80061ae:	e13b      	b.n	8006428 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80061b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	4413      	add	r3, r2
 80061b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061b8:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80061bc:	0912      	lsrs	r2, r2, #4
 80061be:	b292      	uxth	r2, r2
 80061c0:	4413      	add	r3, r2
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d201      	bcs.n	80061d0 <find_volume+0x320>
 80061cc:	230d      	movs	r3, #13
 80061ce:	e12b      	b.n	8006428 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80061d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80061dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <find_volume+0x33c>
 80061e8:	230d      	movs	r3, #13
 80061ea:	e11d      	b.n	8006428 <find_volume+0x578>
	fmt = FS_FAT12;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d902      	bls.n	8006202 <find_volume+0x352>
 80061fc:	2302      	movs	r3, #2
 80061fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006208:	4293      	cmp	r3, r2
 800620a:	d902      	bls.n	8006212 <find_volume+0x362>
 800620c:	2303      	movs	r3, #3
 800620e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006220:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006224:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006228:	441a      	add	r2, r3
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	441a      	add	r2, r3
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800623c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006240:	2b03      	cmp	r3, #3
 8006242:	d121      	bne.n	8006288 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <find_volume+0x3a2>
 800624e:	230d      	movs	r3, #13
 8006250:	e0ea      	b.n	8006428 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006258:	061a      	lsls	r2, r3, #24
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	4313      	orrs	r3, r2
 8006264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006266:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800626a:	0212      	lsls	r2, r2, #8
 800626c:	4313      	orrs	r3, r2
 800626e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006270:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006274:	431a      	orrs	r2, r3
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	647b      	str	r3, [r7, #68]	; 0x44
 8006286:	e025      	b.n	80062d4 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <find_volume+0x3e6>
 8006292:	230d      	movs	r3, #13
 8006294:	e0c8      	b.n	8006428 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800629c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629e:	441a      	add	r2, r3
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d104      	bne.n	80062b8 <find_volume+0x408>
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	e00c      	b.n	80062d2 <find_volume+0x422>
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80062be:	4613      	mov	r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	085a      	lsrs	r2, r3, #1
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80062d2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80062da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80062e0:	0a5b      	lsrs	r3, r3, #9
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d201      	bcs.n	80062ea <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80062e6:	230d      	movs	r3, #13
 80062e8:	e09e      	b.n	8006428 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f04f 32ff 	mov.w	r2, #4294967295
 80062f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800630c:	2b03      	cmp	r3, #3
 800630e:	d177      	bne.n	8006400 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006316:	021b      	lsls	r3, r3, #8
 8006318:	b21a      	sxth	r2, r3
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006320:	b21b      	sxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b21b      	sxth	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	d16a      	bne.n	8006400 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800632a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632c:	3301      	adds	r3, #1
 800632e:	4619      	mov	r1, r3
 8006330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006332:	f7fe fd42 	bl	8004dba <move_window>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d161      	bne.n	8006400 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	b21a      	sxth	r2, r3
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006354:	b21b      	sxth	r3, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	b21b      	sxth	r3, r3
 800635a:	4a35      	ldr	r2, [pc, #212]	; (8006430 <find_volume+0x580>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d14f      	bne.n	8006400 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	061a      	lsls	r2, r3, #24
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	789b      	ldrb	r3, [r3, #2]
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	4313      	orrs	r3, r2
 800636e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006370:	7852      	ldrb	r2, [r2, #1]
 8006372:	0212      	lsls	r2, r2, #8
 8006374:	4313      	orrs	r3, r2
 8006376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	4313      	orrs	r3, r2
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <find_volume+0x584>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d13e      	bne.n	8006400 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006388:	061a      	lsls	r2, r3, #24
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	4313      	orrs	r3, r2
 8006394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006396:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800639a:	0212      	lsls	r2, r2, #8
 800639c:	4313      	orrs	r3, r2
 800639e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80063a4:	4313      	orrs	r3, r2
 80063a6:	4a24      	ldr	r2, [pc, #144]	; (8006438 <find_volume+0x588>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d129      	bne.n	8006400 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80063b2:	061a      	lsls	r2, r3, #24
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80063ba:	041b      	lsls	r3, r3, #16
 80063bc:	4313      	orrs	r3, r2
 80063be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80063c4:	0212      	lsls	r2, r2, #8
 80063c6:	4313      	orrs	r3, r2
 80063c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ca:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80063ce:	431a      	orrs	r2, r3
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80063dc:	061a      	lsls	r2, r3, #24
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	4313      	orrs	r3, r2
 80063e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ea:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80063ee:	0212      	lsls	r2, r2, #8
 80063f0:	4313      	orrs	r3, r2
 80063f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80063f8:	431a      	orrs	r2, r3
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006406:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800640a:	4b0c      	ldr	r3, [pc, #48]	; (800643c <find_volume+0x58c>)
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	3301      	adds	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <find_volume+0x58c>)
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <find_volume+0x58c>)
 8006418:	881a      	ldrh	r2, [r3, #0]
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006422:	f7fe fc57 	bl	8004cd4 <clear_lock>
#endif

	return FR_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3758      	adds	r7, #88	; 0x58
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	ffffaa55 	.word	0xffffaa55
 8006434:	41615252 	.word	0x41615252
 8006438:	61417272 	.word	0x61417272
 800643c:	200043ac 	.word	0x200043ac

08006440 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d022      	beq.n	8006498 <validate+0x58>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01d      	beq.n	8006498 <validate+0x58>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006462:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <validate+0x58>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006470:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800647a:	429a      	cmp	r2, r3
 800647c:	d10c      	bne.n	8006498 <validate+0x58>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006484:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe f983 	bl	8004794 <disk_status>
 800648e:	4603      	mov	r3, r0
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8006498:	2309      	movs	r3, #9
 800649a:	e000      	b.n	800649e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80064ba:	f107 0310 	add.w	r3, r7, #16
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fc48 	bl	8005d54 <get_ldnumber>
 80064c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da01      	bge.n	80064d0 <f_mount+0x28>
 80064cc:	230b      	movs	r3, #11
 80064ce:	e02d      	b.n	800652c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80064d0:	4a18      	ldr	r2, [pc, #96]	; (8006534 <f_mount+0x8c>)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80064e0:	69b8      	ldr	r0, [r7, #24]
 80064e2:	f7fe fbf7 	bl	8004cd4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	490d      	ldr	r1, [pc, #52]	; (8006534 <f_mount+0x8c>)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <f_mount+0x6a>
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d001      	beq.n	8006516 <f_mount+0x6e>
 8006512:	2300      	movs	r3, #0
 8006514:	e00a      	b.n	800652c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006516:	f107 0108 	add.w	r1, r7, #8
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	2200      	movs	r2, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fcc5 	bl	8005eb0 <find_volume>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800652a:	7dfb      	ldrb	r3, [r7, #23]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200043a8 	.word	0x200043a8

08006538 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800653e:	af00      	add	r7, sp, #0
 8006540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006544:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006548:	6018      	str	r0, [r3, #0]
 800654a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800654e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8006552:	6019      	str	r1, [r3, #0]
 8006554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006558:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800655c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800655e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006562:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <f_open+0x38>
 800656c:	2309      	movs	r3, #9
 800656e:	e257      	b.n	8006a20 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8006570:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006574:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006580:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006584:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006588:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800658c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	f002 021f 	and.w	r2, r2, #31
 8006596:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006598:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800659c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	f107 0320 	add.w	r3, r7, #32
 80065b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fc7b 	bl	8005eb0 <find_volume>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80065c0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 8229 	bne.w	8006a1c <f_open+0x4e4>
		INIT_BUF(dj);
 80065ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80065d2:	f107 0214 	add.w	r2, r7, #20
 80065d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80065da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065de:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	f107 0320 	add.w	r3, r7, #32
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fb44 	bl	8005c78 <follow_path>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80065f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065fa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80065fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006602:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006606:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800660a:	2b00      	cmp	r3, #0
 800660c:	d11d      	bne.n	800664a <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800660e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <f_open+0xe6>
				res = FR_INVALID_NAME;
 8006616:	2306      	movs	r3, #6
 8006618:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800661c:	e015      	b.n	800664a <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800661e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006622:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	f107 0320 	add.w	r3, r7, #32
 800663c:	4611      	mov	r1, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe f9be 	bl	80049c0 <chk_lock>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800664a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800664e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 031c 	and.w	r3, r3, #28
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80e6 	beq.w	800682a <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800665e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006662:	2b00      	cmp	r3, #0
 8006664:	d027      	beq.n	80066b6 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006666:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800666a:	2b04      	cmp	r3, #4
 800666c:	d10e      	bne.n	800668c <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800666e:	f7fe fa13 	bl	8004a98 <enq_lock>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d006      	beq.n	8006686 <f_open+0x14e>
 8006678:	f107 0320 	add.w	r3, r7, #32
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fa02 	bl	8005a86 <dir_register>
 8006682:	4603      	mov	r3, r0
 8006684:	e000      	b.n	8006688 <f_open+0x150>
 8006686:	2312      	movs	r3, #18
 8006688:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800668c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006690:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006694:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006698:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	f042 0208 	orr.w	r2, r2, #8
 80066a2:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80066a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80066ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066b0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80066b4:	e017      	b.n	80066e6 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80066b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80066ba:	330b      	adds	r3, #11
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 0311 	and.w	r3, r3, #17
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <f_open+0x196>
					res = FR_DENIED;
 80066c6:	2307      	movs	r3, #7
 80066c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80066cc:	e00b      	b.n	80066e6 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80066ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066d2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <f_open+0x1ae>
						res = FR_EXIST;
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80066e6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f040 80c1 	bne.w	8006872 <f_open+0x33a>
 80066f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066f4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 80b7 	beq.w	8006872 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8006704:	f7fd ffa4 	bl	8004650 <get_fattime>
 8006708:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800670c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006710:	330e      	adds	r3, #14
 8006712:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800671e:	b29b      	uxth	r3, r3
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006728:	330f      	adds	r3, #15
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006732:	0c1a      	lsrs	r2, r3, #16
 8006734:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006738:	3310      	adds	r3, #16
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8006742:	0e1a      	lsrs	r2, r3, #24
 8006744:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006748:	3311      	adds	r3, #17
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800674e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006752:	330b      	adds	r3, #11
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006758:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800675c:	331c      	adds	r3, #28
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006766:	331d      	adds	r3, #29
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006770:	331e      	adds	r3, #30
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800677a:	331f      	adds	r3, #31
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006784:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800678c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff f8d6 	bl	8005942 <ld_clust>
 8006796:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800679a:	2100      	movs	r1, #0
 800679c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80067a0:	f7ff f8fc 	bl	800599c <st_clust>
				dj.fs->wflag = 1;
 80067a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80067b6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d059      	beq.n	8006872 <f_open+0x33a>
					dw = dj.fs->winsect;
 80067be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067ca:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80067ce:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80067d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067d6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067de:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fdad 	bl	8005342 <remove_chain>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80067ee:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d13d      	bne.n	8006872 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80067f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067fa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80067fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006802:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8006806:	3a01      	subs	r2, #1
 8006808:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800680c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006810:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006814:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006818:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe facc 	bl	8004dba <move_window>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006828:	e023      	b.n	8006872 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800682a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11f      	bne.n	8006872 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006832:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006836:	330b      	adds	r3, #11
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <f_open+0x312>
					res = FR_NO_FILE;
 8006842:	2304      	movs	r3, #4
 8006844:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006848:	e013      	b.n	8006872 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800684a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800684e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <f_open+0x33a>
 800685c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006860:	330b      	adds	r3, #11
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <f_open+0x33a>
						res = FR_DENIED;
 800686c:	2307      	movs	r3, #7
 800686e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8006872:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006876:	2b00      	cmp	r3, #0
 8006878:	d153      	bne.n	8006922 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800687a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800687e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800688c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006890:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006894:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006898:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	f042 0220 	orr.w	r2, r2, #32
 80068a2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80068a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80068ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068b0:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80068b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80068c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80068d0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80068d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068d8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	f107 0320 	add.w	r3, r7, #32
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe f8f3 	bl	8004ae0 <inc_lock>
 80068fa:	4602      	mov	r2, r0
 80068fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006900:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800690a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800690e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <f_open+0x3ea>
 800691c:	2302      	movs	r3, #2
 800691e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8006922:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006926:	2b00      	cmp	r3, #0
 8006928:	d178      	bne.n	8006a1c <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800692a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800692e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006938:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006946:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006952:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006956:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800695a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800695e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe ffed 	bl	8005942 <ld_clust>
 8006968:	4602      	mov	r2, r0
 800696a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006978:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800697c:	331f      	adds	r3, #31
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	061a      	lsls	r2, r3, #24
 8006982:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006986:	331e      	adds	r3, #30
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	041b      	lsls	r3, r3, #16
 800698c:	4313      	orrs	r3, r2
 800698e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006992:	321d      	adds	r2, #29
 8006994:	7812      	ldrb	r2, [r2, #0]
 8006996:	0212      	lsls	r2, r2, #8
 8006998:	4313      	orrs	r3, r2
 800699a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800699e:	321c      	adds	r2, #28
 80069a0:	7812      	ldrb	r2, [r2, #0]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80069b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80069c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80069d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80069e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80069ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80069ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80069fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a00:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a0a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a12:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8006a1c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b08c      	sub	sp, #48	; 0x30
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff fcfc 	bl	8006440 <validate>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006a4c:	7ffb      	ldrb	r3, [r7, #31]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <f_read+0x2c>
 8006a52:	7ffb      	ldrb	r3, [r7, #31]
 8006a54:	e150      	b.n	8006cf8 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8006a66:	e147      	b.n	8006cf8 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006a76:	2307      	movs	r3, #7
 8006a78:	e13e      	b.n	8006cf8 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	f240 812d 	bls.w	8006cee <f_read+0x2c4>
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006a98:	e129      	b.n	8006cee <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f040 80f2 	bne.w	8006c8e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006ab0:	0a5b      	lsrs	r3, r3, #9
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006aba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d139      	bne.n	8006b40 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ade:	e018      	b.n	8006b12 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006af0:	4619      	mov	r1, r3
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7fe fd1c 	bl	8005530 <clmt_clust>
 8006af8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006afa:	e00a      	b.n	8006b12 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f7fe fa51 	bl	8004fb2 <get_fat>
 8006b10:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d805      	bhi.n	8006b24 <f_read+0xfa>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006b20:	2302      	movs	r3, #2
 8006b22:	e0e9      	b.n	8006cf8 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d105      	bne.n	8006b38 <f_read+0x10e>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0df      	b.n	8006cf8 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fe fa0e 	bl	8004f70 <clust2sect>
 8006b54:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <f_read+0x13e>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006b64:	2302      	movs	r3, #2
 8006b66:	e0c7      	b.n	8006cf8 <f_read+0x2ce>
			sect += csect;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0a5b      	lsrs	r3, r3, #9
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d046      	beq.n	8006c0a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006b7c:	7dfa      	ldrb	r2, [r7, #23]
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	4413      	add	r3, r2
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006b88:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d908      	bls.n	8006ba2 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b96:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ba8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	6a39      	ldr	r1, [r7, #32]
 8006bb2:	f7fd fe2f 	bl	8004814 <disk_read>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e097      	b.n	8006cf8 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d015      	beq.n	8006c02 <f_read+0x1d8>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d90d      	bls.n	8006c02 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	025b      	lsls	r3, r3, #9
 8006bf2:	6a3a      	ldr	r2, [r7, #32]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fd fe67 	bl	80048d0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	025b      	lsls	r3, r3, #9
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006c08:	e05b      	b.n	8006cc2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d037      	beq.n	8006c86 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01d      	beq.n	8006c60 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006c36:	2301      	movs	r3, #1
 8006c38:	f7fd fe0c 	bl	8004854 <disk_write>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e054      	b.n	8006cf8 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c66:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	f7fd fdd0 	bl	8004814 <disk_read>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006c82:	2301      	movs	r3, #1
 8006c84:	e038      	b.n	8006cf8 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d901      	bls.n	8006caa <f_read+0x280>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6a38      	ldr	r0, [r7, #32]
 8006cbe:	f7fd fe07 	bl	80048d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006cc2:	6a3a      	ldr	r2, [r7, #32]
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	4413      	add	r3, r2
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	441a      	add	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	441a      	add	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f aed2 	bne.w	8006a9a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3730      	adds	r7, #48	; 0x30
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fb99 	bl	8006440 <validate>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 80a8 	bne.w	8006e6a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80a0 	beq.w	8006e6a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d019      	beq.n	8006d6c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d3e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f7fd fd82 	bl	8004854 <disk_write>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006d56:	2301      	movs	r3, #1
 8006d58:	e088      	b.n	8006e6c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fe f81d 	bl	8004dba <move_window>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d16f      	bne.n	8006e6a <f_sync+0x16a>
				dir = fp->dir_ptr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d90:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	330b      	adds	r3, #11
 8006d96:	781a      	ldrb	r2, [r3, #0]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	330b      	adds	r3, #11
 8006d9c:	f042 0220 	orr.w	r2, r2, #32
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	331c      	adds	r3, #28
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	331d      	adds	r3, #29
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006dcc:	0c1a      	lsrs	r2, r3, #16
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	331e      	adds	r3, #30
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006ddc:	0e1a      	lsrs	r2, r3, #24
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	331f      	adds	r3, #31
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dec:	4619      	mov	r1, r3
 8006dee:	6938      	ldr	r0, [r7, #16]
 8006df0:	f7fe fdd4 	bl	800599c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006df4:	f7fd fc2c 	bl	8004650 <get_fattime>
 8006df8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	3316      	adds	r3, #22
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3317      	adds	r3, #23
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	0c1a      	lsrs	r2, r3, #16
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	3318      	adds	r3, #24
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	0e1a      	lsrs	r2, r3, #24
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3319      	adds	r3, #25
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	3312      	adds	r3, #18
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3313      	adds	r3, #19
 8006e38:	2200      	movs	r2, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006e42:	f023 0320 	bic.w	r3, r3, #32
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fd ffd8 	bl	8004e16 <sync_fs>
 8006e66:	4603      	mov	r3, r0
 8006e68:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff3f 	bl	8006d00 <f_sync>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d116      	bne.n	8006eba <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fad7 	bl	8006440 <validate>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10e      	bne.n	8006eba <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fd fed2 	bl	8004c4c <dec_lock>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006eda:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006edc:	7a5b      	ldrb	r3, [r3, #9]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d831      	bhi.n	8006f48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006ee6:	7a5b      	ldrb	r3, [r3, #9]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006eee:	2100      	movs	r1, #0
 8006ef0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006ef2:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006ef4:	7a5b      	ldrb	r3, [r3, #9]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006f02:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006f04:	7a5b      	ldrb	r3, [r3, #9]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006f0c:	4413      	add	r3, r2
 8006f0e:	79fa      	ldrb	r2, [r7, #7]
 8006f10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f12:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006f14:	7a5b      	ldrb	r3, [r3, #9]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	b2d1      	uxtb	r1, r2
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	; (8006f54 <FATFS_LinkDriverEx+0x90>)
 8006f1e:	7251      	strb	r1, [r2, #9]
 8006f20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f22:	7dbb      	ldrb	r3, [r7, #22]
 8006f24:	3330      	adds	r3, #48	; 0x30
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	223a      	movs	r2, #58	; 0x3a
 8006f32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3302      	adds	r3, #2
 8006f38:	222f      	movs	r2, #47	; 0x2f
 8006f3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	3303      	adds	r3, #3
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	200043c8 	.word	0x200043c8

08006f58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f62:	2200      	movs	r2, #0
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ffac 	bl	8006ec4 <FATFS_LinkDriverEx>
 8006f6c:	4603      	mov	r3, r0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <SD_initialize+0x38>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8006f88:	f7fd fb6a 	bl	8004660 <BSP_SD_Init>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d107      	bne.n	8006fa2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <SD_initialize+0x38>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <SD_initialize+0x38>)
 8006fa0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006fa2:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <SD_initialize+0x38>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b2db      	uxtb	r3, r3
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000051 	.word	0x20000051

08006fb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <SD_status+0x38>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006fc4:	f7fd fba0 	bl	8004708 <BSP_SD_GetCardState>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d107      	bne.n	8006fde <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <SD_status+0x38>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <SD_status+0x38>)
 8006fdc:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8006fde:	4b03      	ldr	r3, [pc, #12]	; (8006fec <SD_status+0x38>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b2db      	uxtb	r3, r3
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000051 	.word	0x20000051

08006ff0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <SD_read+0x54>)
 8007006:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <SD_read+0x58>)
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	68b8      	ldr	r0, [r7, #8]
 8007010:	f7fd fb3e 	bl	8004690 <BSP_SD_ReadBlocks>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10e      	bne.n	8007038 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800701a:	e006      	b.n	800702a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1e5a      	subs	r2, r3, #1
 8007020:	613a      	str	r2, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <SD_read+0x3a>
      {
        return RES_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e007      	b.n	800703a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800702a:	f7fd fb6d 	bl	8004708 <BSP_SD_GetCardState>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f3      	bne.n	800701c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	000186a0 	.word	0x000186a0
 8007048:	05f5e100 	.word	0x05f5e100

0800704c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <SD_write+0x54>)
 8007062:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <SD_write+0x58>)
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f7fd fb2e 	bl	80046cc <BSP_SD_WriteBlocks>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10e      	bne.n	8007094 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007076:	e006      	b.n	8007086 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1e5a      	subs	r2, r3, #1
 800707c:	613a      	str	r2, [r7, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <SD_write+0x3a>
      {
        return RES_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e007      	b.n	8007096 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007086:	f7fd fb3f 	bl	8004708 <BSP_SD_GetCardState>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f3      	bne.n	8007078 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	000186a0 	.word	0x000186a0
 80070a4:	05f5e100 	.word	0x05f5e100

080070a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	603a      	str	r2, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
 80070b4:	460b      	mov	r3, r1
 80070b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <SD_ioctl+0xa8>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <SD_ioctl+0x28>
 80070cc:	2303      	movs	r3, #3
 80070ce:	e03b      	b.n	8007148 <SD_ioctl+0xa0>
  
  switch (cmd)
 80070d0:	79bb      	ldrb	r3, [r7, #6]
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d833      	bhi.n	800713e <SD_ioctl+0x96>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <SD_ioctl+0x34>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080070ed 	.word	0x080070ed
 80070e0:	080070f5 	.word	0x080070f5
 80070e4:	0800710d 	.word	0x0800710d
 80070e8:	08007127 	.word	0x08007127
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80070f2:	e027      	b.n	8007144 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fd fb15 	bl	8004728 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800710a:	e01b      	b.n	8007144 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800710c:	f107 030c 	add.w	r3, r7, #12
 8007110:	4618      	mov	r0, r3
 8007112:	f7fd fb09 	bl	8004728 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	b29a      	uxth	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007124:	e00e      	b.n	8007144 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007126:	f107 030c 	add.w	r3, r7, #12
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd fafc 	bl	8004728 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8007130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800713c:	e002      	b.n	8007144 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800713e:	2304      	movs	r3, #4
 8007140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8007144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007148:	4618      	mov	r0, r3
 800714a:	3730      	adds	r7, #48	; 0x30
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000051 	.word	0x20000051

08007154 <__libc_init_array>:
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	2600      	movs	r6, #0
 8007158:	4d0c      	ldr	r5, [pc, #48]	; (800718c <__libc_init_array+0x38>)
 800715a:	4c0d      	ldr	r4, [pc, #52]	; (8007190 <__libc_init_array+0x3c>)
 800715c:	1b64      	subs	r4, r4, r5
 800715e:	10a4      	asrs	r4, r4, #2
 8007160:	42a6      	cmp	r6, r4
 8007162:	d109      	bne.n	8007178 <__libc_init_array+0x24>
 8007164:	f000 f832 	bl	80071cc <_init>
 8007168:	2600      	movs	r6, #0
 800716a:	4d0a      	ldr	r5, [pc, #40]	; (8007194 <__libc_init_array+0x40>)
 800716c:	4c0a      	ldr	r4, [pc, #40]	; (8007198 <__libc_init_array+0x44>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	42a6      	cmp	r6, r4
 8007174:	d105      	bne.n	8007182 <__libc_init_array+0x2e>
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	f855 3b04 	ldr.w	r3, [r5], #4
 800717c:	4798      	blx	r3
 800717e:	3601      	adds	r6, #1
 8007180:	e7ee      	b.n	8007160 <__libc_init_array+0xc>
 8007182:	f855 3b04 	ldr.w	r3, [r5], #4
 8007186:	4798      	blx	r3
 8007188:	3601      	adds	r6, #1
 800718a:	e7f2      	b.n	8007172 <__libc_init_array+0x1e>
 800718c:	08007394 	.word	0x08007394
 8007190:	08007394 	.word	0x08007394
 8007194:	08007394 	.word	0x08007394
 8007198:	08007398 	.word	0x08007398

0800719c <memcmp>:
 800719c:	b510      	push	{r4, lr}
 800719e:	3901      	subs	r1, #1
 80071a0:	4402      	add	r2, r0
 80071a2:	4290      	cmp	r0, r2
 80071a4:	d101      	bne.n	80071aa <memcmp+0xe>
 80071a6:	2000      	movs	r0, #0
 80071a8:	e005      	b.n	80071b6 <memcmp+0x1a>
 80071aa:	7803      	ldrb	r3, [r0, #0]
 80071ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d001      	beq.n	80071b8 <memcmp+0x1c>
 80071b4:	1b18      	subs	r0, r3, r4
 80071b6:	bd10      	pop	{r4, pc}
 80071b8:	3001      	adds	r0, #1
 80071ba:	e7f2      	b.n	80071a2 <memcmp+0x6>

080071bc <memset>:
 80071bc:	4603      	mov	r3, r0
 80071be:	4402      	add	r2, r0
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d100      	bne.n	80071c6 <memset+0xa>
 80071c4:	4770      	bx	lr
 80071c6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ca:	e7f9      	b.n	80071c0 <memset+0x4>

080071cc <_init>:
 80071cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ce:	bf00      	nop
 80071d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071d2:	bc08      	pop	{r3}
 80071d4:	469e      	mov	lr, r3
 80071d6:	4770      	bx	lr

080071d8 <_fini>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr
