
christmas-2023__master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008150  08008150  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08008150  08008150  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008150  08008150  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043cc  20000060  080081b8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000442c  080081b8  0002442c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d5a  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc2  00000000  00000000  00033de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00036da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00038090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc03  00000000  00000000  00039200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016852  00000000  00000000  00055e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5119  00000000  00000000  0006c655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011176e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e74  00000000  00000000  001117c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	08007f70 	.word	0x08007f70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	08007f70 	.word	0x08007f70

08000224 <HAL_I2S_TxCpltCallback>:
volatile uint16_t signal_buff2[4096];

char *fileNames[] = {"blank.wav", "yard.wav", "shit.wav", "gift.wav", "nut.wav", "grace.wav",
					"dump.wav", "treeBig.wav", "kma.wav", "winterMorn.wav", "rant.wav"};

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if(end_of_file_reached)
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <HAL_I2S_TxCpltCallback+0x4c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d118      	bne.n	8000268 <HAL_I2S_TxCpltCallback+0x44>
        return;

    volatile uint16_t* temp = signal_play_buff;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	60fb      	str	r3, [r7, #12]
    signal_play_buff = signal_read_buff;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000242:	6013      	str	r3, [r2, #0]
    signal_read_buff = temp;
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <HAL_I2S_TxCpltCallback+0x54>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6013      	str	r3, [r2, #0]
//
//    for(int i = 0; i < 4096; i++) {
//    	signal_play_buff[i] = (float)signal_play_buff[i] * volume;
//    }

    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 800024a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024e:	60bb      	str	r3, [r7, #8]
    HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_play_buff, nsamples);
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_I2S_TxCpltCallback+0x50>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	68ba      	ldr	r2, [r7, #8]
 8000256:	b292      	uxth	r2, r2
 8000258:	4619      	mov	r1, r3
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_I2S_TxCpltCallback+0x58>)
 800025c:	f002 f904 	bl	8002468 <HAL_I2S_Transmit_IT>
    read_next_chunk = true;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <HAL_I2S_TxCpltCallback+0x5c>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e000      	b.n	800026a <HAL_I2S_TxCpltCallback+0x46>
        return;
 8000268:	bf00      	nop
}
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200003e8 	.word	0x200003e8
 8000274:	200003ec 	.word	0x200003ec
 8000278:	200003f0 	.word	0x200003f0
 800027c:	200000ac 	.word	0x200000ac
 8000280:	200003e9 	.word	0x200003e9

08000284 <playWavFile>:

int playWavFile(const char* fname) {
 8000284:	b580      	push	{r7, lr}
 8000286:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800028a:	af00      	add	r7, sp, #0
 800028c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000290:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000294:	6018      	str	r0, [r3, #0]

    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 8000296:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800029a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800029e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002a2:	2201      	movs	r2, #1
 80002a4:	6819      	ldr	r1, [r3, #0]
 80002a6:	f007 f819 	bl	80072dc <f_open>
 80002aa:	4603      	mov	r3, r0
 80002ac:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 80002b0:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <playWavFile+0x38>
        return EXIT_FAILURE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	e1fa      	b.n	80006b2 <playWavFile+0x42e>
    }


    unsigned int bytesRead;
    uint8_t header[44];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 80002bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002c0:	f107 0108 	add.w	r1, r7, #8
 80002c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80002c8:	222c      	movs	r2, #44	; 0x2c
 80002ca:	f007 fa80 	bl	80077ce <f_read>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 80002d4:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d006      	beq.n	80002ea <playWavFile+0x66>
        f_close(&file);
 80002dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002e0:	4618      	mov	r0, r3
 80002e2:	f007 fc99 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e1e3      	b.n	80006b2 <playWavFile+0x42e>
    }

    if(memcmp((const char*)header, "RIFF", 4) != 0) {
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2204      	movs	r2, #4
 80002f0:	49c7      	ldr	r1, [pc, #796]	; (8000610 <playWavFile+0x38c>)
 80002f2:	4618      	mov	r0, r3
 80002f4:	f007 fe24 	bl	8007f40 <memcmp>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d006      	beq.n	800030c <playWavFile+0x88>
        f_close(&file);
 80002fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000302:	4618      	mov	r0, r3
 8000304:	f007 fc88 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 8000308:	2301      	movs	r3, #1
 800030a:	e1d2      	b.n	80006b2 <playWavFile+0x42e>
    }

    if(memcmp((const char*)header + 8, "WAVEfmt ", 8) != 0) {
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	3308      	adds	r3, #8
 8000312:	2208      	movs	r2, #8
 8000314:	49bf      	ldr	r1, [pc, #764]	; (8000614 <playWavFile+0x390>)
 8000316:	4618      	mov	r0, r3
 8000318:	f007 fe12 	bl	8007f40 <memcmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d006      	beq.n	8000330 <playWavFile+0xac>
        f_close(&file);
 8000322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000326:	4618      	mov	r0, r3
 8000328:	f007 fc76 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 800032c:	2301      	movs	r3, #1
 800032e:	e1c0      	b.n	80006b2 <playWavFile+0x42e>
    }

    if(memcmp((const char*)header + 36, "data", 4) != 0) {
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	3324      	adds	r3, #36	; 0x24
 8000336:	2204      	movs	r2, #4
 8000338:	49b7      	ldr	r1, [pc, #732]	; (8000618 <playWavFile+0x394>)
 800033a:	4618      	mov	r0, r3
 800033c:	f007 fe00 	bl	8007f40 <memcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d006      	beq.n	8000354 <playWavFile+0xd0>
        f_close(&file);
 8000346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800034a:	4618      	mov	r0, r3
 800034c:	f007 fc64 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 8000350:	2301      	movs	r3, #1
 8000352:	e1ae      	b.n	80006b2 <playWavFile+0x42e>
    }

//    uint32_t fileSize = 8 + (header[4] | (header[5] << 8) | (header[6] << 16) | (header[7] << 24));
    uint32_t headerSizeLeft = header[16] | (header[17] << 8) | (header[18] << 16) | (header[19] << 24);
 8000354:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000358:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800035c:	7c1b      	ldrb	r3, [r3, #16]
 800035e:	461a      	mov	r2, r3
 8000360:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000364:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000368:	7c5b      	ldrb	r3, [r3, #17]
 800036a:	021b      	lsls	r3, r3, #8
 800036c:	431a      	orrs	r2, r3
 800036e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000372:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000376:	7c9b      	ldrb	r3, [r3, #18]
 8000378:	041b      	lsls	r3, r3, #16
 800037a:	431a      	orrs	r2, r3
 800037c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000380:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000384:	7cdb      	ldrb	r3, [r3, #19]
 8000386:	061b      	lsls	r3, r3, #24
 8000388:	4313      	orrs	r3, r2
 800038a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    uint16_t compression = header[20] | (header[21] << 8);
 800038e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000392:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000396:	7d1b      	ldrb	r3, [r3, #20]
 8000398:	b21a      	sxth	r2, r3
 800039a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800039e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003a2:	7d5b      	ldrb	r3, [r3, #21]
 80003a4:	021b      	lsls	r3, r3, #8
 80003a6:	b21b      	sxth	r3, r3
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	f8a7 327a 	strh.w	r3, [r7, #634]	; 0x27a
    uint16_t channelsNum = header[22] | (header[23] << 8);
 80003b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003b4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003b8:	7d9b      	ldrb	r3, [r3, #22]
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003c0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003c4:	7ddb      	ldrb	r3, [r3, #23]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	b21b      	sxth	r3, r3
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b21b      	sxth	r3, r3
 80003ce:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
    uint32_t sampleRate = header[24] | (header[25] << 8) | (header[26] << 16) | (header[27] << 24);
 80003d2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003d6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003da:	7e1b      	ldrb	r3, [r3, #24]
 80003dc:	461a      	mov	r2, r3
 80003de:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003e2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003e6:	7e5b      	ldrb	r3, [r3, #25]
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	431a      	orrs	r2, r3
 80003ec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003f0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80003f4:	7e9b      	ldrb	r3, [r3, #26]
 80003f6:	041b      	lsls	r3, r3, #16
 80003f8:	431a      	orrs	r2, r3
 80003fa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80003fe:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000402:	7edb      	ldrb	r3, [r3, #27]
 8000404:	061b      	lsls	r3, r3, #24
 8000406:	4313      	orrs	r3, r2
 8000408:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    uint32_t bytesPerSecond = header[28] | (header[29] << 8) | (header[30] << 16) | (header[31] << 24);
 800040c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000410:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000414:	7f1b      	ldrb	r3, [r3, #28]
 8000416:	461a      	mov	r2, r3
 8000418:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800041c:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000420:	7f5b      	ldrb	r3, [r3, #29]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	431a      	orrs	r2, r3
 8000426:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800042a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800042e:	7f9b      	ldrb	r3, [r3, #30]
 8000430:	041b      	lsls	r3, r3, #16
 8000432:	431a      	orrs	r2, r3
 8000434:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000438:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800043c:	7fdb      	ldrb	r3, [r3, #31]
 800043e:	061b      	lsls	r3, r3, #24
 8000440:	4313      	orrs	r3, r2
 8000442:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
    uint16_t bytesPerSample = header[32] | (header[33] << 8);
 8000446:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800044a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800044e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000452:	b21a      	sxth	r2, r3
 8000454:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000458:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800045c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000460:	021b      	lsls	r3, r3, #8
 8000462:	b21b      	sxth	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b21b      	sxth	r3, r3
 8000468:	f8a7 326e 	strh.w	r3, [r7, #622]	; 0x26e
    uint16_t bitsPerSamplePerChannel = header[34] | (header[35] << 8);
 800046c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000470:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000474:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000478:	b21a      	sxth	r2, r3
 800047a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800047e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8000482:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000486:	021b      	lsls	r3, r3, #8
 8000488:	b21b      	sxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b21b      	sxth	r3, r3
 800048e:	f8a7 326c 	strh.w	r3, [r7, #620]	; 0x26c
    uint32_t dataSize = header[40] | (header[41] << 8) | (header[42] << 16) | (header[43] << 24);
 8000492:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000496:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800049a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800049e:	461a      	mov	r2, r3
 80004a0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004a4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80004a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80004ac:	021b      	lsls	r3, r3, #8
 80004ae:	431a      	orrs	r2, r3
 80004b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004b4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80004b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80004bc:	041b      	lsls	r3, r3, #16
 80004be:	431a      	orrs	r2, r3
 80004c0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004c4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80004c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	4313      	orrs	r3, r2
 80004d0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
//        "Data size: %ld\r\n"
//        "------------------\r\n",
//        fileSize, headerSizeLeft, compression, channelsNum, sampleRate, bytesPerSecond, bytesPerSample,
//        bitsPerSamplePerChannel, dataSize);

    if(headerSizeLeft != 16) {
 80004d4:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80004d8:	2b10      	cmp	r3, #16
 80004da:	d006      	beq.n	80004ea <playWavFile+0x266>
        //UART_Printf("Wrong `headerSizeLeft` value, 16 expected\r\n");
        f_close(&file);
 80004dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004e0:	4618      	mov	r0, r3
 80004e2:	f007 fb99 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e0e3      	b.n	80006b2 <playWavFile+0x42e>
    }

    if(compression != 1) {
 80004ea:	f8b7 327a 	ldrh.w	r3, [r7, #634]	; 0x27a
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d006      	beq.n	8000500 <playWavFile+0x27c>
        //UART_Printf("Wrong `compression` value, 1 expected\r\n");
        f_close(&file);
 80004f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 fb8e 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e0d8      	b.n	80006b2 <playWavFile+0x42e>
    }

    if(channelsNum != 2) {
 8000500:	f8b7 3278 	ldrh.w	r3, [r7, #632]	; 0x278
 8000504:	2b02      	cmp	r3, #2
 8000506:	d006      	beq.n	8000516 <playWavFile+0x292>
        //UART_Printf("Wrong `channelsNum` value, 2 expected\r\n");
        f_close(&file);
 8000508:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800050c:	4618      	mov	r0, r3
 800050e:	f007 fb83 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 8000512:	2301      	movs	r3, #1
 8000514:	e0cd      	b.n	80006b2 <playWavFile+0x42e>
    }

    if((sampleRate != 44100) || (bytesPerSample != 4) || (bitsPerSamplePerChannel != 16) || (bytesPerSecond != 44100*2*2)
 8000516:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800051a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800051e:	4293      	cmp	r3, r2
 8000520:	d111      	bne.n	8000546 <playWavFile+0x2c2>
 8000522:	f8b7 326e 	ldrh.w	r3, [r7, #622]	; 0x26e
 8000526:	2b04      	cmp	r3, #4
 8000528:	d10d      	bne.n	8000546 <playWavFile+0x2c2>
 800052a:	f8b7 326c 	ldrh.w	r3, [r7, #620]	; 0x26c
 800052e:	2b10      	cmp	r3, #16
 8000530:	d109      	bne.n	8000546 <playWavFile+0x2c2>
 8000532:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8000536:	4a39      	ldr	r2, [pc, #228]	; (800061c <playWavFile+0x398>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d104      	bne.n	8000546 <playWavFile+0x2c2>
       || (dataSize < sizeof(signal_buff1) + sizeof(signal_buff2))) {
 800053c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000544:	d206      	bcs.n	8000554 <playWavFile+0x2d0>
        //UART_Printf("Wrong file format, 16 bit file with sample rate 44100 expected\r\n");
        f_close(&file);
 8000546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fb64 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 8000550:	2301      	movs	r3, #1
 8000552:	e0ae      	b.n	80006b2 <playWavFile+0x42e>
    }

    res = f_read(&file, (uint8_t*)signal_buff1, sizeof(signal_buff1), &bytesRead);
 8000554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000558:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800055c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000560:	492f      	ldr	r1, [pc, #188]	; (8000620 <playWavFile+0x39c>)
 8000562:	f007 f934 	bl	80077ce <f_read>
 8000566:	4603      	mov	r3, r0
 8000568:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 800056c:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <playWavFile+0x2fe>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 8000574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000578:	4618      	mov	r0, r3
 800057a:	f007 fb4d 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 800057e:	2301      	movs	r3, #1
 8000580:	e097      	b.n	80006b2 <playWavFile+0x42e>
    }

    res = f_read(&file, (uint8_t*)signal_buff2, sizeof(signal_buff2), &bytesRead);
 8000582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000586:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800058a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058e:	4925      	ldr	r1, [pc, #148]	; (8000624 <playWavFile+0x3a0>)
 8000590:	f007 f91d 	bl	80077ce <f_read>
 8000594:	4603      	mov	r3, r0
 8000596:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 800059a:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <playWavFile+0x32c>
        //UART_Printf("f_read() failed, res = %d\r\n", res);
        f_close(&file);
 80005a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fb36 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e080      	b.n	80006b2 <playWavFile+0x42e>
    }

    read_next_chunk = true;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <playWavFile+0x3a4>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
    end_of_file_reached = false;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <playWavFile+0x3a8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
    signal_play_buff = signal_buff1;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <playWavFile+0x3ac>)
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <playWavFile+0x39c>)
 80005c0:	601a      	str	r2, [r3, #0]
    signal_read_buff = signal_buff2;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <playWavFile+0x3b0>)
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <playWavFile+0x3a0>)
 80005c6:	601a      	str	r2, [r3, #0]

    HAL_StatusTypeDef hal_res;
    int nsamples = sizeof(signal_buff1) / sizeof(signal_buff1[0]);
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    hal_res = HAL_I2S_Transmit_IT(&hi2s2, (uint16_t*)signal_buff1, nsamples);
 80005d0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	4911      	ldr	r1, [pc, #68]	; (8000620 <playWavFile+0x39c>)
 80005da:	4817      	ldr	r0, [pc, #92]	; (8000638 <playWavFile+0x3b4>)
 80005dc:	f001 ff44 	bl	8002468 <HAL_I2S_Transmit_IT>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
    // hal_res = HAL_I2S_Transmit(&hi2s2, (uint16_t*)signal_buff1, nsamples, 2000);
    if(hal_res != HAL_OK) {
 80005e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d047      	beq.n	800067e <playWavFile+0x3fa>
        //UART_Printf("I2S - HAL_I2S_Transmit failed, hal_res = %d!\r\n", hal_res);
        f_close(&file);
 80005ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 fb10 	bl	8007c18 <f_close>
        return EXIT_FAILURE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e05a      	b.n	80006b2 <playWavFile+0x42e>
    }

    while(dataSize >= sizeof(signal_buff1)) {
        if(!read_next_chunk) {
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <playWavFile+0x3a4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f083 0301 	eor.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d017      	beq.n	800063c <playWavFile+0x3b8>
            continue;
 800060c:	e037      	b.n	800067e <playWavFile+0x3fa>
 800060e:	bf00      	nop
 8000610:	08008008 	.word	0x08008008
 8000614:	08008010 	.word	0x08008010
 8000618:	0800801c 	.word	0x0800801c
 800061c:	0002b110 	.word	0x0002b110
 8000620:	200003f4 	.word	0x200003f4
 8000624:	200023f4 	.word	0x200023f4
 8000628:	200003e9 	.word	0x200003e9
 800062c:	200003e8 	.word	0x200003e8
 8000630:	200003ec 	.word	0x200003ec
 8000634:	200003f0 	.word	0x200003f0
 8000638:	200000ac 	.word	0x200000ac
        }

        read_next_chunk = false;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <playWavFile+0x438>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]

        res = f_read(&file, (uint8_t*)signal_read_buff, sizeof(signal_buff1), &bytesRead);
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <playWavFile+0x43c>)
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800064a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800064e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000652:	f007 f8bc 	bl	80077ce <f_read>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
        if(res != FR_OK) {
 800065c:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 8000660:	2b00      	cmp	r3, #0
 8000662:	d006      	beq.n	8000672 <playWavFile+0x3ee>
            //UART_Printf("f_read() failed, res = %d\r\n", res);
            f_close(&file);
 8000664:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000668:	4618      	mov	r0, r3
 800066a:	f007 fad5 	bl	8007c18 <f_close>
            return EXIT_FAILURE;
 800066e:	2301      	movs	r3, #1
 8000670:	e01f      	b.n	80006b2 <playWavFile+0x42e>
        }

        dataSize -= sizeof(signal_buff1);
 8000672:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000676:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800067a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
    while(dataSize >= sizeof(signal_buff1)) {
 800067e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	d2b9      	bcs.n	80005fc <playWavFile+0x378>
    }

    end_of_file_reached = true;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <playWavFile+0x440>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]

    res = f_close(&file);
 800068e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fac0 	bl	8007c18 <f_close>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
    if(res != FR_OK) {
 800069e:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <playWavFile+0x426>
        //UART_Printf("f_close() failed, res = %d\r\n", res);
        return EXIT_FAILURE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e003      	b.n	80006b2 <playWavFile+0x42e>
    }

    playIndex = 0;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <playWavFile+0x444>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]

    return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	f507 7722 	add.w	r7, r7, #648	; 0x288
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200003e9 	.word	0x200003e9
 80006c0:	200003f0 	.word	0x200003f0
 80006c4:	200003e8 	.word	0x200003e8
 80006c8:	200001b4 	.word	0x200001b4

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fd87 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f881 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f9b3 	bl	8000a44 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80006de:	f000 f943 	bl	8000968 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80006e2:	f004 fe75 	bl	80053d0 <MX_FATFS_Init>
  MX_I2S2_Init();
 80006e6:	f000 f917 	bl	8000918 <MX_I2S2_Init>
  MX_ADC1_Init();
 80006ea:	f000 f8d7 	bl	800089c <MX_ADC1_Init>
  MX_TIM4_Init();
 80006ee:	f000 f95b 	bl	80009a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80006f2:	482d      	ldr	r0, [pc, #180]	; (80007a8 <main+0xdc>)
 80006f4:	f001 fa3a 	bl	8001b6c <HAL_ADCEx_Calibration_Start>

  // Start timer to check ADC on interrupts
  HAL_TIM_Base_Start_IT(&htim4);
 80006f8:	482c      	ldr	r0, [pc, #176]	; (80007ac <main+0xe0>)
 80006fa:	f003 fd63 	bl	80041c4 <HAL_TIM_Base_Start_IT>

  // Clear any existing shift register data
  	HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[0]);
 80006fe:	4b2c      	ldr	r3, [pc, #176]	; (80007b0 <main+0xe4>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4a2c      	ldr	r2, [pc, #176]	; (80007b4 <main+0xe8>)
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	482b      	ldr	r0, [pc, #172]	; (80007b8 <main+0xec>)
 800070a:	f001 fd96 	bl	800223a <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, shiftMCLR, GPIOPinSet[1]);
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <main+0xe4>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <main+0xe8>)
 8000714:	7852      	ldrb	r2, [r2, #1]
 8000716:	4619      	mov	r1, r3
 8000718:	4827      	ldr	r0, [pc, #156]	; (80007b8 <main+0xec>)
 800071a:	f001 fd8e 	bl	800223a <HAL_GPIO_WritePin>

  	// Store cleared data and Enable output
  	HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[1]);
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <main+0xf0>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <main+0xe8>)
 8000724:	7852      	ldrb	r2, [r2, #1]
 8000726:	4619      	mov	r1, r3
 8000728:	4823      	ldr	r0, [pc, #140]	; (80007b8 <main+0xec>)
 800072a:	f001 fd86 	bl	800223a <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, shiftStoreClock, GPIOPinSet[0]);
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <main+0xf0>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <main+0xe8>)
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	4619      	mov	r1, r3
 8000738:	481f      	ldr	r0, [pc, #124]	; (80007b8 <main+0xec>)
 800073a:	f001 fd7e 	bl	800223a <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB, shiftOutputEnable, GPIOPinSet[0]);
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0xf4>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <main+0xe8>)
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	481b      	ldr	r0, [pc, #108]	; (80007b8 <main+0xec>)
 800074a:	f001 fd76 	bl	800223a <HAL_GPIO_WritePin>

  FRESULT res = f_mount(&fs, "XMAS-23", 1);
 800074e:	2201      	movs	r2, #1
 8000750:	491c      	ldr	r1, [pc, #112]	; (80007c4 <main+0xf8>)
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <main+0xfc>)
 8000754:	f006 fd7a 	bl	800724c <f_mount>
 8000758:	4603      	mov	r3, r0
 800075a:	71fb      	strb	r3, [r7, #7]
	 if(res != FR_OK) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <main+0x9a>
	   return EXIT_FAILURE;
 8000762:	2301      	movs	r3, #1
 8000764:	e01c      	b.n	80007a0 <main+0xd4>
  while (1)
  {

//	  HAL_GPIO_WritePin(GPIOC, gain_3DB_N, GPIOPinSet[0]);
//
	  playWavFile("canS.wav");
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <main+0x100>)
 8000768:	f7ff fd8c 	bl	8000284 <playWavFile>
	  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <main+0x104>)
 800076e:	f001 fd95 	bl	800229c <HAL_I2S_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <main+0xb0>
	 	   Error_Handler();
 8000778:	f000 fb68 	bl	8000e4c <Error_Handler>
//	  HAL_GPIO_WritePin(GPIOC, gain_15DB, GPIOPinSet[0]);
//
//	  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
//		   Error_Handler();

	  playWavFile(fileNames[playIndex]);
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <main+0x108>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x10c>)
 8000784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd7b 	bl	8000284 <playWavFile>
	  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <main+0x104>)
 8000790:	f001 fd84 	bl	800229c <HAL_I2S_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0e5      	beq.n	8000766 <main+0x9a>
		   Error_Handler();
 800079a:	f000 fb57 	bl	8000e4c <Error_Handler>
	  playWavFile("canS.wav");
 800079e:	e7e2      	b.n	8000766 <main+0x9a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000007c 	.word	0x2000007c
 80007ac:	2000016c 	.word	0x2000016c
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000024 	.word	0x20000024
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000002 	.word	0x20000002
 80007c4:	08008024 	.word	0x08008024
 80007c8:	200001b8 	.word	0x200001b8
 80007cc:	0800802c 	.word	0x0800802c
 80007d0:	200000ac 	.word	0x200000ac
 80007d4:	200001b4 	.word	0x200001b4
 80007d8:	20000028 	.word	0x20000028

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 fbb8 	bl	8007f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081e:	2301      	movs	r3, #1
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800082c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000836:	4618      	mov	r0, r3
 8000838:	f001 ff5e 	bl	80026f8 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000842:	f000 fb03 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	2101      	movs	r1, #1
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f9ca 	bl	8002bfc <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800086e:	f000 faed 	bl	8000e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2S2;
 8000872:	2306      	movs	r3, #6
 8000874:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800087a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fb36 	bl	8002ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800088e:	f000 fadd 	bl	8000e4c <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3758      	adds	r7, #88	; 0x58
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_ADC1_Init+0x74>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_ADC1_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_ADC1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_ADC1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_ADC1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_ADC1_Init+0x74>)
 80008c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_ADC1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_ADC1_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_ADC1_Init+0x74>)
 80008da:	f000 fd09 	bl	80012f0 <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 fab2 	bl	8000e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_ADC1_Init+0x74>)
 80008fa:	f000 ffa3 	bl	8001844 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000904:	f000 faa2 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000007c 	.word	0x2000007c
 8000914:	40012400 	.word	0x40012400

08000918 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_I2S2_Init+0x48>)
 800091e:	4a11      	ldr	r2, [pc, #68]	; (8000964 <MX_I2S2_Init+0x4c>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2S2_Init+0x48>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_I2S2_Init+0x48>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_I2S2_Init+0x48>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_I2S2_Init+0x48>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_I2S2_Init+0x48>)
 800093e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000942:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_I2S2_Init+0x48>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_I2S2_Init+0x48>)
 800094c:	f001 fca6 	bl	800229c <HAL_I2S_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8000956:	f000 fa79 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000ac 	.word	0x200000ac
 8000964:	40003800 	.word	0x40003800

08000968 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 800096e:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <MX_SDIO_SD_Init+0x3c>)
 8000970:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <MX_SDIO_SD_Init+0x38>)
 8000992:	2204      	movs	r2, #4
 8000994:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	200000e8 	.word	0x200000e8
 80009a4:	40018000 	.word	0x40018000

080009a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <MX_TIM4_Init+0x98>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4801-1;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009cc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80009d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_TIM4_Init+0x94>)
 80009ee:	f003 fb99 	bl	8004124 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80009f8:	f000 fa28 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM4_Init+0x94>)
 8000a0a:	f003 fd43 	bl	8004494 <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a14:	f000 fa1a 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM4_Init+0x94>)
 8000a26:	f003 ff31 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 fa0c 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000016c 	.word	0x2000016c
 8000a40:	40000800 	.word	0x40000800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b62      	ldr	r3, [pc, #392]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a61      	ldr	r2, [pc, #388]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a5e:	f043 0320 	orr.w	r3, r3, #32
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0320 	and.w	r3, r3, #32
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a70:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a5b      	ldr	r2, [pc, #364]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b59      	ldr	r3, [pc, #356]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b56      	ldr	r3, [pc, #344]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <MX_GPIO_Init+0x1a0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GAIN_3DB_NOT_Pin|GAIN_6DB_NOT_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2103      	movs	r1, #3
 8000abc:	484a      	ldr	r0, [pc, #296]	; (8000be8 <MX_GPIO_Init+0x1a4>)
 8000abe:	f001 fbbc 	bl	800223a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GAIN_12DB_Pin|GAIN_15DB_Pin|STAT_LED_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	212c      	movs	r1, #44	; 0x2c
 8000ac6:	4848      	ldr	r0, [pc, #288]	; (8000be8 <MX_GPIO_Init+0x1a4>)
 8000ac8:	f001 fbb7 	bl	800223a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2S_AMP_SD_GPIO_Port, I2S_AMP_SD_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	4846      	ldr	r0, [pc, #280]	; (8000bec <MX_GPIO_Init+0x1a8>)
 8000ad2:	f001 fbb2 	bl	800223a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHIFT_OE_Pin|SHIFT_DATA_OUT_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f640 4107 	movw	r1, #3079	; 0xc07
 8000adc:	4844      	ldr	r0, [pc, #272]	; (8000bf0 <MX_GPIO_Init+0x1ac>)
 8000ade:	f001 fbac 	bl	800223a <HAL_GPIO_WritePin>
                          |SHIFT_MCLR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GAIN_3DB_NOT_Pin GAIN_6DB_NOT_Pin GAIN_12DB_Pin GAIN_15DB_Pin
                           STAT_LED_Pin */
  GPIO_InitStruct.Pin = GAIN_3DB_NOT_Pin|GAIN_6DB_NOT_Pin|GAIN_12DB_Pin|GAIN_15DB_Pin
 8000ae2:	232f      	movs	r3, #47	; 0x2f
 8000ae4:	613b      	str	r3, [r7, #16]
                          |STAT_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	4619      	mov	r1, r3
 8000af8:	483b      	ldr	r0, [pc, #236]	; (8000be8 <MX_GPIO_Init+0x1a4>)
 8000afa:	f001 f9f3 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S_AMP_SD_Pin */
  GPIO_InitStruct.Pin = I2S_AMP_SD_Pin;
 8000afe:	2304      	movs	r3, #4
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S_AMP_SD_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4835      	ldr	r0, [pc, #212]	; (8000bec <MX_GPIO_Init+0x1a8>)
 8000b16:	f001 f9e5 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_3_Pin BUTTON_4_Pin BUTTON_5_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_3_Pin|BUTTON_4_Pin|BUTTON_5_Pin;
 8000b1a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482f      	ldr	r0, [pc, #188]	; (8000bec <MX_GPIO_Init+0x1a8>)
 8000b30:	f001 f9d8 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin;
 8000b34:	2310      	movs	r3, #16
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4619      	mov	r1, r3
 8000b46:	4828      	ldr	r0, [pc, #160]	; (8000be8 <MX_GPIO_Init+0x1a4>)
 8000b48:	f001 f9cc 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHIFT_OE_Pin SHIFT_DATA_OUT_Pin SHIFT_DATA_CLK_Pin SHIFT_STORE_CLK_Pin
                           SHIFT_MCLR_Pin */
  GPIO_InitStruct.Pin = SHIFT_OE_Pin|SHIFT_DATA_OUT_Pin|SHIFT_DATA_CLK_Pin|SHIFT_STORE_CLK_Pin
 8000b4c:	f640 4307 	movw	r3, #3079	; 0xc07
 8000b50:	613b      	str	r3, [r7, #16]
                          |SHIFT_MCLR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4619      	mov	r1, r3
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0x1ac>)
 8000b66:	f001 f9bd 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = SDIO_CARD_DETECT_Pin;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDIO_CARD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481a      	ldr	r0, [pc, #104]	; (8000be8 <MX_GPIO_Init+0x1a4>)
 8000b7e:	f001 f9b1 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_10_Pin BUTTON_8_Pin */
  GPIO_InitStruct.Pin = BUTTON_10_Pin|BUTTON_8_Pin;
 8000b82:	2328      	movs	r3, #40	; 0x28
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_GPIO_Init+0x1b0>)
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <MX_GPIO_Init+0x1ac>)
 8000b96:	f001 f9a5 	bl	8001ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	2009      	movs	r0, #9
 8000ba0:	f001 f969 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ba4:	2009      	movs	r0, #9
 8000ba6:	f001 f982 	bl	8001eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2103      	movs	r1, #3
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f001 f961 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f001 f97a 	bl	8001eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	2017      	movs	r0, #23
 8000bc0:	f001 f959 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc4:	2017      	movs	r0, #23
 8000bc6:	f001 f972 	bl	8001eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2103      	movs	r1, #3
 8000bce:	2028      	movs	r0, #40	; 0x28
 8000bd0:	f001 f951 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd4:	2028      	movs	r0, #40	; 0x28
 8000bd6:	f001 f96a 	bl	8001eae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	10110000 	.word	0x10110000

08000bf8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == buttonIn_1)
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d103      	bne.n	8000c14 <HAL_GPIO_EXTI_Callback+0x1c>
		playIndex = 1;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
	else if(GPIO_Pin == buttonIn_9)
		playIndex = 9;
	else if(GPIO_Pin == buttonIn_10)
		playIndex = 10;

}
 8000c12:	e04f      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_2)
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d103      	bne.n	8000c26 <HAL_GPIO_EXTI_Callback+0x2e>
		playIndex = 2;
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]
}
 8000c24:	e046      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_3)
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_GPIO_EXTI_Callback+0xd4>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d103      	bne.n	8000c38 <HAL_GPIO_EXTI_Callback+0x40>
		playIndex = 3;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	e03d      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_4)
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d103      	bne.n	8000c4a <HAL_GPIO_EXTI_Callback+0x52>
		playIndex = 4;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c44:	2204      	movs	r2, #4
 8000c46:	701a      	strb	r2, [r3, #0]
}
 8000c48:	e034      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_5)
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d103      	bne.n	8000c5c <HAL_GPIO_EXTI_Callback+0x64>
		playIndex = 5;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c56:	2205      	movs	r2, #5
 8000c58:	701a      	strb	r2, [r3, #0]
}
 8000c5a:	e02b      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_6)
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	88fa      	ldrh	r2, [r7, #6]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d103      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x76>
		playIndex = 6;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c68:	2206      	movs	r2, #6
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	e022      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_7)
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d103      	bne.n	8000c80 <HAL_GPIO_EXTI_Callback+0x88>
		playIndex = 7;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	701a      	strb	r2, [r3, #0]
}
 8000c7e:	e019      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_8)
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	88fa      	ldrh	r2, [r7, #6]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d103      	bne.n	8000c92 <HAL_GPIO_EXTI_Callback+0x9a>
		playIndex = 8;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	701a      	strb	r2, [r3, #0]
}
 8000c90:	e010      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_9)
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	88fa      	ldrh	r2, [r7, #6]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d103      	bne.n	8000ca4 <HAL_GPIO_EXTI_Callback+0xac>
		playIndex = 9;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000c9e:	2209      	movs	r2, #9
 8000ca0:	701a      	strb	r2, [r3, #0]
}
 8000ca2:	e007      	b.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
	else if(GPIO_Pin == buttonIn_10)
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d102      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0xbc>
		playIndex = 10;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000006 	.word	0x20000006
 8000cc4:	200001b4 	.word	0x200001b4
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000000a 	.word	0x2000000a
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	2000000e 	.word	0x2000000e
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	20000012 	.word	0x20000012
 8000ce0:	20000014 	.word	0x20000014
 8000ce4:	20000016 	.word	0x20000016
 8000ce8:	20000018 	.word	0x20000018

08000cec <resetGains>:

void resetGains() {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, gain_3DB_N, GPIOPinSet[1]);
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <resetGains+0x48>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <resetGains+0x4c>)
 8000cf6:	7852      	ldrb	r2, [r2, #1]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4810      	ldr	r0, [pc, #64]	; (8000d3c <resetGains+0x50>)
 8000cfc:	f001 fa9d 	bl	800223a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, gain_6DB_N, GPIOPinSet[1]);
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <resetGains+0x54>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <resetGains+0x4c>)
 8000d06:	7852      	ldrb	r2, [r2, #1]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <resetGains+0x50>)
 8000d0c:	f001 fa95 	bl	800223a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, gain_12DB, GPIOPinSet[0]);
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <resetGains+0x58>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <resetGains+0x4c>)
 8000d16:	7812      	ldrb	r2, [r2, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4808      	ldr	r0, [pc, #32]	; (8000d3c <resetGains+0x50>)
 8000d1c:	f001 fa8d 	bl	800223a <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, gain_15DB, GPIOPinSet[0]);
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <resetGains+0x5c>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <resetGains+0x4c>)
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <resetGains+0x50>)
 8000d2c:	f001 fa85 	bl	800223a <HAL_GPIO_WritePin>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000001a 	.word	0x2000001a
 8000d38:	20000024 	.word	0x20000024
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	2000001c 	.word	0x2000001c
 8000d44:	2000001e 	.word	0x2000001e
 8000d48:	20000020 	.word	0x20000020

08000d4c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim4)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d15c      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0xca>
  {
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8000d5c:	4832      	ldr	r0, [pc, #200]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d5e:	f000 fbb1 	bl	80014c4 <HAL_ADC_Start>

	 // Poll ADC1 Peripheral & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000d62:	2101      	movs	r1, #1
 8000d64:	4830      	ldr	r0, [pc, #192]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d66:	f000 fc5b 	bl	8001620 <HAL_ADC_PollForConversion>

	  // Read The ADC Conversion Result & Map It To Shift register
	  // Resolution = 12 bit, 2^12 = 4096
	  uint16_t ADC_Return = HAL_ADC_GetValue(&hadc1);
 8000d6a:	482f      	ldr	r0, [pc, #188]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d6c:	f000 fd5e 	bl	800182c <HAL_ADC_GetValue>
 8000d70:	4603      	mov	r3, r0
 8000d72:	81fb      	strh	r3, [r7, #14]

	  uint8_t shiftBitCurr = ADC_Return / (4096 / 8);
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	0a5b      	lsrs	r3, r3, #9
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	737b      	strb	r3, [r7, #13]
	  //shiftNewVol(shiftBit[shiftBitCurr]);

	  volume = ADC_Return / (4096 / 5);
 8000d7c:	89fa      	ldrh	r2, [r7, #14]
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d80:	fba3 1302 	umull	r1, r3, r3, r2
 8000d84:	1ad2      	subs	r2, r2, r3
 8000d86:	0852      	lsrs	r2, r2, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	0a5b      	lsrs	r3, r3, #9
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d92:	701a      	strb	r2, [r3, #0]
	  switch(volume) {
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d83e      	bhi.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0xce>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000db9 	.word	0x08000db9
 8000da8:	08000dcf 	.word	0x08000dcf
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000deb 	.word	0x08000deb
 8000db4:	08000e01 	.word	0x08000e01
	  	  case 0:
	  		  resetGains();
 8000db8:	f7ff ff98 	bl	8000cec <resetGains>
	  		  HAL_GPIO_WritePin(GPIOC, gain_3DB_N, GPIOPinSet[0]);
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481d      	ldr	r0, [pc, #116]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dc8:	f001 fa37 	bl	800223a <HAL_GPIO_WritePin>
	  		  break;
 8000dcc:	e026      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd0>
	  	  case 1:
	  		  resetGains();
 8000dce:	f7ff ff8d 	bl	8000cec <resetGains>
	  		  HAL_GPIO_WritePin(GPIOC, gain_6DB_N, GPIOPinSet[0]);
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4817      	ldr	r0, [pc, #92]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dde:	f001 fa2c 	bl	800223a <HAL_GPIO_WritePin>
	  		  break;
 8000de2:	e01b      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd0>
	  	  case 2:
	  		  resetGains();
 8000de4:	f7ff ff82 	bl	8000cec <resetGains>

	  		  break;
 8000de8:	e018      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd0>
	  	  case 3:
	  		  resetGains();
 8000dea:	f7ff ff7f 	bl	8000cec <resetGains>
	  		  HAL_GPIO_WritePin(GPIOC, gain_12DB, GPIOPinSet[1]);
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000df4:	7852      	ldrb	r2, [r2, #1]
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000dfa:	f001 fa1e 	bl	800223a <HAL_GPIO_WritePin>
	  		  break;
 8000dfe:	e00d      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd0>
	  	  case 4:
	  		  resetGains();
 8000e00:	f7ff ff74 	bl	8000cec <resetGains>
	  		  HAL_GPIO_WritePin(GPIOC, gain_15DB, GPIOPinSet[1]);
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000e0a:	7852      	ldrb	r2, [r2, #1]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000e10:	f001 fa13 	bl	800223a <HAL_GPIO_WritePin>
	  		  break;
 8000e14:	e002      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd0>
	  	  default:

	  		  break;
	  }

  }
 8000e16:	bf00      	nop
 8000e18:	e000      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0xd0>
	  		  break;
 8000e1a:	bf00      	nop
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000016c 	.word	0x2000016c
 8000e28:	2000007c 	.word	0x2000007c
 8000e2c:	40140141 	.word	0x40140141
 8000e30:	20000026 	.word	0x20000026
 8000e34:	2000001a 	.word	0x2000001a
 8000e38:	20000024 	.word	0x20000024
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	2000001c 	.word	0x2000001c
 8000e44:	2000001e 	.word	0x2000001e
 8000e48:	20000020 	.word	0x20000020

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_MspInit+0x60>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_MspInit+0x60>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000

08000ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_ADC_MspInit+0x6c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d121      	bne.n	8000f20 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_ADC_MspInit+0x70>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_ADC_MspInit+0x70>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_ADC_MspInit+0x70>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_ADC_MspInit+0x70>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_ADC_MspInit+0x70>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_ADC_MspInit+0x70>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f10:	2303      	movs	r3, #3
 8000f12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_ADC_MspInit+0x74>)
 8000f1c:	f000 ffe2 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40012400 	.word	0x40012400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800

08000f34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_I2S_MspInit+0x84>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d12c      	bne.n	8000fae <HAL_I2S_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_I2S_MspInit+0x88>)
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_I2S_MspInit+0x88>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	61d3      	str	r3, [r2, #28]
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_I2S_MspInit+0x88>)
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_I2S_MspInit+0x88>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_I2S_MspInit+0x88>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_I2S_MspInit+0x88>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000f84:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_I2S_MspInit+0x8c>)
 8000f9a:	f000 ffa3 	bl	8001ee4 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	2024      	movs	r0, #36	; 0x24
 8000fa4:	f000 ff67 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fa8:	2024      	movs	r0, #36	; 0x24
 8000faa:	f000 ff80 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40003800 	.word	0x40003800
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010c00 	.word	0x40010c00

08000fc4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a22      	ldr	r2, [pc, #136]	; (8001068 <HAL_SD_MspInit+0xa4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d13c      	bne.n	800105e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_SD_MspInit+0xa8>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	4a20      	ldr	r2, [pc, #128]	; (800106c <HAL_SD_MspInit+0xa8>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6153      	str	r3, [r2, #20]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <HAL_SD_MspInit+0xa8>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_SD_MspInit+0xa8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_SD_MspInit+0xa8>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_SD_MspInit+0xa8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_SD_MspInit+0xa8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_SD_MspInit+0xa8>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_SD_MspInit+0xa8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800102c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_SD_MspInit+0xac>)
 8001042:	f000 ff4f 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001046:	2304      	movs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4619      	mov	r1, r3
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <HAL_SD_MspInit+0xb0>)
 800105a:	f000 ff43 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40018000 	.word	0x40018000
 800106c:	40021000 	.word	0x40021000
 8001070:	40011000 	.word	0x40011000
 8001074:	40011400 	.word	0x40011400

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d113      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0x48>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_TIM_Base_MspInit+0x48>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201e      	movs	r0, #30
 80010a8:	f000 fee5 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010ac:	201e      	movs	r0, #30
 80010ae:	f000 fefe 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40000800 	.word	0x40000800
 80010c0:	40021000 	.word	0x40021000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f8b1 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_10_Pin);
 8001116:	2008      	movs	r0, #8
 8001118:	f001 f8a8 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_2_Pin);
 8001124:	2010      	movs	r0, #16
 8001126:	f001 f8a1 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}

0800112e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_8_Pin);
 8001132:	2020      	movs	r0, #32
 8001134:	f001 f89a 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8001138:	2080      	movs	r0, #128	; 0x80
 800113a:	f001 f897 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_3_Pin);
 800113e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001142:	f001 f893 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_4_Pin);
 8001146:	f44f 7000 	mov.w	r0, #512	; 0x200
 800114a:	f001 f88f 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <TIM4_IRQHandler+0x10>)
 800115a:	f003 f893 	bl	8004284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000016c 	.word	0x2000016c

08001168 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <SPI2_IRQHandler+0x10>)
 800116e:	f001 f9eb 	bl	8002548 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000ac 	.word	0x200000ac

0800117c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_5_Pin);
 8001180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001184:	f001 f872 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001198:	f7ff fff8 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800119e:	490c      	ldr	r1, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b4:	4c09      	ldr	r4, [pc, #36]	; (80011dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f006 fe99 	bl	8007ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c6:	f7ff fa81 	bl	80006cc <main>
  bx lr
 80011ca:	4770      	bx	lr
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011d4:	08008158 	.word	0x08008158
  ldr r2, =_sbss
 80011d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011dc:	2000442c 	.word	0x2000442c

080011e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC1_2_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x28>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x28>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fe33 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fe2a 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fe4b 	bl	8001eca <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 fe13 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000054 	.word	0x20000054
 8001268:	2000005c 	.word	0x2000005c
 800126c:	20000058 	.word	0x20000058

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x1c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_IncTick+0x20>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	2000005c 	.word	0x2000005c
 8001290:	200043f4 	.word	0x200043f4

08001294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <HAL_GetTick+0x10>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	200043f4 	.word	0x200043f4

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff fff0 	bl	8001294 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffe0 	bl	8001294 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000005c 	.word	0x2000005c

080012f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0ce      	b.n	80014b0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d109      	bne.n	8001334 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fdc4 	bl	8000ebc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fbd7 	bl	8001ae8 <ADC_ConversionStop_Disable>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80a9 	bne.w	800149e <HAL_ADC_Init+0x1ae>
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 80a5 	bne.w	800149e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	f043 0202 	orr.w	r2, r3, #2
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4951      	ldr	r1, [pc, #324]	; (80014b8 <HAL_ADC_Init+0x1c8>)
 8001372:	428b      	cmp	r3, r1
 8001374:	d10a      	bne.n	800138c <HAL_ADC_Init+0x9c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800137e:	d002      	beq.n	8001386 <HAL_ADC_Init+0x96>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	e004      	b.n	8001390 <HAL_ADC_Init+0xa0>
 8001386:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800138a:	e001      	b.n	8001390 <HAL_ADC_Init+0xa0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001390:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7b1b      	ldrb	r3, [r3, #12]
 8001396:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001398:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	4313      	orrs	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a8:	d003      	beq.n	80013b2 <HAL_ADC_Init+0xc2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d102      	bne.n	80013b8 <HAL_ADC_Init+0xc8>
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	e000      	b.n	80013ba <HAL_ADC_Init+0xca>
 80013b8:	2300      	movs	r3, #0
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7d1b      	ldrb	r3, [r3, #20]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d119      	bne.n	80013fc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7b1b      	ldrb	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	035a      	lsls	r2, r3, #13
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e00b      	b.n	80013fc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_ADC_Init+0x1cc>)
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	430b      	orrs	r3, r1
 8001422:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800142c:	d003      	beq.n	8001436 <HAL_ADC_Init+0x146>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d104      	bne.n	8001440 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	3b01      	subs	r3, #1
 800143c:	051b      	lsls	r3, r3, #20
 800143e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	430a      	orrs	r2, r1
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_ADC_Init+0x1d0>)
 800145c:	4013      	ands	r3, r2
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	429a      	cmp	r2, r3
 8001462:	d10b      	bne.n	800147c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800147a:	e018      	b.n	80014ae <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f023 0312 	bic.w	r3, r3, #18
 8001484:	f043 0210 	orr.w	r2, r3, #16
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800149c:	e007      	b.n	80014ae <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	f043 0210 	orr.w	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013c00 	.word	0x40013c00
 80014bc:	ffe1f7fd 	.word	0xffe1f7fd
 80014c0:	ff1f0efe 	.word	0xff1f0efe

080014c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_ADC_Start+0x1a>
 80014da:	2302      	movs	r3, #2
 80014dc:	e098      	b.n	8001610 <HAL_ADC_Start+0x14c>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 faa4 	bl	8001a34 <ADC_Enable>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 8087 	bne.w	8001606 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a41      	ldr	r2, [pc, #260]	; (8001618 <HAL_ADC_Start+0x154>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d105      	bne.n	8001522 <HAL_ADC_Start+0x5e>
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_ADC_Start+0x158>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d115      	bne.n	800154e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d026      	beq.n	800158a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001544:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800154c:	e01d      	b.n	800158a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <HAL_ADC_Start+0x158>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d004      	beq.n	800156e <HAL_ADC_Start+0xaa>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2b      	ldr	r2, [pc, #172]	; (8001618 <HAL_ADC_Start+0x154>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10d      	bne.n	800158a <HAL_ADC_Start+0xc6>
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_ADC_Start+0x158>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001582:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	f023 0206 	bic.w	r2, r3, #6
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015a2:	e002      	b.n	80015aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f06f 0202 	mvn.w	r2, #2
 80015ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ca:	d113      	bne.n	80015f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_ADC_Start+0x154>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d105      	bne.n	80015e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_ADC_Start+0x158>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d108      	bne.n	80015f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	e00c      	b.n	800160e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e003      	b.n	800160e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40012800 	.word	0x40012800
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001636:	f7ff fe2d 	bl	8001294 <HAL_GetTick>
 800163a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0d3      	b.n	800180a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d131      	bne.n	80016d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d12a      	bne.n	80016d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800167e:	e021      	b.n	80016c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001686:	d01d      	beq.n	80016c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_ADC_PollForConversion+0x7e>
 800168e:	f7ff fe01 	bl	8001294 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d212      	bcs.n	80016c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f043 0204 	orr.w	r2, r3, #4
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0a2      	b.n	800180a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0d6      	beq.n	8001680 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016d2:	e070      	b.n	80017b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016d4:	4b4f      	ldr	r3, [pc, #316]	; (8001814 <HAL_ADC_PollForConversion+0x1f4>)
 80016d6:	681c      	ldr	r4, [r3, #0]
 80016d8:	2002      	movs	r0, #2
 80016da:	f001 fcc1 	bl	8003060 <HAL_RCCEx_GetPeriphCLKFreq>
 80016de:	4603      	mov	r3, r0
 80016e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6919      	ldr	r1, [r3, #16]
 80016ea:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_ADC_PollForConversion+0x1f8>)
 80016ec:	400b      	ands	r3, r1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_ADC_PollForConversion+0x104>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_ADC_PollForConversion+0x1fc>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <HAL_ADC_PollForConversion+0x104>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6919      	ldr	r1, [r3, #16]
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_ADC_PollForConversion+0x200>)
 8001708:	400b      	ands	r3, r1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d108      	bne.n	8001720 <HAL_ADC_PollForConversion+0x100>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68d9      	ldr	r1, [r3, #12]
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_ADC_PollForConversion+0x204>)
 8001716:	400b      	ands	r3, r1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_ADC_PollForConversion+0x100>
 800171c:	2314      	movs	r3, #20
 800171e:	e020      	b.n	8001762 <HAL_ADC_PollForConversion+0x142>
 8001720:	2329      	movs	r3, #41	; 0x29
 8001722:	e01e      	b.n	8001762 <HAL_ADC_PollForConversion+0x142>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6919      	ldr	r1, [r3, #16]
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_ADC_PollForConversion+0x200>)
 800172c:	400b      	ands	r3, r1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_ADC_PollForConversion+0x120>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68d9      	ldr	r1, [r3, #12]
 8001738:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_ADC_PollForConversion+0x204>)
 800173a:	400b      	ands	r3, r1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <HAL_ADC_PollForConversion+0x13c>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6919      	ldr	r1, [r3, #16]
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <HAL_ADC_PollForConversion+0x208>)
 8001748:	400b      	ands	r3, r1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d108      	bne.n	8001760 <HAL_ADC_PollForConversion+0x140>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68d9      	ldr	r1, [r3, #12]
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_ADC_PollForConversion+0x208>)
 8001756:	400b      	ands	r3, r1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_ADC_PollForConversion+0x140>
 800175c:	2354      	movs	r3, #84	; 0x54
 800175e:	e000      	b.n	8001762 <HAL_ADC_PollForConversion+0x142>
 8001760:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001768:	e021      	b.n	80017ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d01a      	beq.n	80017a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_ADC_PollForConversion+0x168>
 8001778:	f7ff fd8c 	bl	8001294 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d20f      	bcs.n	80017a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d90b      	bls.n	80017a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f043 0204 	orr.w	r2, r3, #4
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e030      	b.n	800180a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d8d9      	bhi.n	800176a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f06f 0212 	mvn.w	r2, #18
 80017be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017da:	d115      	bne.n	8001808 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d111      	bne.n	8001808 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	20000054 	.word	0x20000054
 8001818:	24924924 	.word	0x24924924
 800181c:	00924924 	.word	0x00924924
 8001820:	12492492 	.word	0x12492492
 8001824:	00492492 	.word	0x00492492
 8001828:	00249249 	.word	0x00249249

0800182c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x20>
 8001860:	2302      	movs	r3, #2
 8001862:	e0dc      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x1da>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b06      	cmp	r3, #6
 8001872:	d81c      	bhi.n	80018ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b05      	subs	r3, #5
 8001886:	221f      	movs	r2, #31
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	4019      	ands	r1, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	3b05      	subs	r3, #5
 80018a0:	fa00 f203 	lsl.w	r2, r0, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
 80018ac:	e03c      	b.n	8001928 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d81c      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b23      	subs	r3, #35	; 0x23
 80018c8:	221f      	movs	r2, #31
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4019      	ands	r1, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	3b23      	subs	r3, #35	; 0x23
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
 80018ee:	e01b      	b.n	8001928 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	3b41      	subs	r3, #65	; 0x41
 8001902:	221f      	movs	r2, #31
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	4019      	ands	r1, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b41      	subs	r3, #65	; 0x41
 800191c:	fa00 f203 	lsl.w	r2, r0, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b09      	cmp	r3, #9
 800192e:	d91c      	bls.n	800196a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68d9      	ldr	r1, [r3, #12]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	3b1e      	subs	r3, #30
 8001942:	2207      	movs	r2, #7
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	4019      	ands	r1, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6898      	ldr	r0, [r3, #8]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	3b1e      	subs	r3, #30
 800195c:	fa00 f203 	lsl.w	r2, r0, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	e019      	b.n	800199e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6919      	ldr	r1, [r3, #16]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	2207      	movs	r2, #7
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	4019      	ands	r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6898      	ldr	r0, [r3, #8]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d003      	beq.n	80019ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019aa:	2b11      	cmp	r3, #17
 80019ac:	d132      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_ADC_ConfigChannel+0x1e4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d125      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d126      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d11a      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_ADC_ConfigChannel+0x1e8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <HAL_ADC_ConfigChannel+0x1ec>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9a      	lsrs	r2, r3, #18
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001a02:	e007      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40012400 	.word	0x40012400
 8001a2c:	20000054 	.word	0x20000054
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d040      	beq.n	8001ad4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <ADC_Enable+0xac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <ADC_Enable+0xb0>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a70:	e002      	b.n	8001a78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff fc09 	bl	8001294 <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a84:	e01f      	b.n	8001ac6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a86:	f7ff fc05 	bl	8001294 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d918      	bls.n	8001ac6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d011      	beq.n	8001ac6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	f043 0210 	orr.w	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e007      	b.n	8001ad6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d1d8      	bne.n	8001a86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000054 	.word	0x20000054
 8001ae4:	431bde83 	.word	0x431bde83

08001ae8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d12e      	bne.n	8001b60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b12:	f7ff fbbf 	bl	8001294 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b18:	e01b      	b.n	8001b52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b1a:	f7ff fbbb 	bl	8001294 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d914      	bls.n	8001b52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d10d      	bne.n	8001b52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e007      	b.n	8001b62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d0dc      	beq.n	8001b1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADCEx_Calibration_Start+0x1e>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e097      	b.n	8001cba <HAL_ADCEx_Calibration_Start+0x14e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffa8 	bl	8001ae8 <ADC_ConversionStop_Disable>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff49 	bl	8001a34 <ADC_Enable>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 8081 	bne.w	8001cb0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb6:	f023 0302 	bic.w	r3, r3, #2
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001bc2:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_ADCEx_Calibration_Start+0x158>)
 8001bc4:	681c      	ldr	r4, [r3, #0]
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f001 fa4a 	bl	8003060 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001bd2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bd4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001bd6:	e002      	b.n	8001bde <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0208 	orr.w	r2, r2, #8
 8001bf2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bf4:	f7ff fb4e 	bl	8001294 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bfa:	e01b      	b.n	8001c34 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001bfc:	f7ff fb4a 	bl	8001294 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d914      	bls.n	8001c34 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	f023 0312 	bic.w	r3, r3, #18
 8001c20:	f043 0210 	orr.w	r2, r3, #16
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e042      	b.n	8001cba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1dc      	bne.n	8001bfc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0204 	orr.w	r2, r2, #4
 8001c50:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c52:	f7ff fb1f 	bl	8001294 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c58:	e01b      	b.n	8001c92 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c5a:	f7ff fb1b 	bl	8001294 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b0a      	cmp	r3, #10
 8001c66:	d914      	bls.n	8001c92 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f023 0312 	bic.w	r3, r3, #18
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e013      	b.n	8001cba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1dc      	bne.n	8001c5a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f023 0303 	bic.w	r3, r3, #3
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000054 	.word	0x20000054

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff90 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff2d 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff42 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff90 	bl	8001db8 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5f 	bl	8001d64 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	e179      	b.n	80021ec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	f040 8168 	bne.w	80021e6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a96      	ldr	r2, [pc, #600]	; (8002174 <HAL_GPIO_Init+0x290>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d05e      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f20:	4a94      	ldr	r2, [pc, #592]	; (8002174 <HAL_GPIO_Init+0x290>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d875      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f26:	4a94      	ldr	r2, [pc, #592]	; (8002178 <HAL_GPIO_Init+0x294>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d058      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f2c:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_GPIO_Init+0x294>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d86f      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f32:	4a92      	ldr	r2, [pc, #584]	; (800217c <HAL_GPIO_Init+0x298>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d052      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f38:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_GPIO_Init+0x298>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d869      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f3e:	4a90      	ldr	r2, [pc, #576]	; (8002180 <HAL_GPIO_Init+0x29c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d04c      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f44:	4a8e      	ldr	r2, [pc, #568]	; (8002180 <HAL_GPIO_Init+0x29c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d863      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a8e      	ldr	r2, [pc, #568]	; (8002184 <HAL_GPIO_Init+0x2a0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d046      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f50:	4a8c      	ldr	r2, [pc, #560]	; (8002184 <HAL_GPIO_Init+0x2a0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d85d      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d82a      	bhi.n	8001fb0 <HAL_GPIO_Init+0xcc>
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d859      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <HAL_GPIO_Init+0x80>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001fdf 	.word	0x08001fdf
 8001f68:	08001fb9 	.word	0x08001fb9
 8001f6c:	08001fcb 	.word	0x08001fcb
 8001f70:	0800200d 	.word	0x0800200d
 8001f74:	08002013 	.word	0x08002013
 8001f78:	08002013 	.word	0x08002013
 8001f7c:	08002013 	.word	0x08002013
 8001f80:	08002013 	.word	0x08002013
 8001f84:	08002013 	.word	0x08002013
 8001f88:	08002013 	.word	0x08002013
 8001f8c:	08002013 	.word	0x08002013
 8001f90:	08002013 	.word	0x08002013
 8001f94:	08002013 	.word	0x08002013
 8001f98:	08002013 	.word	0x08002013
 8001f9c:	08002013 	.word	0x08002013
 8001fa0:	08002013 	.word	0x08002013
 8001fa4:	08002013 	.word	0x08002013
 8001fa8:	08001fc1 	.word	0x08001fc1
 8001fac:	08001fd5 	.word	0x08001fd5
 8001fb0:	4a75      	ldr	r2, [pc, #468]	; (8002188 <HAL_GPIO_Init+0x2a4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fb6:	e02c      	b.n	8002012 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	623b      	str	r3, [r7, #32]
          break;
 8001fbe:	e029      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e024      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e01f      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	330c      	adds	r3, #12
 8001fda:	623b      	str	r3, [r7, #32]
          break;
 8001fdc:	e01a      	b.n	8002014 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e013      	b.n	8002014 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	611a      	str	r2, [r3, #16]
          break;
 8001ffe:	e009      	b.n	8002014 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002000:	2308      	movs	r3, #8
 8002002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	615a      	str	r2, [r3, #20]
          break;
 800200a:	e003      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x130>
          break;
 8002012:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2bff      	cmp	r3, #255	; 0xff
 8002018:	d801      	bhi.n	800201e <HAL_GPIO_Init+0x13a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_Init+0x13e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d802      	bhi.n	8002030 <HAL_GPIO_Init+0x14c>
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x152>
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3b08      	subs	r3, #8
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	210f      	movs	r1, #15
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80c1 	beq.w	80021e6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_GPIO_Init+0x2a8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a48      	ldr	r2, [pc, #288]	; (800218c <HAL_GPIO_Init+0x2a8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_GPIO_Init+0x2a8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800207c:	4a44      	ldr	r2, [pc, #272]	; (8002190 <HAL_GPIO_Init+0x2ac>)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3c      	ldr	r2, [pc, #240]	; (8002194 <HAL_GPIO_Init+0x2b0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01f      	beq.n	80020e8 <HAL_GPIO_Init+0x204>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3b      	ldr	r2, [pc, #236]	; (8002198 <HAL_GPIO_Init+0x2b4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d019      	beq.n	80020e4 <HAL_GPIO_Init+0x200>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_GPIO_Init+0x2b8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x1fc>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <HAL_GPIO_Init+0x2bc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1f8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a38      	ldr	r2, [pc, #224]	; (80021a4 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1f4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a37      	ldr	r2, [pc, #220]	; (80021a8 <HAL_GPIO_Init+0x2c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1f0>
 80020d0:	2305      	movs	r3, #5
 80020d2:	e00a      	b.n	80020ea <HAL_GPIO_Init+0x206>
 80020d4:	2306      	movs	r3, #6
 80020d6:	e008      	b.n	80020ea <HAL_GPIO_Init+0x206>
 80020d8:	2304      	movs	r3, #4
 80020da:	e006      	b.n	80020ea <HAL_GPIO_Init+0x206>
 80020dc:	2303      	movs	r3, #3
 80020de:	e004      	b.n	80020ea <HAL_GPIO_Init+0x206>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x206>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_GPIO_Init+0x206>
 80020e8:	2300      	movs	r3, #0
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	f002 0203 	and.w	r2, r2, #3
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	4093      	lsls	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020fa:	4925      	ldr	r1, [pc, #148]	; (8002190 <HAL_GPIO_Init+0x2ac>)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	3302      	adds	r3, #2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4924      	ldr	r1, [pc, #144]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	4920      	ldr	r1, [pc, #128]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800212c:	4013      	ands	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	491a      	ldr	r1, [pc, #104]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 8002154:	4013      	ands	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d025      	beq.n	80021b0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4910      	ldr	r1, [pc, #64]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	e025      	b.n	80021be <HAL_GPIO_Init+0x2da>
 8002172:	bf00      	nop
 8002174:	10320000 	.word	0x10320000
 8002178:	10310000 	.word	0x10310000
 800217c:	10220000 	.word	0x10220000
 8002180:	10210000 	.word	0x10210000
 8002184:	10120000 	.word	0x10120000
 8002188:	10110000 	.word	0x10110000
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	40010800 	.word	0x40010800
 8002198:	40010c00 	.word	0x40010c00
 800219c:	40011000 	.word	0x40011000
 80021a0:	40011400 	.word	0x40011400
 80021a4:	40011800 	.word	0x40011800
 80021a8:	40011c00 	.word	0x40011c00
 80021ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4913      	ldr	r1, [pc, #76]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <HAL_GPIO_Init+0x324>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f ae7e 	bne.w	8001ef8 <HAL_GPIO_Init+0x14>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	372c      	adds	r7, #44	; 0x2c
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002256:	e003      	b.n	8002260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	041a      	lsls	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fcb4 	bl	8000bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0d2      	b.n	8002454 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fe36 	bl	8000f34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022de:	f023 030f 	bic.w	r3, r3, #15
 80022e2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2202      	movs	r2, #2
 80022ea:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d073      	beq.n	80023dc <HAL_I2S_Init+0x140>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80022fc:	2310      	movs	r3, #16
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e001      	b.n	8002306 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b20      	cmp	r3, #32
 800230c:	d802      	bhi.n	8002314 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
    if (hi2s->Instance == SPI2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a50      	ldr	r2, [pc, #320]	; (800245c <HAL_I2S_Init+0x1c0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d104      	bne.n	8002328 <HAL_I2S_Init+0x8c>
    {
      /* Get the source clock value: based on SPI2 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 800231e:	2004      	movs	r0, #4
 8002320:	f000 fe9e 	bl	8003060 <HAL_RCCEx_GetPeriphCLKFreq>
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	e00c      	b.n	8002342 <HAL_I2S_Init+0xa6>
    }
    else if (hi2s->Instance == SPI3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_I2S_Init+0x1c4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d104      	bne.n	800233c <HAL_I2S_Init+0xa0>
    {
      /* Get the source clock value: based on SPI3 Instance */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S3);
 8002332:	2008      	movs	r0, #8
 8002334:	f000 fe94 	bl	8003060 <HAL_RCCEx_GetPeriphCLKFreq>
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	e002      	b.n	8002342 <HAL_I2S_Init+0xa6>
    }
    else
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCC_GetSysClockFreq();
 800233c:	f000 fd48 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002340:	60f8      	str	r0, [r7, #12]
    }
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234a:	d125      	bne.n	8002398 <HAL_I2S_Init+0xfc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_I2S_Init+0xda>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	fbb2 f2f3 	udiv	r2, r2, r3
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	461a      	mov	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	3305      	adds	r3, #5
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e01f      	b.n	80023b6 <HAL_I2S_Init+0x11a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	3305      	adds	r3, #5
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e00e      	b.n	80023b6 <HAL_I2S_Init+0x11a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	461a      	mov	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	3305      	adds	r3, #5
 80023b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <HAL_I2S_Init+0x1c8>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e003      	b.n	80023e4 <HAL_I2S_Init+0x148>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80023dc:	2302      	movs	r3, #2
 80023de:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d902      	bls.n	80023f0 <HAL_I2S_Init+0x154>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2bff      	cmp	r3, #255	; 0xff
 80023ee:	d907      	bls.n	8002400 <HAL_I2S_Init+0x164>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	f043 0210 	orr.w	r2, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e029      	b.n	8002454 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	ea42 0103 	orr.w	r1, r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	430a      	orrs	r2, r1
 8002412:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800241e:	f023 030f 	bic.w	r3, r3, #15
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6851      	ldr	r1, [r2, #4]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68d2      	ldr	r2, [r2, #12]
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6992      	ldr	r2, [r2, #24]
 8002436:	430a      	orrs	r2, r1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002442:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40003800 	.word	0x40003800
 8002460:	40003c00 	.word	0x40003c00
 8002464:	cccccccd 	.word	0xcccccccd

08002468 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_I2S_Transmit_IT+0x1a>
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2S_Transmit_IT+0x1e>
  {
    return  HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e05b      	b.n	800253e <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2S_Transmit_IT+0x2e>
 8002492:	2302      	movs	r3, #2
 8002494:	e053      	b.n	800253e <HAL_I2S_Transmit_IT+0xd6>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_I2S_Transmit_IT+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
 80024b4:	e043      	b.n	800253e <HAL_I2S_Transmit_IT+0xd6>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d002      	beq.n	80024e2 <HAL_I2S_Transmit_IT+0x7a>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10a      	bne.n	80024f8 <HAL_I2S_Transmit_IT+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	845a      	strh	r2, [r3, #34]	; 0x22
 80024f6:	e005      	b.n	8002504 <HAL_I2S_Transmit_IT+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002512:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002522:	d007      	beq.n	8002534 <HAL_I2S_Transmit_IT+0xcc>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002532:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10e      	bne.n	800258a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f889 	bl	800269a <I2S_Receive_IT>
    return;
 8002588:	e044      	b.n	8002614 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_I2S_IRQHandler+0x62>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	09db      	lsrs	r3, r3, #7
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f84b 	bl	800263e <I2S_Transmit_IT>
    return;
 80025a8:	e034      	b.n	8002614 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02e      	beq.n	8002614 <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00d      	beq.n	80025de <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d0:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	f043 0202 	orr.w	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f8:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f80c 	bl	800262c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10e      	bne.n	8002692 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002682:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7fd fdc9 	bl	8000224 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	b292      	uxth	r2, r2
 80026ae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10e      	bne.n	80026f0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ff95 	bl	800261a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e272      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8087 	beq.w	8002826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002718:	4b92      	ldr	r3, [pc, #584]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b04      	cmp	r3, #4
 8002722:	d00c      	beq.n	800273e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002724:	4b8f      	ldr	r3, [pc, #572]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d112      	bne.n	8002756 <HAL_RCC_OscConfig+0x5e>
 8002730:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d10b      	bne.n	8002756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	4b89      	ldr	r3, [pc, #548]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d06c      	beq.n	8002824 <HAL_RCC_OscConfig+0x12c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d168      	bne.n	8002824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e24c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x76>
 8002760:	4b80      	ldr	r3, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7f      	ldr	r2, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e02e      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x98>
 8002776:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7a      	ldr	r2, [pc, #488]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b78      	ldr	r3, [pc, #480]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a77      	ldr	r2, [pc, #476]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0xbc>
 800279a:	4b72      	ldr	r3, [pc, #456]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a71      	ldr	r2, [pc, #452]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b6f      	ldr	r3, [pc, #444]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6e      	ldr	r2, [pc, #440]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 80027b4:	4b6b      	ldr	r3, [pc, #428]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a6a      	ldr	r2, [pc, #424]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a67      	ldr	r2, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fd5e 	bl	8001294 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fd5a 	bl	8001294 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e200      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b5d      	ldr	r3, [pc, #372]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0xe4>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fd4a 	bl	8001294 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fd46 	bl	8001294 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1ec      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x10c>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002832:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800283e:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x18c>
 800284a:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x176>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1c0      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4939      	ldr	r1, [pc, #228]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	e03a      	b.n	80028fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_RCC_OscConfig+0x270>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fcff 	bl	8001294 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289a:	f7fe fcfb 	bl	8001294 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e1a1      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4927      	ldr	r1, [pc, #156]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x270>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fcde 	bl	8001294 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe fcda 	bl	8001294 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e180      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03a      	beq.n	800297c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d019      	beq.n	8002942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7fe fcbe 	bl	8001294 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fcba 	bl	8001294 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e160      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800293a:	2001      	movs	r0, #1
 800293c:	f000 fabc 	bl	8002eb8 <RCC_Delay>
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7fe fca4 	bl	8001294 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294e:	e00f      	b.n	8002970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fca0 	bl	8001294 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d908      	bls.n	8002970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e146      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	42420000 	.word	0x42420000
 800296c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e9      	bne.n	8002950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a6 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a87      	ldr	r2, [pc, #540]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a4:	61d3      	str	r3, [r2, #28]
 80029a6:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7e      	ldr	r2, [pc, #504]	; (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fc61 	bl	8001294 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe fc5d 	bl	8001294 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e103      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b75      	ldr	r3, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x4c8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x312>
 80029fc:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	e02d      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x334>
 8002a12:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a69      	ldr	r2, [pc, #420]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a66      	ldr	r2, [pc, #408]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	e01c      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x356>
 8002a34:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a60      	ldr	r2, [pc, #384]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a5d      	ldr	r2, [pc, #372]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e00b      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a5a      	ldr	r2, [pc, #360]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a57      	ldr	r2, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fc11 	bl	8001294 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe fc0d 	bl	8001294 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e0b1      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ee      	beq.n	8002a76 <HAL_RCC_OscConfig+0x37e>
 8002a98:	e014      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fbfb 	bl	8001294 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe fbf7 	bl	8001294 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e09b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8087 	beq.w	8002bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d061      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d146      	bne.n	8002b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af4:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7fe fbcb 	bl	8001294 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b02:	f7fe fbc7 	bl	8001294 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e06d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b28:	d108      	bne.n	8002b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4921      	ldr	r1, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a19      	ldr	r1, [r3, #32]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	491b      	ldr	r1, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fb9b 	bl	8001294 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe fb97 	bl	8001294 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e03d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x46a>
 8002b80:	e035      	b.n	8002bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fb84 	bl	8001294 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fb80 	bl	8001294 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e026      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x498>
 8002bae:	e01e      	b.n	8002bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e019      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x500>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0d0      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 0207 	bic.w	r2, r3, #7
 8002c26:	4965      	ldr	r1, [pc, #404]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d040      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d115      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e073      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06b      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f023 0203 	bic.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4936      	ldr	r1, [pc, #216]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cec:	f7fe fad2 	bl	8001294 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7fe face 	bl	8001294 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e053      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 020c 	and.w	r2, r3, #12
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1eb      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d210      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0207 	bic.w	r2, r3, #7
 8002d32:	4922      	ldr	r1, [pc, #136]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1d0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fa30 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	0800807c 	.word	0x0800807c
 8002dc8:	20000054 	.word	0x20000054
 8002dcc:	20000058 	.word	0x20000058

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x30>
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x36>
 8002dfe:	e027      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e02:	613b      	str	r3, [r7, #16]
      break;
 8002e04:	e027      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	0c9b      	lsrs	r3, r3, #18
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0c5b      	lsrs	r3, r3, #17
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e004      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	613b      	str	r3, [r7, #16]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e52:	613b      	str	r3, [r7, #16]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	693b      	ldr	r3, [r7, #16]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	00b71b00 	.word	0x00b71b00
 8002e6c:	08008094 	.word	0x08008094
 8002e70:	080080a4 	.word	0x080080a4
 8002e74:	003d0900 	.word	0x003d0900
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b02      	ldr	r3, [pc, #8]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	20000054 	.word	0x20000054

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e94:	f7ff fff2 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	0adb      	lsrs	r3, r3, #11
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	0800808c 	.word	0x0800808c

08002eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <RCC_Delay+0x34>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <RCC_Delay+0x38>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0a5b      	lsrs	r3, r3, #9
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ed4:	bf00      	nop
  }
  while (Delay --);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	60fa      	str	r2, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f9      	bne.n	8002ed4 <RCC_Delay+0x1c>
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000054 	.word	0x20000054
 8002ef0:	10624dd3 	.word	0x10624dd3

08002ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d07d      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f14:	4b4f      	ldr	r3, [pc, #316]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	61d3      	str	r3, [r2, #28]
 8002f2c:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d118      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f48:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a42      	ldr	r2, [pc, #264]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f54:	f7fe f99e 	bl	8001294 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5a:	e008      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5c:	f7fe f99a 	bl	8001294 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e06d      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02e      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d027      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa2:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d014      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe f969 	bl	8001294 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe f965 	bl	8001294 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e036      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4917      	ldr	r1, [pc, #92]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	490b      	ldr	r1, [pc, #44]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4904      	ldr	r1, [pc, #16]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
 800305c:	42420440 	.word	0x42420440

08003060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	2b0f      	cmp	r3, #15
 8003082:	f200 80ae 	bhi.w	80031e2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	08003163 	.word	0x08003163
 8003090:	080031c7 	.word	0x080031c7
 8003094:	080031e3 	.word	0x080031e3
 8003098:	08003153 	.word	0x08003153
 800309c:	080031e3 	.word	0x080031e3
 80030a0:	080031e3 	.word	0x080031e3
 80030a4:	080031e3 	.word	0x080031e3
 80030a8:	0800315b 	.word	0x0800315b
 80030ac:	080031e3 	.word	0x080031e3
 80030b0:	080031e3 	.word	0x080031e3
 80030b4:	080031e3 	.word	0x080031e3
 80030b8:	080031e3 	.word	0x080031e3
 80030bc:	080031e3 	.word	0x080031e3
 80030c0:	080031e3 	.word	0x080031e3
 80030c4:	080031e3 	.word	0x080031e3
 80030c8:	080030cd 	.word	0x080030cd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80030cc:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80030d2:	4b49      	ldr	r3, [pc, #292]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8083 	beq.w	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	4a44      	ldr	r2, [pc, #272]	; (80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030f8:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0c5b      	lsrs	r3, r3, #17
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	4a3f      	ldr	r2, [pc, #252]	; (8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003104:	5cd3      	ldrb	r3, [r2, r3]
 8003106:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fbb2 f2f3 	udiv	r2, r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	e004      	b.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4a38      	ldr	r2, [pc, #224]	; (8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800312e:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d102      	bne.n	8003142 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003140:	e051      	b.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
          frequency = (pllclk * 2) / 3;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4a31      	ldr	r2, [pc, #196]	; (800320c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
      break;
 8003150:	e049      	b.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003152:	f7ff fe3d 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8003156:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003158:	e048      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800315a:	f7ff fe39 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 800315e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003160:	e044      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003172:	d108      	bne.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	e01e      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003190:	d109      	bne.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800319e:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	e00e      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031b0:	d11b      	bne.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d015      	beq.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      {
        frequency = HSE_VALUE / 128U;
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 80031c0:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80031c2:	e012      	b.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80031c4:	e011      	b.n	80031ea <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031c6:	f7ff fe63 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0b9b      	lsrs	r3, r3, #14
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	61bb      	str	r3, [r7, #24]
      break;
 80031e0:	e004      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    default:
    {
      break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      break;
 80031ea:	bf00      	nop
    }
  }
  return (frequency);
 80031ec:	69bb      	ldr	r3, [r7, #24]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	080080a8 	.word	0x080080a8
 8003200:	080080b8 	.word	0x080080b8
 8003204:	00b71b00 	.word	0x00b71b00
 8003208:	003d0900 	.word	0x003d0900
 800320c:	aaaaaaab 	.word	0xaaaaaaab
 8003210:	00016e36 	.word	0x00016e36

08003214 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e022      	b.n	800326c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd fec3 	bl	8000fc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2203      	movs	r2, #3
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f814 	bl	8003274 <HAL_SD_InitCard>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e00a      	b.n	800326c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b08e      	sub	sp, #56	; 0x38
 8003278:	af04      	add	r7, sp, #16
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003290:	2376      	movs	r3, #118	; 0x76
 8003292:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681d      	ldr	r5, [r3, #0]
 8003298:	466c      	mov	r4, sp
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032a6:	f107 0308 	add.w	r3, r7, #8
 80032aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ac:	4628      	mov	r0, r5
 80032ae:	f001 fb6b 	bl	8004988 <SDIO_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e04f      	b.n	8003364 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_SD_InitCard+0xf8>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fba0 	bl	8004a14 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_SD_InitCard+0xf8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80032da:	2002      	movs	r0, #2
 80032dc:	f7fd ffe4 	bl	80012a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fe69 	bl	8003fb8 <SD_PowerON>
 80032e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02e      	b.n	8003364 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fd87 	bl	8003e1a <SD_InitCard>
 800330c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01b      	b.n	8003364 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fbf9 	bl	8004b2c <SDMMC_CmdBlockLength>
 800333a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00f      	beq.n	8003362 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_SD_InitCard+0xfc>)
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bdb0      	pop	{r4, r5, r7, pc}
 800336c:	423000a0 	.word	0x423000a0
 8003370:	004005ff 	.word	0x004005ff

08003374 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b092      	sub	sp, #72	; 0x48
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003382:	f7fd ff87 	bl	8001294 <HAL_GetTick>
 8003386:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1bd      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	f040 81b0 	bne.w	8003714 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80033ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d907      	bls.n	80033d8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e1a4      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2203      	movs	r2, #3
 80033dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d002      	beq.n	80033f6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	025b      	lsls	r3, r3, #9
 80033f4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	025b      	lsls	r3, r3, #9
 8003400:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003402:	2390      	movs	r3, #144	; 0x90
 8003404:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003406:	2302      	movs	r3, #2
 8003408:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800340e:	2301      	movs	r3, #1
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f107 0214 	add.w	r2, r7, #20
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f001 fb5a 	bl	8004ad6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d90a      	bls.n	800343e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2202      	movs	r2, #2
 800342c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fbbd 	bl	8004bb4 <SDMMC_CmdReadMultiBlock>
 800343a:	6478      	str	r0, [r7, #68]	; 0x44
 800343c:	e009      	b.n	8003452 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fb90 	bl	8004b70 <SDMMC_CmdReadSingleBlock>
 8003450:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	2b00      	cmp	r3, #0
 8003456:	d012      	beq.n	800347e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a7a      	ldr	r2, [pc, #488]	; (8003648 <HAL_SD_ReadBlocks+0x2d4>)
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e151      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003482:	e061      	b.n	8003548 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03c      	beq.n	800350c <HAL_SD_ReadBlocks+0x198>
 8003492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d039      	beq.n	800350c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003498:	2300      	movs	r3, #0
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
 800349c:	e033      	b.n	8003506 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fa9a 	bl	80049dc <SDIO_ReadFIFO>
 80034a8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	3301      	adds	r3, #1
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ba:	3b01      	subs	r3, #1
 80034bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	3301      	adds	r3, #1
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	3b01      	subs	r3, #1
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	3301      	adds	r3, #1
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e6:	3b01      	subs	r3, #1
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	3301      	adds	r3, #1
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	3b01      	subs	r3, #1
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	3301      	adds	r3, #1
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	2b07      	cmp	r3, #7
 800350a:	d9c8      	bls.n	800349e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800350c:	f7fd fec2 	bl	8001294 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <HAL_SD_ReadBlocks+0x1ae>
 800351c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351e:	2b00      	cmp	r3, #0
 8003520:	d112      	bne.n	8003548 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a48      	ldr	r2, [pc, #288]	; (8003648 <HAL_SD_ReadBlocks+0x2d4>)
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0ec      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354e:	f240 332a 	movw	r3, #810	; 0x32a
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d095      	beq.n	8003484 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d022      	beq.n	80035ac <HAL_SD_ReadBlocks+0x238>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d91f      	bls.n	80035ac <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	2b03      	cmp	r3, #3
 8003572:	d01b      	beq.n	80035ac <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fb81 	bl	8004c80 <SDMMC_CmdStopTransfer>
 800357e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_SD_ReadBlocks+0x2d4>)
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0ba      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_SD_ReadBlocks+0x2d4>)
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	f043 0208 	orr.w	r2, r3, #8
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0a0      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <HAL_SD_ReadBlocks+0x2d4>)
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e086      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <HAL_SD_ReadBlocks+0x2d4>)
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e06c      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
 8003648:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f9c3 	bl	80049dc <SDIO_ReadFIFO>
 8003656:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	b2da      	uxtb	r2, r3
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	3301      	adds	r3, #1
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	3b01      	subs	r3, #1
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b2da      	uxtb	r2, r3
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003678:	3301      	adds	r3, #1
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367e:	3b01      	subs	r3, #1
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	b2da      	uxtb	r2, r3
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	3301      	adds	r3, #1
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	3b01      	subs	r3, #1
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	0e1b      	lsrs	r3, r3, #24
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	3301      	adds	r3, #1
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036aa:	3b01      	subs	r3, #1
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80036ae:	f7fd fdf1 	bl	8001294 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d902      	bls.n	80036c4 <HAL_SD_ReadBlocks+0x350>
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d112      	bne.n	80036ea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_SD_ReadBlocks+0x3b8>)
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e01b      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SD_ReadBlocks+0x38a>
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1a6      	bne.n	800364c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f240 523a 	movw	r2, #1338	; 0x53a
 8003706:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e006      	b.n	8003722 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3748      	adds	r7, #72	; 0x48
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	004005ff 	.word	0x004005ff

08003730 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b092      	sub	sp, #72	; 0x48
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800373e:	f7fd fda9 	bl	8001294 <HAL_GetTick>
 8003742:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e166      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	f040 8159 	bne.w	8003a22 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	441a      	add	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	429a      	cmp	r2, r3
 8003782:	d907      	bls.n	8003794 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e14d      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2203      	movs	r2, #3
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2200      	movs	r2, #0
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80037ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ae:	025b      	lsls	r3, r3, #9
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	025b      	lsls	r3, r3, #9
 80037bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80037be:	2390      	movs	r3, #144	; 0x90
 80037c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f107 0218 	add.w	r2, r7, #24
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f97c 	bl	8004ad6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d90a      	bls.n	80037fa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 fa23 	bl	8004c3c <SDMMC_CmdWriteMultiBlock>
 80037f6:	6478      	str	r0, [r7, #68]	; 0x44
 80037f8:	e009      	b.n	800380e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2210      	movs	r2, #16
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f9f6 	bl	8004bf8 <SDMMC_CmdWriteSingleBlock>
 800380c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800380e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a87      	ldr	r2, [pc, #540]	; (8003a38 <HAL_SD_WriteBlocks+0x308>)
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	431a      	orrs	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0fa      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800383e:	e065      	b.n	800390c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d040      	beq.n	80038d0 <HAL_SD_WriteBlocks+0x1a0>
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03d      	beq.n	80038d0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003854:	2300      	movs	r3, #0
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
 8003858:	e037      	b.n	80038ca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	3301      	adds	r3, #1
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	3b01      	subs	r3, #1
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	021a      	lsls	r2, r3, #8
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	3301      	adds	r3, #1
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	3b01      	subs	r3, #1
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	041a      	lsls	r2, r3, #16
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	3301      	adds	r3, #1
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	3b01      	subs	r3, #1
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	061a      	lsls	r2, r3, #24
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	3301      	adds	r3, #1
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	3b01      	subs	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f107 0214 	add.w	r2, r7, #20
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 f898 	bl	80049f4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	3301      	adds	r3, #1
 80038c8:	643b      	str	r3, [r7, #64]	; 0x40
 80038ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038cc:	2b07      	cmp	r3, #7
 80038ce:	d9c4      	bls.n	800385a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80038d0:	f7fd fce0 	bl	8001294 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038dc:	429a      	cmp	r2, r3
 80038de:	d902      	bls.n	80038e6 <HAL_SD_WriteBlocks+0x1b6>
 80038e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d112      	bne.n	800390c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a53      	ldr	r2, [pc, #332]	; (8003a38 <HAL_SD_WriteBlocks+0x308>)
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e091      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003912:	f240 331a 	movw	r3, #794	; 0x31a
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d091      	beq.n	8003840 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d022      	beq.n	8003970 <HAL_SD_WriteBlocks+0x240>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d91f      	bls.n	8003970 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	2b03      	cmp	r3, #3
 8003936:	d01b      	beq.n	8003970 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f001 f99f 	bl	8004c80 <SDMMC_CmdStopTransfer>
 8003942:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3a      	ldr	r2, [pc, #232]	; (8003a38 <HAL_SD_WriteBlocks+0x308>)
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e05f      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d012      	beq.n	80039a4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <HAL_SD_WriteBlocks+0x308>)
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f043 0208 	orr.w	r2, r3, #8
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e045      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d012      	beq.n	80039d8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <HAL_SD_WriteBlocks+0x308>)
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e02b      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d012      	beq.n	8003a0c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <HAL_SD_WriteBlocks+0x308>)
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	f043 0210 	orr.w	r2, r3, #16
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e011      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e006      	b.n	8003a30 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3748      	adds	r7, #72	; 0x48
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	004005ff 	.word	0x004005ff

08003a3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4a:	0f9b      	lsrs	r3, r3, #30
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a56:	0e9b      	lsrs	r3, r3, #26
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aba:	0bdb      	lsrs	r3, r3, #15
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003acc:	0b9b      	lsrs	r3, r3, #14
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af0:	0b1b      	lsrs	r3, r3, #12
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d163      	bne.n	8003bd4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b10:	009a      	lsls	r2, r3, #2
 8003b12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b16:	4013      	ands	r3, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b1c:	0f92      	lsrs	r2, r2, #30
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b28:	0edb      	lsrs	r3, r3, #27
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b3a:	0e1b      	lsrs	r3, r3, #24
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4c:	0d5b      	lsrs	r3, r3, #21
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b70:	0bdb      	lsrs	r3, r3, #15
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	7e1b      	ldrb	r3, [r3, #24]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	3302      	adds	r3, #2
 8003b94:	2201      	movs	r2, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b9e:	fb03 f202 	mul.w	r2, r3, r2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	7a1b      	ldrb	r3, [r3, #8]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bc0:	0a52      	lsrs	r2, r2, #9
 8003bc2:	fb03 f202 	mul.w	r2, r3, r2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60
 8003bd2:	e031      	b.n	8003c38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d11d      	bne.n	8003c18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bea:	0c1b      	lsrs	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	029a      	lsls	r2, r3, #10
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	661a      	str	r2, [r3, #96]	; 0x60
 8003c16:	e00f      	b.n	8003c38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_SD_GetCardCSD+0x344>)
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e09d      	b.n	8003d74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3c:	0b9b      	lsrs	r3, r3, #14
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4e:	09db      	lsrs	r3, r3, #7
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	0fdb      	lsrs	r3, r3, #31
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	0f5b      	lsrs	r3, r3, #29
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	0e9b      	lsrs	r3, r3, #26
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	0d9b      	lsrs	r3, r3, #22
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	0d5b      	lsrs	r3, r3, #21
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	0bdb      	lsrs	r3, r3, #15
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	0b9b      	lsrs	r3, r3, #14
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	0b5b      	lsrs	r3, r3, #13
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	0b1b      	lsrs	r3, r3, #12
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	0a9b      	lsrs	r3, r3, #10
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	004005ff 	.word	0x004005ff

08003d84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f971 	bl	80040d4 <SD_SendStatus>
 8003df2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003e10:	693b      	ldr	r3, [r7, #16]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e1a:	b5b0      	push	{r4, r5, r7, lr}
 8003e1c:	b094      	sub	sp, #80	; 0x50
 8003e1e:	af04      	add	r7, sp, #16
 8003e20:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e22:	2301      	movs	r3, #1
 8003e24:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fdff 	bl	8004a2e <SDIO_GetPowerState>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d102      	bne.n	8003e3c <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e3a:	e0b8      	b.n	8003fae <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d02f      	beq.n	8003ea4 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ffe0 	bl	8004e0e <SDMMC_CmdSendCID>
 8003e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <SD_InitCard+0x40>
    {
      return errorstate;
 8003e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e58:	e0a9      	b.n	8003fae <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe26 	bl	8004ab2 <SDIO_GetResponse>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2104      	movs	r1, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fe1d 	bl	8004ab2 <SDIO_GetResponse>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2108      	movs	r1, #8
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fe14 	bl	8004ab2 <SDIO_GetResponse>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	210c      	movs	r1, #12
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fe0b 	bl	8004ab2 <SDIO_GetResponse>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d00d      	beq.n	8003ec8 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f107 020e 	add.w	r2, r7, #14
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 ffe6 	bl	8004e88 <SDMMC_CmdSetRelAdd>
 8003ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <SD_InitCard+0xae>
    {
      return errorstate;
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	e072      	b.n	8003fae <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d036      	beq.n	8003f3e <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 ffb0 	bl	8004e4a <SDMMC_CmdSendCSD>
 8003eea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef4:	e05b      	b.n	8003fae <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fdd8 	bl	8004ab2 <SDIO_GetResponse>
 8003f02:	4602      	mov	r2, r0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fdcf 	bl	8004ab2 <SDIO_GetResponse>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2108      	movs	r1, #8
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fdc6 	bl	8004ab2 <SDIO_GetResponse>
 8003f26:	4602      	mov	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	210c      	movs	r1, #12
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fdbd 	bl	8004ab2 <SDIO_GetResponse>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2104      	movs	r1, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fdb4 	bl	8004ab2 <SDIO_GetResponse>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	0d1a      	lsrs	r2, r3, #20
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fd6f 	bl	8003a3c <HAL_SD_GetCardCSD>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f68:	e021      	b.n	8003fae <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	2200      	movs	r2, #0
 8003f76:	461c      	mov	r4, r3
 8003f78:	4615      	mov	r5, r2
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	4608      	mov	r0, r1
 8003f80:	f000 fea0 	bl	8004cc4 <SDMMC_CmdSelDesel>
 8003f84:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <SD_InitCard+0x176>
  {
    return errorstate;
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8e:	e00e      	b.n	8003fae <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681d      	ldr	r5, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	466c      	mov	r4, sp
 8003f98:	f103 0210 	add.w	r2, r3, #16
 8003f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 fcee 	bl	8004988 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3740      	adds	r7, #64	; 0x40
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003fb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fe9a 	bl	8004d0a <SDMMC_CmdGoIdleState>
 8003fd6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	e072      	b.n	80040c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fead 	bl	8004d46 <SDMMC_CmdOperCond>
 8003fec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fe83 	bl	8004d0a <SDMMC_CmdGoIdleState>
 8004004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <SD_PowerON+0x5e>
    {
      return errorstate;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	e05b      	b.n	80040c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b01      	cmp	r3, #1
 800401c:	d137      	bne.n	800408e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fead 	bl	8004d84 <SDMMC_CmdAppCommand>
 800402a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02d      	beq.n	800408e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004032:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004036:	e047      	b.n	80040c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fea0 	bl	8004d84 <SDMMC_CmdAppCommand>
 8004044:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <SD_PowerON+0x98>
    {
      return errorstate;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	e03b      	b.n	80040c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	491e      	ldr	r1, [pc, #120]	; (80040d0 <SD_PowerON+0x118>)
 8004056:	4618      	mov	r0, r3
 8004058:	f000 feb6 	bl	8004dc8 <SDMMC_CmdAppOperCommand>
 800405c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004064:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004068:	e02e      	b.n	80040c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fd1e 	bl	8004ab2 <SDIO_GetResponse>
 8004076:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	0fdb      	lsrs	r3, r3, #31
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <SD_PowerON+0xcc>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <SD_PowerON+0xce>
 8004084:	2300      	movs	r3, #0
 8004086:	613b      	str	r3, [r7, #16]

    count++;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3301      	adds	r3, #1
 800408c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004094:	4293      	cmp	r3, r2
 8004096:	d802      	bhi.n	800409e <SD_PowerON+0xe6>
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0cc      	beq.n	8004038 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d902      	bls.n	80040ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80040a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ac:	e00c      	b.n	80040c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
 80040be:	e002      	b.n	80040c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	c1100000 	.word	0xc1100000

080040d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80040e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040e8:	e018      	b.n	800411c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	041b      	lsls	r3, r3, #16
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f000 fee7 	bl	8004eca <SDMMC_CmdSendStatus>
 80040fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	e009      	b.n	800411c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fccf 	bl	8004ab2 <SDIO_GetResponse>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e041      	b.n	80041ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc ff94 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f000 fa82 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d001      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e044      	b.n	8004266 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_TIM_Base_Start_IT+0xac>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_Base_Start_IT+0xb0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d00e      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_Base_Start_IT+0xb4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIM_Base_Start_IT+0xb8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x6c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_TIM_Base_Start_IT+0xbc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d111      	bne.n	8004254 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b06      	cmp	r3, #6
 8004240:	d010      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	e007      	b.n	8004264 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40013400 	.word	0x40013400
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00

08004284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0202 	mvn.w	r2, #2
 80042b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9b4 	bl	8004634 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9a7 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f9b6 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0204 	mvn.w	r2, #4
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f98a 	bl	8004634 <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f97d 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f98c 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b08      	cmp	r3, #8
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b08      	cmp	r3, #8
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0208 	mvn.w	r2, #8
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f960 	bl	8004634 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f953 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f962 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b10      	cmp	r3, #16
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0210 	mvn.w	r2, #16
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2208      	movs	r2, #8
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f936 	bl	8004634 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f929 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f938 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10e      	bne.n	8004408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0201 	mvn.w	r2, #1
 8004400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fc fca2 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d10e      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d107      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 faa1 	bl	8004976 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f8fc 	bl	8004658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b20      	cmp	r3, #32
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b20      	cmp	r3, #32
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0220 	mvn.w	r2, #32
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa6c 	bl	8004964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0b4      	b.n	800461a <HAL_TIM_ConfigClockSource+0x186>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d03e      	beq.n	8004568 <HAL_TIM_ConfigClockSource+0xd4>
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ee:	f200 8087 	bhi.w	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f6:	f000 8086 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x172>
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d87f      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b70      	cmp	r3, #112	; 0x70
 8004502:	d01a      	beq.n	800453a <HAL_TIM_ConfigClockSource+0xa6>
 8004504:	2b70      	cmp	r3, #112	; 0x70
 8004506:	d87b      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b60      	cmp	r3, #96	; 0x60
 800450a:	d050      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x11a>
 800450c:	2b60      	cmp	r3, #96	; 0x60
 800450e:	d877      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b50      	cmp	r3, #80	; 0x50
 8004512:	d03c      	beq.n	800458e <HAL_TIM_ConfigClockSource+0xfa>
 8004514:	2b50      	cmp	r3, #80	; 0x50
 8004516:	d873      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d058      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x13a>
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d86f      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b30      	cmp	r3, #48	; 0x30
 8004522:	d064      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004524:	2b30      	cmp	r3, #48	; 0x30
 8004526:	d86b      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b20      	cmp	r3, #32
 800452a:	d060      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	2b20      	cmp	r3, #32
 800452e:	d867      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05c      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004534:	2b10      	cmp	r3, #16
 8004536:	d05a      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	e062      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6899      	ldr	r1, [r3, #8]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f000 f980 	bl	800484e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800455c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	609a      	str	r2, [r3, #8]
      break;
 8004566:	e04f      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f000 f969 	bl	800484e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800458a:	609a      	str	r2, [r3, #8]
      break;
 800458c:	e03c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	f000 f8e0 	bl	8004760 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2150      	movs	r1, #80	; 0x50
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f937 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 80045ac:	e02c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 f8fe 	bl	80047bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2160      	movs	r1, #96	; 0x60
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f927 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 80045cc:	e01c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	461a      	mov	r2, r3
 80045dc:	f000 f8c0 	bl	8004760 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f917 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 80045ec:	e00c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f000 f90e 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 80045fe:	e003      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e000      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
	...

0800466c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a33      	ldr	r2, [pc, #204]	; (800474c <TIM_Base_SetConfig+0xe0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a32      	ldr	r2, [pc, #200]	; (8004750 <TIM_Base_SetConfig+0xe4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00f      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d00b      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <TIM_Base_SetConfig+0xe8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2e      	ldr	r2, [pc, #184]	; (8004758 <TIM_Base_SetConfig+0xec>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2d      	ldr	r2, [pc, #180]	; (800475c <TIM_Base_SetConfig+0xf0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a22      	ldr	r2, [pc, #136]	; (800474c <TIM_Base_SetConfig+0xe0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <TIM_Base_SetConfig+0xe4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00f      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <TIM_Base_SetConfig+0xe8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <TIM_Base_SetConfig+0xec>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <TIM_Base_SetConfig+0xf0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <TIM_Base_SetConfig+0xe0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0xc8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a08      	ldr	r2, [pc, #32]	; (8004750 <TIM_Base_SetConfig+0xe4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d103      	bne.n	800473c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	615a      	str	r2, [r3, #20]
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40013400 	.word	0x40013400
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00

08004760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f023 0201 	bic.w	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 030a 	bic.w	r3, r3, #10
 800479c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f023 0210 	bic.w	r2, r3, #16
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	031b      	lsls	r3, r3, #12
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	f043 0307 	orr.w	r3, r3, #7
 800483c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800484e:	b480      	push	{r7}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004868:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	021a      	lsls	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	431a      	orrs	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	609a      	str	r2, [r3, #8]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e050      	b.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00e      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a12      	ldr	r2, [pc, #72]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10c      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40013400 	.word	0x40013400
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00

08004964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004988:	b084      	sub	sp, #16
 800498a:	b480      	push	{r7}
 800498c:	b085      	sub	sp, #20
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	f107 001c 	add.w	r0, r7, #28
 8004996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800499e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80049a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80049a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80049a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80049aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80049ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80049b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80049c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	b004      	add	sp, #16
 80049da:	4770      	bx	lr

080049dc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004a6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004a72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a82:	f023 030f 	bic.w	r3, r3, #15
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	b2db      	uxtb	r3, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
}  
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004afc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004b02:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004b08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0

}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff78 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	2110      	movs	r1, #16
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9d6 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b66:	69fb      	ldr	r3, [r7, #28]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004b7e:	2311      	movs	r3, #17
 8004b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b90:	f107 0308 	add.w	r3, r7, #8
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff ff56 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba0:	2111      	movs	r1, #17
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f9b4 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004baa:	69fb      	ldr	r3, [r7, #28]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004bc2:	2312      	movs	r3, #18
 8004bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bc6:	2340      	movs	r3, #64	; 0x40
 8004bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bd4:	f107 0308 	add.w	r3, r7, #8
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ff34 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	2112      	movs	r1, #18
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f992 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bee:	69fb      	ldr	r3, [r7, #28]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004c06:	2318      	movs	r3, #24
 8004c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff12 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	2118      	movs	r1, #24
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f970 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c32:	69fb      	ldr	r3, [r7, #28]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004c4a:	2319      	movs	r3, #25
 8004c4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fef0 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6c:	2119      	movs	r1, #25
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f94e 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c76:	69fb      	ldr	r3, [r7, #28]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff fecf 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004caa:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <SDMMC_CmdStopTransfer+0x40>)
 8004cac:	210c      	movs	r1, #12
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f92e 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	05f5e100 	.word	0x05f5e100

08004cc4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004cd4:	2307      	movs	r3, #7
 8004cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd8:	2340      	movs	r3, #64	; 0x40
 8004cda:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce6:	f107 0310 	add.w	r3, r7, #16
 8004cea:	4619      	mov	r1, r3
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff feab 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	2107      	movs	r1, #7
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f909 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d28:	f107 0308 	add.w	r3, r7, #8
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fe8a 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fb21 	bl	800537c <SDMMC_GetCmdError>
 8004d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b088      	sub	sp, #32
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004d4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004d54:	2308      	movs	r3, #8
 8004d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d58:	2340      	movs	r3, #64	; 0x40
 8004d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d66:	f107 0308 	add.w	r3, r7, #8
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fe6b 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fab4 	bl	80052e0 <SDMMC_GetCmdResp7>
 8004d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d92:	2337      	movs	r3, #55	; 0x37
 8004d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004da4:	f107 0308 	add.w	r3, r7, #8
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fe4c 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	2137      	movs	r1, #55	; 0x37
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8aa 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004dde:	2329      	movs	r3, #41	; 0x29
 8004de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004de2:	2340      	movs	r3, #64	; 0x40
 8004de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004df0:	f107 0308 	add.w	r3, r7, #8
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fe26 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f9bd 	bl	800517c <SDMMC_GetCmdResp3>
 8004e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e04:	69fb      	ldr	r3, [r7, #28]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b088      	sub	sp, #32
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e1e:	23c0      	movs	r3, #192	; 0xc0
 8004e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e2c:	f107 0308 	add.w	r3, r7, #8
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fe08 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f957 	bl	80050ec <SDMMC_GetCmdResp2>
 8004e3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e40:	69fb      	ldr	r3, [r7, #28]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b088      	sub	sp, #32
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e58:	2309      	movs	r3, #9
 8004e5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e5c:	23c0      	movs	r3, #192	; 0xc0
 8004e5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e6a:	f107 0308 	add.w	r3, r7, #8
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fde9 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f938 	bl	80050ec <SDMMC_GetCmdResp2>
 8004e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004e96:	2303      	movs	r3, #3
 8004e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e9a:	2340      	movs	r3, #64	; 0x40
 8004e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ea8:	f107 0308 	add.w	r3, r7, #8
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fdca 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	2103      	movs	r1, #3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f99b 	bl	80051f4 <SDMMC_GetCmdResp6>
 8004ebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b088      	sub	sp, #32
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004ed8:	230d      	movs	r3, #13
 8004eda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eea:	f107 0308 	add.w	r3, r7, #8
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fda9 	bl	8004a48 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	210d      	movs	r1, #13
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f807 	bl	8004f10 <SDMMC_GetCmdResp1>
 8004f02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f04:	69fb      	ldr	r3, [r7, #28]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f1e:	4b70      	ldr	r3, [pc, #448]	; (80050e0 <SDMMC_GetCmdResp1+0x1d0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a70      	ldr	r2, [pc, #448]	; (80050e4 <SDMMC_GetCmdResp1+0x1d4>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	0a5a      	lsrs	r2, r3, #9
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	61fa      	str	r2, [r7, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f40:	e0c9      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0ef      	beq.n	8004f32 <SDMMC_GetCmdResp1+0x22>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1ea      	bne.n	8004f32 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f6e:	2304      	movs	r3, #4
 8004f70:	e0b1      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0a6      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	22c5      	movs	r2, #197	; 0xc5
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fd83 	bl	8004a9a <SDIO_GetCommandResponse>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d001      	beq.n	8004fa2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e099      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fd84 	bl	8004ab2 <SDIO_GetResponse>
 8004faa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4b4e      	ldr	r3, [pc, #312]	; (80050e8 <SDMMC_GetCmdResp1+0x1d8>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e08d      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	da02      	bge.n	8004fc6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fc4:	e087      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	e080      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	e079      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ff0:	e071      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005000:	e069      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800500c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005010:	e061      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800501c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005020:	e059      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800502c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005030:	e051      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800503c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005040:	e049      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800504c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005050:	e041      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800505c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005060:	e039      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800506c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005070:	e031      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800507c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005080:	e029      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800508c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005090:	e021      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800509c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050a0:	e019      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80050ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050b0:	e011      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80050bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050c0:	e009      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80050cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80050d0:	e001      	b.n	80050d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000054 	.word	0x20000054
 80050e4:	10624dd3 	.word	0x10624dd3
 80050e8:	fdffe008 	.word	0xfdffe008

080050ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050f4:	4b1f      	ldr	r3, [pc, #124]	; (8005174 <SDMMC_GetCmdResp2+0x88>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <SDMMC_GetCmdResp2+0x8c>)
 80050fa:	fba2 2303 	umull	r2, r3, r2, r3
 80050fe:	0a5b      	lsrs	r3, r3, #9
 8005100:	f241 3288 	movw	r2, #5000	; 0x1388
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1e5a      	subs	r2, r3, #1
 800510e:	60fa      	str	r2, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005118:	e026      	b.n	8005168 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ef      	beq.n	800510a <SDMMC_GetCmdResp2+0x1e>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ea      	bne.n	800510a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d004      	beq.n	800514a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2204      	movs	r2, #4
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005146:	2304      	movs	r3, #4
 8005148:	e00e      	b.n	8005168 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800515c:	2301      	movs	r3, #1
 800515e:	e003      	b.n	8005168 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	22c5      	movs	r2, #197	; 0xc5
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000054 	.word	0x20000054
 8005178:	10624dd3 	.word	0x10624dd3

0800517c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <SDMMC_GetCmdResp3+0x70>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <SDMMC_GetCmdResp3+0x74>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	0a5b      	lsrs	r3, r3, #9
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1e5a      	subs	r2, r3, #1
 800519e:	60fa      	str	r2, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051a8:	e01b      	b.n	80051e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ef      	beq.n	800519a <SDMMC_GetCmdResp3+0x1e>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ea      	bne.n	800519a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2204      	movs	r2, #4
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051d6:	2304      	movs	r3, #4
 80051d8:	e003      	b.n	80051e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	22c5      	movs	r2, #197	; 0xc5
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	20000054 	.word	0x20000054
 80051f0:	10624dd3 	.word	0x10624dd3

080051f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	460b      	mov	r3, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005202:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <SDMMC_GetCmdResp6+0xe4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a35      	ldr	r2, [pc, #212]	; (80052dc <SDMMC_GetCmdResp6+0xe8>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0a5b      	lsrs	r3, r3, #9
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	1e5a      	subs	r2, r3, #1
 800521c:	61fa      	str	r2, [r7, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d102      	bne.n	8005228 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005222:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005226:	e052      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0ef      	beq.n	8005218 <SDMMC_GetCmdResp6+0x24>
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1ea      	bne.n	8005218 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2204      	movs	r2, #4
 8005252:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005254:	2304      	movs	r3, #4
 8005256:	e03a      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800526a:	2301      	movs	r3, #1
 800526c:	e02f      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fc13 	bl	8004a9a <SDIO_GetCommandResponse>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	7afb      	ldrb	r3, [r7, #11]
 800527a:	4293      	cmp	r3, r2
 800527c:	d001      	beq.n	8005282 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800527e:	2301      	movs	r3, #1
 8005280:	e025      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	22c5      	movs	r2, #197	; 0xc5
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005288:	2100      	movs	r1, #0
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff fc11 	bl	8004ab2 <SDIO_GetResponse>
 8005290:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e011      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b8:	e009      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c8:	e001      	b.n	80052ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000054 	.word	0x20000054
 80052dc:	10624dd3 	.word	0x10624dd3

080052e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <SDMMC_GetCmdResp7+0x94>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a22      	ldr	r2, [pc, #136]	; (8005378 <SDMMC_GetCmdResp7+0x98>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0a5b      	lsrs	r3, r3, #9
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1e5a      	subs	r2, r3, #1
 8005302:	60fa      	str	r2, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d102      	bne.n	800530e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005308:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800530c:	e02c      	b.n	8005368 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ef      	beq.n	80052fe <SDMMC_GetCmdResp7+0x1e>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ea      	bne.n	80052fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2204      	movs	r2, #4
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800533a:	2304      	movs	r3, #4
 800533c:	e014      	b.n	8005368 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005350:	2301      	movs	r3, #1
 8005352:	e009      	b.n	8005368 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2240      	movs	r2, #64	; 0x40
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005366:	2300      	movs	r3, #0
  
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20000054 	.word	0x20000054
 8005378:	10624dd3 	.word	0x10624dd3

0800537c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <SDMMC_GetCmdError+0x4c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a10      	ldr	r2, [pc, #64]	; (80053cc <SDMMC_GetCmdError+0x50>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0a5b      	lsrs	r3, r3, #9
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	fb02 f303 	mul.w	r3, r2, r3
 8005398:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	60fa      	str	r2, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053a8:	e009      	b.n	80053be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f1      	beq.n	800539a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	22c5      	movs	r2, #197	; 0xc5
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr
 80053c8:	20000054 	.word	0x20000054
 80053cc:	10624dd3 	.word	0x10624dd3

080053d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80053d4:	4904      	ldr	r1, [pc, #16]	; (80053e8 <MX_FATFS_Init+0x18>)
 80053d6:	4805      	ldr	r0, [pc, #20]	; (80053ec <MX_FATFS_Init+0x1c>)
 80053d8:	f002 fc90 	bl	8007cfc <FATFS_LinkDriver>
 80053dc:	4603      	mov	r3, r0
 80053de:	461a      	mov	r2, r3
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <MX_FATFS_Init+0x20>)
 80053e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053e4:	bf00      	nop
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	200043fc 	.word	0x200043fc
 80053ec:	0800813c 	.word	0x0800813c
 80053f0:	200043f8 	.word	0x200043f8

080053f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
	...

08005404 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800540e:	f000 f86b 	bl	80054e8 <BSP_SD_IsDetected>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e005      	b.n	8005428 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800541c:	4804      	ldr	r0, [pc, #16]	; (8005430 <BSP_SD_Init+0x2c>)
 800541e:	f7fd fef9 	bl	8003214 <HAL_SD_Init>
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005426:	79fb      	ldrb	r3, [r7, #7]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	200000e8 	.word	0x200000e8

08005434 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	4806      	ldr	r0, [pc, #24]	; (800546c <BSP_SD_ReadBlocks+0x38>)
 8005452:	f7fd ff8f 	bl	8003374 <HAL_SD_ReadBlocks>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200000e8 	.word	0x200000e8

08005470 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	4806      	ldr	r0, [pc, #24]	; (80054a8 <BSP_SD_WriteBlocks+0x38>)
 800548e:	f7fe f94f 	bl	8003730 <HAL_SD_WriteBlocks>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800549c:	7dfb      	ldrb	r3, [r7, #23]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200000e8 	.word	0x200000e8

080054ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <BSP_SD_GetCardState+0x1c>)
 80054b2:	f7fe fc92 	bl	8003dda <HAL_SD_GetCardState>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200000e8 	.word	0x200000e8

080054cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4803      	ldr	r0, [pc, #12]	; (80054e4 <BSP_SD_GetCardInfo+0x18>)
 80054d8:	f7fe fc54 	bl	8003d84 <HAL_SD_GetCardInfo>
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200000e8 	.word	0x200000e8

080054e8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80054ee:	2301      	movs	r3, #1
 80054f0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80054f2:	f000 f80b 	bl	800550c <BSP_PlatformIsDetected>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80054fc:	2300      	movs	r3, #0
 80054fe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	b2db      	uxtb	r3, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005512:	2301      	movs	r3, #1
 8005514:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	4806      	ldr	r0, [pc, #24]	; (8005534 <BSP_PlatformIsDetected+0x28>)
 800551a:	f7fc fe77 	bl	800220c <HAL_GPIO_ReadPin>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005524:	2300      	movs	r3, #0
 8005526:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005528:	79fb      	ldrb	r3, [r7, #7]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40011000 	.word	0x40011000

08005538 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <disk_status+0x30>)
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	79fa      	ldrb	r2, [r7, #7]
 8005550:	4905      	ldr	r1, [pc, #20]	; (8005568 <disk_status+0x30>)
 8005552:	440a      	add	r2, r1
 8005554:	7a12      	ldrb	r2, [r2, #8]
 8005556:	4610      	mov	r0, r2
 8005558:	4798      	blx	r3
 800555a:	4603      	mov	r3, r0
 800555c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20004420 	.word	0x20004420

0800556c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <disk_initialize+0x48>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d111      	bne.n	80055a8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <disk_initialize+0x48>)
 8005588:	2101      	movs	r1, #1
 800558a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <disk_initialize+0x48>)
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	79fa      	ldrb	r2, [r7, #7]
 800559a:	4906      	ldr	r1, [pc, #24]	; (80055b4 <disk_initialize+0x48>)
 800559c:	440a      	add	r2, r1
 800559e:	7a12      	ldrb	r2, [r2, #8]
 80055a0:	4610      	mov	r0, r2
 80055a2:	4798      	blx	r3
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20004420 	.word	0x20004420

080055b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4603      	mov	r3, r0
 80055c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <disk_read+0x3c>)
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	689c      	ldr	r4, [r3, #8]
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <disk_read+0x3c>)
 80055d8:	4413      	add	r3, r2
 80055da:	7a18      	ldrb	r0, [r3, #8]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	47a0      	blx	r4
 80055e4:	4603      	mov	r3, r0
 80055e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80055e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd90      	pop	{r4, r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20004420 	.word	0x20004420

080055f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <disk_write+0x3c>)
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68dc      	ldr	r4, [r3, #12]
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	4a07      	ldr	r2, [pc, #28]	; (8005634 <disk_write+0x3c>)
 8005618:	4413      	add	r3, r2
 800561a:	7a18      	ldrb	r0, [r3, #8]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	47a0      	blx	r4
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
  return res;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}
 8005632:	bf00      	nop
 8005634:	20004420 	.word	0x20004420

08005638 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	603a      	str	r2, [r7, #0]
 8005642:	71fb      	strb	r3, [r7, #7]
 8005644:	460b      	mov	r3, r1
 8005646:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	4a09      	ldr	r2, [pc, #36]	; (8005670 <disk_ioctl+0x38>)
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	79fa      	ldrb	r2, [r7, #7]
 8005656:	4906      	ldr	r1, [pc, #24]	; (8005670 <disk_ioctl+0x38>)
 8005658:	440a      	add	r2, r1
 800565a:	7a10      	ldrb	r0, [r2, #8]
 800565c:	79b9      	ldrb	r1, [r7, #6]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	73fb      	strb	r3, [r7, #15]
  return res;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20004420 	.word	0x20004420

08005674 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005688:	e007      	b.n	800569a <mem_cpy+0x26>
		*d++ = *s++;
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	1c53      	adds	r3, r2, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	6179      	str	r1, [r7, #20]
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f2      	bne.n	800568a <mem_cpy+0x16>
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80056c0:	e005      	b.n	80056ce <mem_set+0x1e>
		*d++ = (BYTE)val;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	617a      	str	r2, [r7, #20]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f4      	bne.n	80056c2 <mem_set+0x12>
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	; 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80056fc:	bf00      	nop
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	1e5a      	subs	r2, r3, #1
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00d      	beq.n	8005724 <mem_cmp+0x40>
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	61fa      	str	r2, [r7, #28]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4619      	mov	r1, r3
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	61ba      	str	r2, [r7, #24]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	1acb      	subs	r3, r1, r3
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ec      	beq.n	80056fe <mem_cmp+0x1a>
	return r;
 8005724:	697b      	ldr	r3, [r7, #20]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3724      	adds	r7, #36	; 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800573a:	e002      	b.n	8005742 <chk_chr+0x12>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3301      	adds	r3, #1
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <chk_chr+0x26>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	4293      	cmp	r3, r2
 8005754:	d1f2      	bne.n	800573c <chk_chr+0xc>
	return *str;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	781b      	ldrb	r3, [r3, #0]
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e038      	b.n	80057ea <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005778:	492f      	ldr	r1, [pc, #188]	; (8005838 <chk_lock+0xd4>)
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d029      	beq.n	80057e0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800578c:	492a      	ldr	r1, [pc, #168]	; (8005838 <chk_lock+0xd4>)
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d11e      	bne.n	80057e4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80057a6:	4924      	ldr	r1, [pc, #144]	; (8005838 <chk_lock+0xd4>)
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3304      	adds	r3, #4
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80057be:	429a      	cmp	r2, r3
 80057c0:	d110      	bne.n	80057e4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80057c2:	491d      	ldr	r1, [pc, #116]	; (8005838 <chk_lock+0xd4>)
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	3308      	adds	r3, #8
 80057d2:	881a      	ldrh	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80057da:	429a      	cmp	r2, r3
 80057dc:	d102      	bne.n	80057e4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80057de:	e007      	b.n	80057f0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80057e0:	2301      	movs	r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d9c3      	bls.n	8005778 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d109      	bne.n	800580a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d102      	bne.n	8005802 <chk_lock+0x9e>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d101      	bne.n	8005806 <chk_lock+0xa2>
 8005802:	2300      	movs	r3, #0
 8005804:	e013      	b.n	800582e <chk_lock+0xca>
 8005806:	2312      	movs	r3, #18
 8005808:	e011      	b.n	800582e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <chk_lock+0xc4>
 8005810:	4909      	ldr	r1, [pc, #36]	; (8005838 <chk_lock+0xd4>)
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	330a      	adds	r3, #10
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005826:	d101      	bne.n	800582c <chk_lock+0xc8>
 8005828:	2310      	movs	r3, #16
 800582a:	e000      	b.n	800582e <chk_lock+0xca>
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	20004408 	.word	0x20004408

0800583c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005842:	2300      	movs	r3, #0
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	e002      	b.n	800584e <enq_lock+0x12>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3301      	adds	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d809      	bhi.n	8005868 <enq_lock+0x2c>
 8005854:	490a      	ldr	r1, [pc, #40]	; (8005880 <enq_lock+0x44>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1ef      	bne.n	8005848 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	bf14      	ite	ne
 800586e:	2301      	movne	r3, #1
 8005870:	2300      	moveq	r3, #0
 8005872:	b2db      	uxtb	r3, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20004408 	.word	0x20004408

08005884 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e02b      	b.n	80058ec <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005894:	4955      	ldr	r1, [pc, #340]	; (80059ec <inc_lock+0x168>)
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4613      	mov	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11b      	bne.n	80058e6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80058ae:	494f      	ldr	r1, [pc, #316]	; (80059ec <inc_lock+0x168>)
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4613      	mov	r3, r2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3304      	adds	r3, #4
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10d      	bne.n	80058e6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80058ca:	4948      	ldr	r1, [pc, #288]	; (80059ec <inc_lock+0x168>)
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3308      	adds	r3, #8
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d006      	beq.n	80058f4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d9d0      	bls.n	8005894 <inc_lock+0x10>
 80058f2:	e000      	b.n	80058f6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80058f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d145      	bne.n	8005988 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e002      	b.n	8005908 <inc_lock+0x84>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d809      	bhi.n	8005922 <inc_lock+0x9e>
 800590e:	4937      	ldr	r1, [pc, #220]	; (80059ec <inc_lock+0x168>)
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1ef      	bne.n	8005902 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d101      	bne.n	800592c <inc_lock+0xa8>
 8005928:	2300      	movs	r3, #0
 800592a:	e05a      	b.n	80059e2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005932:	482e      	ldr	r0, [pc, #184]	; (80059ec <inc_lock+0x168>)
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4403      	add	r3, r0
 8005940:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005948:	4828      	ldr	r0, [pc, #160]	; (80059ec <inc_lock+0x168>)
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4403      	add	r3, r0
 8005956:	3304      	adds	r3, #4
 8005958:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005960:	4922      	ldr	r1, [pc, #136]	; (80059ec <inc_lock+0x168>)
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	3308      	adds	r3, #8
 8005970:	4602      	mov	r2, r0
 8005972:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005974:	491d      	ldr	r1, [pc, #116]	; (80059ec <inc_lock+0x168>)
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4613      	mov	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	330a      	adds	r3, #10
 8005984:	2200      	movs	r2, #0
 8005986:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <inc_lock+0x124>
 800598e:	4917      	ldr	r1, [pc, #92]	; (80059ec <inc_lock+0x168>)
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4613      	mov	r3, r2
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	330a      	adds	r3, #10
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <inc_lock+0x124>
 80059a4:	2300      	movs	r3, #0
 80059a6:	e01c      	b.n	80059e2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <inc_lock+0x142>
 80059ae:	490f      	ldr	r1, [pc, #60]	; (80059ec <inc_lock+0x168>)
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4613      	mov	r3, r2
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	330a      	adds	r3, #10
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	b299      	uxth	r1, r3
 80059c4:	e001      	b.n	80059ca <inc_lock+0x146>
 80059c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059ca:	4808      	ldr	r0, [pc, #32]	; (80059ec <inc_lock+0x168>)
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4403      	add	r3, r0
 80059d8:	330a      	adds	r3, #10
 80059da:	460a      	mov	r2, r1
 80059dc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	20004408 	.word	0x20004408

080059f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d82e      	bhi.n	8005a62 <dec_lock+0x72>
		n = Files[i].ctr;
 8005a04:	491b      	ldr	r1, [pc, #108]	; (8005a74 <dec_lock+0x84>)
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	330a      	adds	r3, #10
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a18:	89fb      	ldrh	r3, [r7, #14]
 8005a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1e:	d101      	bne.n	8005a24 <dec_lock+0x34>
 8005a20:	2300      	movs	r3, #0
 8005a22:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <dec_lock+0x40>
 8005a2a:	89fb      	ldrh	r3, [r7, #14]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a30:	4910      	ldr	r1, [pc, #64]	; (8005a74 <dec_lock+0x84>)
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	330a      	adds	r3, #10
 8005a40:	89fa      	ldrh	r2, [r7, #14]
 8005a42:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <dec_lock+0x6c>
 8005a4a:	490a      	ldr	r1, [pc, #40]	; (8005a74 <dec_lock+0x84>)
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	737b      	strb	r3, [r7, #13]
 8005a60:	e001      	b.n	8005a66 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a62:	2302      	movs	r3, #2
 8005a64:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a66:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20004408 	.word	0x20004408

08005a78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e016      	b.n	8005ab4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a86:	4910      	ldr	r1, [pc, #64]	; (8005ac8 <clear_lock+0x50>)
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d108      	bne.n	8005aae <clear_lock+0x36>
 8005a9c:	490a      	ldr	r1, [pc, #40]	; (8005ac8 <clear_lock+0x50>)
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d9e5      	bls.n	8005a86 <clear_lock+0xe>
	}
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20004408 	.word	0x20004408

08005acc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d038      	beq.n	8005b54 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005ae8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	2301      	movs	r3, #1
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	f7ff fd7f 	bl	80055f8 <disk_write>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e026      	b.n	8005b54 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d218      	bcs.n	8005b54 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	e010      	b.n	8005b4e <sync_window+0x82>
					wsect += fs->fsize;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	2301      	movs	r3, #1
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	f7ff fd58 	bl	80055f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d8eb      	bhi.n	8005b2c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d01b      	beq.n	8005bb0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff ffa7 	bl	8005acc <sync_window>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d113      	bne.n	8005bb0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	2301      	movs	r3, #1
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	f7ff fd10 	bl	80055b8 <disk_read>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff82 	bl	8005acc <sync_window>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 809b 	bne.w	8005d0a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	f040 8088 	bne.w	8005cf0 <sync_fs+0x136>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	f040 8082 	bne.w	8005cf0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fd5b 	bl	80056b0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2255      	movs	r2, #85	; 0x55
 8005bfe:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	22aa      	movs	r2, #170	; 0xaa
 8005c06:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2252      	movs	r2, #82	; 0x52
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2252      	movs	r2, #82	; 0x52
 8005c14:	705a      	strb	r2, [r3, #1]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2261      	movs	r2, #97	; 0x61
 8005c1a:	709a      	strb	r2, [r3, #2]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2241      	movs	r2, #65	; 0x41
 8005c20:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2272      	movs	r2, #114	; 0x72
 8005c26:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2272      	movs	r2, #114	; 0x72
 8005c2e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2241      	movs	r2, #65	; 0x41
 8005c36:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2261      	movs	r2, #97	; 0x61
 8005c3e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c7a:	0e1b      	lsrs	r3, r3, #24
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005cbc:	0e1b      	lsrs	r3, r3, #24
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f7ff fc88 	bl	80055f8 <disk_write>
			fs->fsi_flag = 0;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fc9c 	bl	8005638 <disk_ioctl>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	3b02      	subs	r3, #2
 8005d22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d2a:	3b02      	subs	r3, #2
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d301      	bcc.n	8005d36 <clust2sect+0x22>
 8005d32:	2300      	movs	r3, #0
 8005d34:	e00a      	b.n	8005d4c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	fb03 f202 	mul.w	r2, r3, r2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005d4a:	4413      	add	r3, r2
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b086      	sub	sp, #24
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d905      	bls.n	8005d72 <get_fat+0x1c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d302      	bcc.n	8005d78 <get_fat+0x22>
		val = 1;	/* Internal error */
 8005d72:	2301      	movs	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e0a3      	b.n	8005ec0 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d068      	beq.n	8005e5a <get_fat+0x104>
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	f300 808f 	bgt.w	8005eac <get_fat+0x156>
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d002      	beq.n	8005d98 <get_fat+0x42>
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d040      	beq.n	8005e18 <get_fat+0xc2>
 8005d96:	e089      	b.n	8005eac <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0a5b      	lsrs	r3, r3, #9
 8005db0:	4413      	add	r3, r2
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fed2 	bl	8005b5e <move_window>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d178      	bne.n	8005eb2 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	60fa      	str	r2, [r7, #12]
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	5cd3      	ldrb	r3, [r2, r3]
 8005dce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	0a5b      	lsrs	r3, r3, #9
 8005dda:	4413      	add	r3, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff febd 	bl	8005b5e <move_window>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d165      	bne.n	8005eb6 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	5cd3      	ldrb	r3, [r2, r3]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	461a      	mov	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <get_fat+0xb8>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	e002      	b.n	8005e14 <get_fat+0xbe>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e14:	617b      	str	r3, [r7, #20]
			break;
 8005e16:	e053      	b.n	8005ec0 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	4413      	add	r3, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fe99 	bl	8005b5e <move_window>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d143      	bne.n	8005eba <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	3301      	adds	r3, #1
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	617b      	str	r3, [r7, #20]
			break;
 8005e58:	e032      	b.n	8005ec0 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	09db      	lsrs	r3, r3, #7
 8005e64:	4413      	add	r3, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fe78 	bl	8005b5e <move_window>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d124      	bne.n	8005ebe <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4413      	add	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3303      	adds	r3, #3
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	061a      	lsls	r2, r3, #24
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	4313      	orrs	r3, r2
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	3201      	adds	r2, #1
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	0212      	lsls	r2, r2, #8
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ea8:	617b      	str	r3, [r7, #20]
			break;
 8005eaa:	e009      	b.n	8005ec0 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e006      	b.n	8005ec0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ebe:	bf00      	nop
		}
	}

	return val;
 8005ec0:	697b      	ldr	r3, [r7, #20]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b088      	sub	sp, #32
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d905      	bls.n	8005ee8 <put_fat+0x1e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d302      	bcc.n	8005eee <put_fat+0x24>
		res = FR_INT_ERR;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e0f6      	b.n	80060dc <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	f000 809e 	beq.w	8006036 <put_fat+0x16c>
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	f300 80e4 	bgt.w	80060c8 <put_fat+0x1fe>
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d002      	beq.n	8005f0a <put_fat+0x40>
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d06f      	beq.n	8005fe8 <put_fat+0x11e>
 8005f08:	e0de      	b.n	80060c8 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	0a5b      	lsrs	r3, r3, #9
 8005f22:	4413      	add	r3, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff fe19 	bl	8005b5e <move_window>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f30:	7ffb      	ldrb	r3, [r7, #31]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 80cb 	bne.w	80060ce <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	617a      	str	r2, [r7, #20]
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00d      	beq.n	8005f6e <put_fat+0xa4>
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b25b      	sxtb	r3, r3
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	b25a      	sxtb	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	b25b      	sxtb	r3, r3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e001      	b.n	8005f72 <put_fat+0xa8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	0a5b      	lsrs	r3, r3, #9
 8005f88:	4413      	add	r3, r2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff fde6 	bl	8005b5e <move_window>
 8005f92:	4603      	mov	r3, r0
 8005f94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 809a 	bne.w	80060d2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <put_fat+0xf2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	091b      	lsrs	r3, r3, #4
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e00e      	b.n	8005fda <put_fat+0x110>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	f023 030f 	bic.w	r3, r3, #15
 8005fc6:	b25a      	sxtb	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	b25b      	sxtb	r3, r3
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005fe6:	e079      	b.n	80060dc <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	4413      	add	r3, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fdb1 	bl	8005b5e <move_window>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006000:	7ffb      	ldrb	r3, [r7, #31]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d167      	bne.n	80060d6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	b29b      	uxth	r3, r3
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	b29a      	uxth	r2, r3
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	3301      	adds	r3, #1
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006034:	e052      	b.n	80060dc <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	09db      	lsrs	r3, r3, #7
 8006040:	4413      	add	r3, r2
 8006042:	4619      	mov	r1, r3
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff fd8a 	bl	8005b5e <move_window>
 800604a:	4603      	mov	r3, r0
 800604c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800604e:	7ffb      	ldrb	r3, [r7, #31]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d142      	bne.n	80060da <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	3303      	adds	r3, #3
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	061a      	lsls	r2, r3, #24
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3302      	adds	r3, #2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	4313      	orrs	r3, r2
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	3201      	adds	r2, #1
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	0212      	lsls	r2, r2, #8
 800607c:	4313      	orrs	r3, r2
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4313      	orrs	r3, r2
 800608c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	b29b      	uxth	r3, r3
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29a      	uxth	r2, r3
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0c1a      	lsrs	r2, r3, #16
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	3302      	adds	r3, #2
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0e1a      	lsrs	r2, r3, #24
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	3303      	adds	r3, #3
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80060c6:	e009      	b.n	80060dc <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80060c8:	2302      	movs	r3, #2
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e006      	b.n	80060dc <put_fat+0x212>
			if (res != FR_OK) break;
 80060ce:	bf00      	nop
 80060d0:	e004      	b.n	80060dc <put_fat+0x212>
			if (res != FR_OK) break;
 80060d2:	bf00      	nop
 80060d4:	e002      	b.n	80060dc <put_fat+0x212>
			if (res != FR_OK) break;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <put_fat+0x212>
			if (res != FR_OK) break;
 80060da:	bf00      	nop
		}
	}

	return res;
 80060dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d905      	bls.n	8006102 <remove_chain+0x1c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <remove_chain+0x22>
		res = FR_INT_ERR;
 8006102:	2302      	movs	r3, #2
 8006104:	73fb      	strb	r3, [r7, #15]
 8006106:	e043      	b.n	8006190 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800610c:	e036      	b.n	800617c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fe20 	bl	8005d56 <get_fat>
 8006116:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d035      	beq.n	800618a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d102      	bne.n	800612a <remove_chain+0x44>
 8006124:	2302      	movs	r3, #2
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	e032      	b.n	8006190 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <remove_chain+0x52>
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
 8006136:	e02b      	b.n	8006190 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006138:	2200      	movs	r2, #0
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fec4 	bl	8005eca <put_fat>
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d120      	bne.n	800618e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d00f      	beq.n	8006178 <remove_chain+0x92>
				fs->free_clust++;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	b2da      	uxtb	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d3c2      	bcc.n	800610e <remove_chain+0x28>
 8006188:	e002      	b.n	8006190 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800618e:	bf00      	nop
		}
	}

	return res;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80061b0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <create_chain+0x2a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d31c      	bcc.n	80061fe <create_chain+0x64>
 80061c4:	2301      	movs	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	e019      	b.n	80061fe <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fdc2 	bl	8005d56 <get_fat>
 80061d2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d801      	bhi.n	80061de <create_chain+0x44>
 80061da:	2301      	movs	r3, #1
 80061dc:	e076      	b.n	80062cc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d101      	bne.n	80061ea <create_chain+0x50>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	e070      	b.n	80062cc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d201      	bcs.n	80061fa <create_chain+0x60>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	e068      	b.n	80062cc <create_chain+0x132>
		scl = clst;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	3301      	adds	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	d307      	bcc.n	8006224 <create_chain+0x8a>
			ncl = 2;
 8006214:	2302      	movs	r3, #2
 8006216:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	429a      	cmp	r2, r3
 800621e:	d901      	bls.n	8006224 <create_chain+0x8a>
 8006220:	2300      	movs	r3, #0
 8006222:	e053      	b.n	80062cc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006224:	6979      	ldr	r1, [r7, #20]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fd95 	bl	8005d56 <get_fat>
 800622c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00e      	beq.n	8006252 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d002      	beq.n	8006242 <create_chain+0xa8>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <create_chain+0xac>
			return cs;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	e042      	b.n	80062cc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	429a      	cmp	r2, r3
 800624c:	d1d9      	bne.n	8006202 <create_chain+0x68>
 800624e:	2300      	movs	r3, #0
 8006250:	e03c      	b.n	80062cc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006252:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006254:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006258:	6979      	ldr	r1, [r7, #20]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe35 	bl	8005eca <put_fat>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <create_chain+0xe4>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fe28 	bl	8005eca <put_fat>
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d11a      	bne.n	80062ba <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d018      	beq.n	80062ca <create_chain+0x130>
			fs->free_clust--;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80062b8:	e007      	b.n	80062ca <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d102      	bne.n	80062c6 <create_chain+0x12c>
 80062c0:	f04f 33ff 	mov.w	r3, #4294967295
 80062c4:	e000      	b.n	80062c8 <create_chain+0x12e>
 80062c6:	2301      	movs	r3, #1
 80062c8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80062ca:	697b      	ldr	r3, [r7, #20]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80062e4:	3304      	adds	r3, #4
 80062e6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	0a5b      	lsrs	r3, r3, #9
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80062f2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80062f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1d1a      	adds	r2, r3, #4
 8006300:	613a      	str	r2, [r7, #16]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <clmt_clust+0x3c>
 800630c:	2300      	movs	r3, #0
 800630e:	e010      	b.n	8006332 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d307      	bcc.n	8006328 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	3304      	adds	r3, #4
 8006324:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006326:	e7e9      	b.n	80062fc <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006328:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4413      	add	r3, r2
}
 8006332:	4618      	mov	r0, r3
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	b29a      	uxth	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006356:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d007      	beq.n	800636e <dir_sdi+0x32>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006364:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	429a      	cmp	r2, r3
 800636c:	d301      	bcc.n	8006372 <dir_sdi+0x36>
		return FR_INT_ERR;
 800636e:	2302      	movs	r3, #2
 8006370:	e074      	b.n	800645c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10c      	bne.n	8006392 <dir_sdi+0x56>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800637e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006382:	2b03      	cmp	r3, #3
 8006384:	d105      	bne.n	8006392 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800638c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006390:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d111      	bne.n	80063bc <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800639e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80063a2:	461a      	mov	r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d301      	bcc.n	80063ae <dir_sdi+0x72>
			return FR_INT_ERR;
 80063aa:	2302      	movs	r3, #2
 80063ac:	e056      	b.n	800645c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063b4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	e032      	b.n	8006422 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063c2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80063ca:	e01e      	b.n	800640a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063d2:	6979      	ldr	r1, [r7, #20]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fcbe 	bl	8005d56 <get_fat>
 80063da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d101      	bne.n	80063e8 <dir_sdi+0xac>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e039      	b.n	800645c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d907      	bls.n	80063fe <dir_sdi+0xc2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d301      	bcc.n	8006402 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80063fe:	2302      	movs	r3, #2
 8006400:	e02c      	b.n	800645c <dir_sdi+0x120>
			idx -= ic;
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	429a      	cmp	r2, r3
 8006410:	d2dc      	bcs.n	80063cc <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fc7a 	bl	8005d14 <clust2sect>
 8006420:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <dir_sdi+0xf8>
 8006430:	2302      	movs	r3, #2
 8006432:	e013      	b.n	800645c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	091a      	lsrs	r2, r3, #4
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006448:	461a      	mov	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	015b      	lsls	r3, r3, #5
 8006452:	441a      	add	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006474:	3301      	adds	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <dir_next+0x26>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <dir_next+0x2a>
		return FR_NO_FILE;
 800648a:	2304      	movs	r3, #4
 800648c:	e0dd      	b.n	800664a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 80c6 	bne.w	8006626 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064b8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80064bc:	461a      	mov	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	f0c0 80b0 	bcc.w	8006626 <dir_next+0x1c2>
				return FR_NO_FILE;
 80064c6:	2304      	movs	r3, #4
 80064c8:	e0bf      	b.n	800664a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80064d4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80064d8:	3a01      	subs	r2, #1
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 80a2 	bne.w	8006626 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7ff fc30 	bl	8005d56 <get_fat>
 80064f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d801      	bhi.n	8006502 <dir_next+0x9e>
 80064fe:	2302      	movs	r3, #2
 8006500:	e0a3      	b.n	800664a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d101      	bne.n	800650e <dir_next+0xaa>
 800650a:	2301      	movs	r3, #1
 800650c:	e09d      	b.n	800664a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006514:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	429a      	cmp	r2, r3
 800651c:	d374      	bcc.n	8006608 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <dir_next+0xc4>
 8006524:	2304      	movs	r3, #4
 8006526:	e090      	b.n	800664a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7ff fe2f 	bl	800619a <create_chain>
 800653c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <dir_next+0xe4>
 8006544:	2307      	movs	r3, #7
 8006546:	e080      	b.n	800664a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <dir_next+0xee>
 800654e:	2302      	movs	r3, #2
 8006550:	e07b      	b.n	800664a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d101      	bne.n	800655e <dir_next+0xfa>
 800655a:	2301      	movs	r3, #1
 800655c:	e075      	b.n	800664a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fab1 	bl	8005acc <sync_window>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <dir_next+0x110>
 8006570:	2301      	movs	r3, #1
 8006572:	e06a      	b.n	800664a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800657a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff f895 	bl	80056b0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8006592:	6979      	ldr	r1, [r7, #20]
 8006594:	4610      	mov	r0, r2
 8006596:	f7ff fbbd 	bl	8005d14 <clust2sect>
 800659a:	4603      	mov	r3, r0
 800659c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e01b      	b.n	80065de <dir_next+0x17a>
						dp->fs->wflag = 1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fa87 	bl	8005acc <sync_window>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <dir_next+0x164>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e040      	b.n	800664a <dir_next+0x1e6>
						dp->fs->winsect++;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065ce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80065d2:	3201      	adds	r2, #1
 80065d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3301      	adds	r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065e4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80065e8:	461a      	mov	r2, r3
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d3da      	bcc.n	80065a6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065f6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	1a8a      	subs	r2, r1, r2
 8006604:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fb7b 	bl	8005d14 <clust2sect>
 800661e:	4602      	mov	r2, r0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006636:	461a      	mov	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	015b      	lsls	r3, r3, #5
 8006640:	441a      	add	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}

08006652 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800665c:	2100      	movs	r1, #0
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fe6c 	bl	800633c <dir_sdi>
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d131      	bne.n	80066d2 <dir_alloc+0x80>
		n = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7ff fa6c 	bl	8005b5e <move_window>
 8006686:	4603      	mov	r3, r0
 8006688:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11f      	bne.n	80066d0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2be5      	cmp	r3, #229	; 0xe5
 800669a:	d005      	beq.n	80066a8 <dir_alloc+0x56>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	3301      	adds	r3, #1
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d102      	bne.n	80066bc <dir_alloc+0x6a>
 80066b6:	e00c      	b.n	80066d2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066b8:	2300      	movs	r3, #0
 80066ba:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80066bc:	2101      	movs	r1, #1
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff fed0 	bl	8006464 <dir_next>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0d1      	beq.n	8006672 <dir_alloc+0x20>
 80066ce:	e000      	b.n	80066d2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80066d0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d101      	bne.n	80066dc <dir_alloc+0x8a>
 80066d8:	2307      	movs	r3, #7
 80066da:	73fb      	strb	r3, [r7, #15]
	return res;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	331b      	adds	r3, #27
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	b21a      	sxth	r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	331a      	adds	r3, #26
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b21b      	sxth	r3, r3
 8006702:	4313      	orrs	r3, r2
 8006704:	b21b      	sxth	r3, r3
 8006706:	b29b      	uxth	r3, r3
 8006708:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006710:	2b03      	cmp	r3, #3
 8006712:	d10f      	bne.n	8006734 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	3315      	adds	r3, #21
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	b21a      	sxth	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b21b      	sxth	r3, r3
 8006726:	4313      	orrs	r3, r2
 8006728:	b21b      	sxth	r3, r3
 800672a:	b29b      	uxth	r3, r3
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

	return cl;
 8006734:	68fb      	ldr	r3, [r7, #12]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	331a      	adds	r3, #26
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	331b      	adds	r3, #27
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	0c1a      	lsrs	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3314      	adds	r3, #20
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	b29b      	uxth	r3, r3
 8006776:	0a1b      	lsrs	r3, r3, #8
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3315      	adds	r3, #21
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006794:	2100      	movs	r1, #0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fdd0 	bl	800633c <dir_sdi>
 800679c:	4603      	mov	r3, r0
 800679e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <dir_find+0x1e>
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	e03b      	b.n	8006822 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f7ff f9d0 	bl	8005b5e <move_window>
 80067be:	4603      	mov	r3, r0
 80067c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d128      	bne.n	800681a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067ce:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <dir_find+0x56>
 80067dc:	2304      	movs	r3, #4
 80067de:	75fb      	strb	r3, [r7, #23]
 80067e0:	e01e      	b.n	8006820 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	330b      	adds	r3, #11
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <dir_find+0x7a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80067f6:	220b      	movs	r2, #11
 80067f8:	4619      	mov	r1, r3
 80067fa:	6938      	ldr	r0, [r7, #16]
 80067fc:	f7fe ff72 	bl	80056e4 <mem_cmp>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006806:	2100      	movs	r1, #0
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff fe2b 	bl	8006464 <dir_next>
 800680e:	4603      	mov	r3, r0
 8006810:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0c8      	beq.n	80067aa <dir_find+0x1e>
 8006818:	e002      	b.n	8006820 <dir_find+0x94>
		if (res != FR_OK) break;
 800681a:	bf00      	nop
 800681c:	e000      	b.n	8006820 <dir_find+0x94>
			break;
 800681e:	bf00      	nop

	return res;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006832:	2101      	movs	r1, #1
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff0c 	bl	8006652 <dir_alloc>
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d126      	bne.n	8006892 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7ff f983 	bl	8005b5e <move_window>
 8006858:	4603      	mov	r3, r0
 800685a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d117      	bne.n	8006892 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006868:	2220      	movs	r2, #32
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe ff1f 	bl	80056b0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800687e:	220b      	movs	r2, #11
 8006880:	4619      	mov	r1, r3
 8006882:	f7fe fef7 	bl	8005674 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e002      	b.n	80068b4 <create_name+0x18>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b2f      	cmp	r3, #47	; 0x2f
 80068ba:	d0f8      	beq.n	80068ae <create_name+0x12>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b5c      	cmp	r3, #92	; 0x5c
 80068c2:	d0f4      	beq.n	80068ae <create_name+0x12>
	sfn = dp->fn;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80068ca:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80068cc:	220b      	movs	r2, #11
 80068ce:	2120      	movs	r1, #32
 80068d0:	68b8      	ldr	r0, [r7, #8]
 80068d2:	f7fe feed 	bl	80056b0 <mem_set>
	si = i = b = 0; ni = 8;
 80068d6:	2300      	movs	r3, #0
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	2300      	movs	r3, #0
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	2308      	movs	r3, #8
 80068e4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	617a      	str	r2, [r7, #20]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80068f4:	7fbb      	ldrb	r3, [r7, #30]
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d953      	bls.n	80069a2 <create_name+0x106>
 80068fa:	7fbb      	ldrb	r3, [r7, #30]
 80068fc:	2b2f      	cmp	r3, #47	; 0x2f
 80068fe:	d050      	beq.n	80069a2 <create_name+0x106>
 8006900:	7fbb      	ldrb	r3, [r7, #30]
 8006902:	2b5c      	cmp	r3, #92	; 0x5c
 8006904:	d04d      	beq.n	80069a2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006906:	7fbb      	ldrb	r3, [r7, #30]
 8006908:	2b2e      	cmp	r3, #46	; 0x2e
 800690a:	d003      	beq.n	8006914 <create_name+0x78>
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	429a      	cmp	r2, r3
 8006912:	d30f      	bcc.n	8006934 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2b08      	cmp	r3, #8
 8006918:	d102      	bne.n	8006920 <create_name+0x84>
 800691a:	7fbb      	ldrb	r3, [r7, #30]
 800691c:	2b2e      	cmp	r3, #46	; 0x2e
 800691e:	d001      	beq.n	8006924 <create_name+0x88>
 8006920:	2306      	movs	r3, #6
 8006922:	e073      	b.n	8006a0c <create_name+0x170>
			i = 8; ni = 11;
 8006924:	2308      	movs	r3, #8
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	230b      	movs	r3, #11
 800692a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800692c:	7ffb      	ldrb	r3, [r7, #31]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	77fb      	strb	r3, [r7, #31]
 8006932:	e035      	b.n	80069a0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006934:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da08      	bge.n	800694e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800693c:	7ffb      	ldrb	r3, [r7, #31]
 800693e:	f043 0303 	orr.w	r3, r3, #3
 8006942:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006944:	7fbb      	ldrb	r3, [r7, #30]
 8006946:	3b80      	subs	r3, #128	; 0x80
 8006948:	4a32      	ldr	r2, [pc, #200]	; (8006a14 <create_name+0x178>)
 800694a:	5cd3      	ldrb	r3, [r2, r3]
 800694c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800694e:	7fbb      	ldrb	r3, [r7, #30]
 8006950:	4619      	mov	r1, r3
 8006952:	4831      	ldr	r0, [pc, #196]	; (8006a18 <create_name+0x17c>)
 8006954:	f7fe feec 	bl	8005730 <chk_chr>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <create_name+0xc6>
				return FR_INVALID_NAME;
 800695e:	2306      	movs	r3, #6
 8006960:	e054      	b.n	8006a0c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006962:	7fbb      	ldrb	r3, [r7, #30]
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d907      	bls.n	8006978 <create_name+0xdc>
 8006968:	7fbb      	ldrb	r3, [r7, #30]
 800696a:	2b5a      	cmp	r3, #90	; 0x5a
 800696c:	d804      	bhi.n	8006978 <create_name+0xdc>
				b |= 2;
 800696e:	7ffb      	ldrb	r3, [r7, #31]
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e00c      	b.n	8006992 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006978:	7fbb      	ldrb	r3, [r7, #30]
 800697a:	2b60      	cmp	r3, #96	; 0x60
 800697c:	d909      	bls.n	8006992 <create_name+0xf6>
 800697e:	7fbb      	ldrb	r3, [r7, #30]
 8006980:	2b7a      	cmp	r3, #122	; 0x7a
 8006982:	d806      	bhi.n	8006992 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006984:	7ffb      	ldrb	r3, [r7, #31]
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	7fbb      	ldrb	r3, [r7, #30]
 800698e:	3b20      	subs	r3, #32
 8006990:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	613a      	str	r2, [r7, #16]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	4413      	add	r3, r2
 800699c:	7fba      	ldrb	r2, [r7, #30]
 800699e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80069a0:	e7a1      	b.n	80068e6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	441a      	add	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80069ac:	7fbb      	ldrb	r3, [r7, #30]
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d801      	bhi.n	80069b6 <create_name+0x11a>
 80069b2:	2304      	movs	r3, #4
 80069b4:	e000      	b.n	80069b8 <create_name+0x11c>
 80069b6:	2300      	movs	r3, #0
 80069b8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <create_name+0x128>
 80069c0:	2306      	movs	r3, #6
 80069c2:	e023      	b.n	8006a0c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2be5      	cmp	r3, #229	; 0xe5
 80069ca:	d102      	bne.n	80069d2 <create_name+0x136>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2205      	movs	r2, #5
 80069d0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d102      	bne.n	80069de <create_name+0x142>
 80069d8:	7ffb      	ldrb	r3, [r7, #31]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d103      	bne.n	80069f0 <create_name+0x154>
 80069e8:	7fbb      	ldrb	r3, [r7, #30]
 80069ea:	f043 0310 	orr.w	r3, r3, #16
 80069ee:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80069f0:	7ffb      	ldrb	r3, [r7, #31]
 80069f2:	f003 030c 	and.w	r3, r3, #12
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d103      	bne.n	8006a02 <create_name+0x166>
 80069fa:	7fbb      	ldrb	r3, [r7, #30]
 80069fc:	f043 0308 	orr.w	r3, r3, #8
 8006a00:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	330b      	adds	r3, #11
 8006a06:	7fba      	ldrb	r2, [r7, #30]
 8006a08:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a0a:	2300      	movs	r3, #0
#endif
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	080080bc 	.word	0x080080bc
 8006a18:	08008038 	.word	0x08008038

08006a1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b2f      	cmp	r3, #47	; 0x2f
 8006a2c:	d003      	beq.n	8006a36 <follow_path+0x1a>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b5c      	cmp	r3, #92	; 0x5c
 8006a34:	d102      	bne.n	8006a3c <follow_path+0x20>
		path++;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b1f      	cmp	r3, #31
 8006a4a:	d80a      	bhi.n	8006a62 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fc74 	bl	800633c <dir_sdi>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006a60:	e045      	b.n	8006aee <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a62:	463b      	mov	r3, r7
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ff18 	bl	800689c <create_name>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d136      	bne.n	8006ae4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff fe88 	bl	800678c <dir_find>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a86:	7adb      	ldrb	r3, [r3, #11]
 8006a88:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d128      	bne.n	8006ae8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d123      	bne.n	8006ae8 <follow_path+0xcc>
 8006aa0:	2305      	movs	r3, #5
 8006aa2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006aa4:	e020      	b.n	8006ae8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d11d      	bne.n	8006aec <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ab6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	330b      	adds	r3, #11
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006ac6:	2305      	movs	r3, #5
 8006ac8:	73fb      	strb	r3, [r7, #15]
 8006aca:	e010      	b.n	8006aee <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fe06 	bl	80066e6 <ld_clust>
 8006ada:	4602      	mov	r2, r0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ae2:	e7be      	b.n	8006a62 <follow_path+0x46>
			if (res != FR_OK) break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <follow_path+0xd2>
				break;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aec:	bf00      	nop
		}
	}

	return res;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b00:	f04f 33ff 	mov.w	r3, #4294967295
 8006b04:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d031      	beq.n	8006b72 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e002      	b.n	8006b1c <get_ldnumber+0x24>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d903      	bls.n	8006b2c <get_ldnumber+0x34>
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b3a      	cmp	r3, #58	; 0x3a
 8006b2a:	d1f4      	bne.n	8006b16 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b3a      	cmp	r3, #58	; 0x3a
 8006b32:	d11c      	bne.n	8006b6e <get_ldnumber+0x76>
			tp = *path;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	60fa      	str	r2, [r7, #12]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	3b30      	subs	r3, #48	; 0x30
 8006b44:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b09      	cmp	r3, #9
 8006b4a:	d80e      	bhi.n	8006b6a <get_ldnumber+0x72>
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d10a      	bne.n	8006b6a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <get_ldnumber+0x72>
					vol = (int)i;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	3301      	adds	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	e002      	b.n	8006b74 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b72:	693b      	ldr	r3, [r7, #16]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
	...

08006b80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fe ffdd 	bl	8005b5e <move_window>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <check_fs+0x2e>
		return 3;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e04a      	b.n	8006c44 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	b21a      	sxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006bc2:	b21b      	sxth	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b21b      	sxth	r3, r3
 8006bc8:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <check_fs+0xcc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d001      	beq.n	8006bd2 <check_fs+0x52>
		return 2;
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e038      	b.n	8006c44 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3336      	adds	r3, #54	; 0x36
 8006bd6:	3303      	adds	r3, #3
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	061a      	lsls	r2, r3, #24
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3336      	adds	r3, #54	; 0x36
 8006be0:	3302      	adds	r3, #2
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	4313      	orrs	r3, r2
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	3236      	adds	r2, #54	; 0x36
 8006bec:	3201      	adds	r2, #1
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	0212      	lsls	r2, r2, #8
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c00:	4a13      	ldr	r2, [pc, #76]	; (8006c50 <check_fs+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <check_fs+0x8a>
		return 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e01c      	b.n	8006c44 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3352      	adds	r3, #82	; 0x52
 8006c0e:	3303      	adds	r3, #3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	061a      	lsls	r2, r3, #24
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3352      	adds	r3, #82	; 0x52
 8006c18:	3302      	adds	r3, #2
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	3252      	adds	r2, #82	; 0x52
 8006c24:	3201      	adds	r2, #1
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	0212      	lsls	r2, r2, #8
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c38:	4a05      	ldr	r2, [pc, #20]	; (8006c50 <check_fs+0xd0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d101      	bne.n	8006c42 <check_fs+0xc2>
		return 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <check_fs+0xc4>

	return 1;
 8006c42:	2301      	movs	r3, #1
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	ffffaa55 	.word	0xffffaa55
 8006c50:	00544146 	.word	0x00544146

08006c54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b096      	sub	sp, #88	; 0x58
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f7ff ff45 	bl	8006af8 <get_ldnumber>
 8006c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da01      	bge.n	8006c7a <find_volume+0x26>
 8006c76:	230b      	movs	r3, #11
 8006c78:	e2a8      	b.n	80071cc <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c7a:	4a9d      	ldr	r2, [pc, #628]	; (8006ef0 <find_volume+0x29c>)
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <find_volume+0x3a>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	e29e      	b.n	80071cc <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c92:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01b      	beq.n	8006cd6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fc47 	bl	8005538 <disk_status>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10c      	bne.n	8006cd6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <find_volume+0x7e>
 8006cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006cce:	230a      	movs	r3, #10
 8006cd0:	e27c      	b.n	80071cc <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e27a      	b.n	80071cc <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fc3c 	bl	800556c <disk_initialize>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d06:	2303      	movs	r3, #3
 8006d08:	e260      	b.n	80071cc <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <find_volume+0xcc>
 8006d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006d1c:	230a      	movs	r3, #10
 8006d1e:	e255      	b.n	80071cc <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006d24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d28:	f7ff ff2a 	bl	8006b80 <check_fs>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006d32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d153      	bne.n	8006de2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d3e:	e028      	b.n	8006d92 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d4a:	4413      	add	r3, r2
 8006d4c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	3304      	adds	r3, #4
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d012      	beq.n	8006d7e <find_volume+0x12a>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	330b      	adds	r3, #11
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	061a      	lsls	r2, r3, #24
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	330a      	adds	r3, #10
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6c:	3209      	adds	r2, #9
 8006d6e:	7812      	ldrb	r2, [r2, #0]
 8006d70:	0212      	lsls	r2, r2, #8
 8006d72:	4313      	orrs	r3, r2
 8006d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d76:	3208      	adds	r2, #8
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	e000      	b.n	8006d80 <find_volume+0x12c>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3358      	adds	r3, #88	; 0x58
 8006d86:	443b      	add	r3, r7
 8006d88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8e:	3301      	adds	r3, #1
 8006d90:	643b      	str	r3, [r7, #64]	; 0x40
 8006d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d9d3      	bls.n	8006d40 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006d98:	2300      	movs	r3, #0
 8006d9a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <find_volume+0x154>
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	3b01      	subs	r3, #1
 8006da6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	3358      	adds	r3, #88	; 0x58
 8006dae:	443b      	add	r3, r7
 8006db0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006db4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <find_volume+0x174>
 8006dbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dc0:	f7ff fede 	bl	8006b80 <check_fs>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	e000      	b.n	8006dca <find_volume+0x176>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <find_volume+0x18e>
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd8:	3301      	adds	r3, #1
 8006dda:	643b      	str	r3, [r7, #64]	; 0x40
 8006ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d9e2      	bls.n	8006da8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006de2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d101      	bne.n	8006dee <find_volume+0x19a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e1ee      	b.n	80071cc <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <find_volume+0x1a6>
 8006df6:	230d      	movs	r3, #13
 8006df8:	e1e8      	b.n	80071cc <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	7b1b      	ldrb	r3, [r3, #12]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	7adb      	ldrb	r3, [r3, #11]
 8006e06:	b21b      	sxth	r3, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e10:	d001      	beq.n	8006e16 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8006e12:	230d      	movs	r3, #13
 8006e14:	e1da      	b.n	80071cc <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	7ddb      	ldrb	r3, [r3, #23]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	b21a      	sxth	r2, r3
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	7d9b      	ldrb	r3, [r3, #22]
 8006e22:	b21b      	sxth	r3, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d112      	bne.n	8006e58 <find_volume+0x204>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006e38:	061a      	lsls	r2, r3, #24
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006e40:	041b      	lsls	r3, r3, #16
 8006e42:	4313      	orrs	r3, r2
 8006e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e46:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006e4a:	0212      	lsls	r2, r2, #8
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e50:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006e54:	4313      	orrs	r3, r2
 8006e56:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	7c1a      	ldrb	r2, [r3, #16]
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d006      	beq.n	8006e82 <find_volume+0x22e>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d001      	beq.n	8006e82 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8006e7e:	230d      	movs	r3, #13
 8006e80:	e1a4      	b.n	80071cc <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8c:	fb02 f303 	mul.w	r3, r2, r3
 8006e90:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	7b5a      	ldrb	r2, [r3, #13]
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <find_volume+0x268>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006eac:	461a      	mov	r2, r3
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8006ebc:	230d      	movs	r3, #13
 8006ebe:	e185      	b.n	80071cc <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	7c9b      	ldrb	r3, [r3, #18]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	b21a      	sxth	r2, r3
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	7c5b      	ldrb	r3, [r3, #17]
 8006ecc:	b21b      	sxth	r3, r3
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	b21b      	sxth	r3, r3
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006eea:	230d      	movs	r3, #13
 8006eec:	e16e      	b.n	80071cc <find_volume+0x578>
 8006eee:	bf00      	nop
 8006ef0:	20004400 	.word	0x20004400

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	7d1b      	ldrb	r3, [r3, #20]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	b21a      	sxth	r2, r3
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	7cdb      	ldrb	r3, [r3, #19]
 8006f00:	b21b      	sxth	r3, r3
 8006f02:	4313      	orrs	r3, r2
 8006f04:	b21b      	sxth	r3, r3
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d112      	bne.n	8006f36 <find_volume+0x2e2>
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006f16:	061a      	lsls	r2, r3, #24
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	4313      	orrs	r3, r2
 8006f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f24:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006f28:	0212      	lsls	r2, r2, #8
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	7bdb      	ldrb	r3, [r3, #15]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b21a      	sxth	r2, r3
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	7b9b      	ldrb	r3, [r3, #14]
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b21b      	sxth	r3, r3
 8006f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <find_volume+0x300>
 8006f50:	230d      	movs	r3, #13
 8006f52:	e13b      	b.n	80071cc <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006f54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f58:	4413      	add	r3, r2
 8006f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006f60:	0912      	lsrs	r2, r2, #4
 8006f62:	b292      	uxth	r2, r2
 8006f64:	4413      	add	r3, r2
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d201      	bcs.n	8006f74 <find_volume+0x320>
 8006f70:	230d      	movs	r3, #13
 8006f72:	e12b      	b.n	80071cc <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f7c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <find_volume+0x33c>
 8006f8c:	230d      	movs	r3, #13
 8006f8e:	e11d      	b.n	80071cc <find_volume+0x578>
	fmt = FS_FAT12;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d902      	bls.n	8006fa6 <find_volume+0x352>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d902      	bls.n	8006fb6 <find_volume+0x362>
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006fc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fcc:	441a      	add	r2, r3
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	441a      	add	r2, r3
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d121      	bne.n	800702c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <find_volume+0x3a2>
 8006ff2:	230d      	movs	r3, #13
 8006ff4:	e0ea      	b.n	80071cc <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ffc:	061a      	lsls	r2, r3, #24
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	4313      	orrs	r3, r2
 8007008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800700e:	0212      	lsls	r2, r2, #8
 8007010:	4313      	orrs	r3, r2
 8007012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007014:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007018:	431a      	orrs	r2, r3
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	647b      	str	r3, [r7, #68]	; 0x44
 800702a:	e025      	b.n	8007078 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <find_volume+0x3e6>
 8007036:	230d      	movs	r3, #13
 8007038:	e0c8      	b.n	80071cc <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	441a      	add	r2, r3
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800704a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800704e:	2b02      	cmp	r3, #2
 8007050:	d104      	bne.n	800705c <find_volume+0x408>
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	e00c      	b.n	8007076 <find_volume+0x422>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007062:	4613      	mov	r3, r2
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4413      	add	r3, r2
 8007068:	085a      	lsrs	r2, r3, #1
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007076:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800707e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007080:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007084:	0a5b      	lsrs	r3, r3, #9
 8007086:	429a      	cmp	r2, r3
 8007088:	d201      	bcs.n	800708e <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800708a:	230d      	movs	r3, #13
 800708c:	e09e      	b.n	80071cc <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	f04f 32ff 	mov.w	r2, #4294967295
 8007094:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80070ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d177      	bne.n	80071a4 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	b21a      	sxth	r2, r3
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070c4:	b21b      	sxth	r3, r3
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b21b      	sxth	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d16a      	bne.n	80071a4 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80070ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d0:	3301      	adds	r3, #1
 80070d2:	4619      	mov	r1, r3
 80070d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070d6:	f7fe fd42 	bl	8005b5e <move_window>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d161      	bne.n	80071a4 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	b21a      	sxth	r2, r3
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	4313      	orrs	r3, r2
 80070fc:	b21b      	sxth	r3, r3
 80070fe:	4a35      	ldr	r2, [pc, #212]	; (80071d4 <find_volume+0x580>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d14f      	bne.n	80071a4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	78db      	ldrb	r3, [r3, #3]
 8007108:	061a      	lsls	r2, r3, #24
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	789b      	ldrb	r3, [r3, #2]
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	4313      	orrs	r3, r2
 8007112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007114:	7852      	ldrb	r2, [r2, #1]
 8007116:	0212      	lsls	r2, r2, #8
 8007118:	4313      	orrs	r3, r2
 800711a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	4a2d      	ldr	r2, [pc, #180]	; (80071d8 <find_volume+0x584>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d13e      	bne.n	80071a4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800712c:	061a      	lsls	r2, r3, #24
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	4313      	orrs	r3, r2
 8007138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800713a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800713e:	0212      	lsls	r2, r2, #8
 8007140:	4313      	orrs	r3, r2
 8007142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007144:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007148:	4313      	orrs	r3, r2
 800714a:	4a24      	ldr	r2, [pc, #144]	; (80071dc <find_volume+0x588>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d129      	bne.n	80071a4 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007156:	061a      	lsls	r2, r3, #24
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	4313      	orrs	r3, r2
 8007162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007164:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007168:	0212      	lsls	r2, r2, #8
 800716a:	4313      	orrs	r3, r2
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007172:	431a      	orrs	r2, r3
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007180:	061a      	lsls	r2, r3, #24
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	4313      	orrs	r3, r2
 800718c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800718e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007192:	0212      	lsls	r2, r2, #8
 8007194:	4313      	orrs	r3, r2
 8007196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007198:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800719c:	431a      	orrs	r2, r3
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80071aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <find_volume+0x58c>)
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <find_volume+0x58c>)
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <find_volume+0x58c>)
 80071bc:	881a      	ldrh	r2, [r3, #0]
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80071c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071c6:	f7fe fc57 	bl	8005a78 <clear_lock>
#endif

	return FR_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3758      	adds	r7, #88	; 0x58
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	ffffaa55 	.word	0xffffaa55
 80071d8:	41615252 	.word	0x41615252
 80071dc:	61417272 	.word	0x61417272
 80071e0:	20004404 	.word	0x20004404

080071e4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d022      	beq.n	800723c <validate+0x58>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01d      	beq.n	800723c <validate+0x58>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007206:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <validate+0x58>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007214:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800721e:	429a      	cmp	r2, r3
 8007220:	d10c      	bne.n	800723c <validate+0x58>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007228:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe f983 	bl	8005538 <disk_status>
 8007232:	4603      	mov	r3, r0
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800723c:	2309      	movs	r3, #9
 800723e:	e000      	b.n	8007242 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800725e:	f107 0310 	add.w	r3, r7, #16
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fc48 	bl	8006af8 <get_ldnumber>
 8007268:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	da01      	bge.n	8007274 <f_mount+0x28>
 8007270:	230b      	movs	r3, #11
 8007272:	e02d      	b.n	80072d0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007274:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <f_mount+0x8c>)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007284:	69b8      	ldr	r0, [r7, #24]
 8007286:	f7fe fbf7 	bl	8005a78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	490d      	ldr	r1, [pc, #52]	; (80072d8 <f_mount+0x8c>)
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <f_mount+0x6a>
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d001      	beq.n	80072ba <f_mount+0x6e>
 80072b6:	2300      	movs	r3, #0
 80072b8:	e00a      	b.n	80072d0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80072ba:	f107 0108 	add.w	r1, r7, #8
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	2200      	movs	r2, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fcc5 	bl	8006c54 <find_volume>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20004400 	.word	0x20004400

080072dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80072ec:	6018      	str	r0, [r3, #0]
 80072ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80072f6:	6019      	str	r1, [r3, #0]
 80072f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072fc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007300:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007302:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007306:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <f_open+0x38>
 8007310:	2309      	movs	r3, #9
 8007312:	e257      	b.n	80077c4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8007314:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007318:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007328:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800732c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007330:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007334:	7812      	ldrb	r2, [r2, #0]
 8007336:	f002 021f 	and.w	r2, r2, #31
 800733a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800733c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007340:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	b2da      	uxtb	r2, r3
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	f107 0320 	add.w	r3, r7, #32
 8007354:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fc7b 	bl	8006c54 <find_volume>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007364:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 8229 	bne.w	80077c0 <f_open+0x4e4>
		INIT_BUF(dj);
 800736e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007372:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007376:	f107 0214 	add.w	r2, r7, #20
 800737a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800737e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007382:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	f107 0320 	add.w	r3, r7, #32
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fb44 	bl	8006a1c <follow_path>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800739a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80073a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073a6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80073aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d11d      	bne.n	80073ee <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80073b2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80073ba:	2306      	movs	r3, #6
 80073bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80073c0:	e015      	b.n	80073ee <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bf14      	ite	ne
 80073d4:	2301      	movne	r3, #1
 80073d6:	2300      	moveq	r3, #0
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	461a      	mov	r2, r3
 80073dc:	f107 0320 	add.w	r3, r7, #32
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe f9be 	bl	8005764 <chk_lock>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 031c 	and.w	r3, r3, #28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80e6 	beq.w	80075ce <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8007402:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d027      	beq.n	800745a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800740a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800740e:	2b04      	cmp	r3, #4
 8007410:	d10e      	bne.n	8007430 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007412:	f7fe fa13 	bl	800583c <enq_lock>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <f_open+0x14e>
 800741c:	f107 0320 	add.w	r3, r7, #32
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fa02 	bl	800682a <dir_register>
 8007426:	4603      	mov	r3, r0
 8007428:	e000      	b.n	800742c <f_open+0x150>
 800742a:	2312      	movs	r3, #18
 800742c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007430:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007434:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007438:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800743c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007440:	7812      	ldrb	r2, [r2, #0]
 8007442:	f042 0208 	orr.w	r2, r2, #8
 8007446:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007450:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007454:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007458:	e017      	b.n	800748a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800745a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800745e:	330b      	adds	r3, #11
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 0311 	and.w	r3, r3, #17
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <f_open+0x196>
					res = FR_DENIED;
 800746a:	2307      	movs	r3, #7
 800746c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007470:	e00b      	b.n	800748a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007472:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007476:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <f_open+0x1ae>
						res = FR_EXIST;
 8007484:	2308      	movs	r3, #8
 8007486:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800748a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800748e:	2b00      	cmp	r3, #0
 8007490:	f040 80c1 	bne.w	8007616 <f_open+0x33a>
 8007494:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007498:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80b7 	beq.w	8007616 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 80074a8:	f7fd ffa4 	bl	80053f4 <get_fattime>
 80074ac:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80074b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074b4:	330e      	adds	r3, #14
 80074b6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	0a1b      	lsrs	r3, r3, #8
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074cc:	330f      	adds	r3, #15
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80074d6:	0c1a      	lsrs	r2, r3, #16
 80074d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074dc:	3310      	adds	r3, #16
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80074e6:	0e1a      	lsrs	r2, r3, #24
 80074e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074ec:	3311      	adds	r3, #17
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80074f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074f6:	330b      	adds	r3, #11
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80074fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007500:	331c      	adds	r3, #28
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800750a:	331d      	adds	r3, #29
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007514:	331e      	adds	r3, #30
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800751e:	331f      	adds	r3, #31
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007528:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800752c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007530:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff f8d6 	bl	80066e6 <ld_clust>
 800753a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800753e:	2100      	movs	r1, #0
 8007540:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8007544:	f7ff f8fc 	bl	8006740 <st_clust>
				dj.fs->wflag = 1;
 8007548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800755a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800755e:	2b00      	cmp	r3, #0
 8007560:	d059      	beq.n	8007616 <f_open+0x33a>
					dw = dj.fs->winsect;
 8007562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007566:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800756a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800756e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007572:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8007576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800757e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007582:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe fdad 	bl	80060e6 <remove_chain>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8007592:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007596:	2b00      	cmp	r3, #0
 8007598:	d13d      	bne.n	8007616 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800759a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80075a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075a6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80075aa:	3a01      	subs	r2, #1
 80075ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80075b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80075b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075bc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe facc 	bl	8005b5e <move_window>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80075cc:	e023      	b.n	8007616 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80075ce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d11f      	bne.n	8007616 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80075d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80075da:	330b      	adds	r3, #11
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <f_open+0x312>
					res = FR_NO_FILE;
 80075e6:	2304      	movs	r3, #4
 80075e8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80075ec:	e013      	b.n	8007616 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80075ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <f_open+0x33a>
 8007600:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007604:	330b      	adds	r3, #11
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <f_open+0x33a>
						res = FR_DENIED;
 8007610:	2307      	movs	r3, #7
 8007612:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8007616:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800761a:	2b00      	cmp	r3, #0
 800761c:	d153      	bne.n	80076c6 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800761e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007622:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8007630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007634:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007638:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800763c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007640:	7812      	ldrb	r2, [r2, #0]
 8007642:	f042 0220 	orr.w	r2, r2, #32
 8007646:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007650:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007654:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007674:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800767c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	f107 0320 	add.w	r3, r7, #32
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe f8f3 	bl	8005884 <inc_lock>
 800769e:	4602      	mov	r2, r0
 80076a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80076ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <f_open+0x3ea>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80076c6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d178      	bne.n	80077c0 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80076ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076dc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80076e0:	7812      	ldrb	r2, [r2, #0]
 80076e2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80076e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80076f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076fa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80076fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007702:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe ffed 	bl	80066e6 <ld_clust>
 800770c:	4602      	mov	r2, r0
 800770e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007712:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800771c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007720:	331f      	adds	r3, #31
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800772a:	331e      	adds	r3, #30
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	4313      	orrs	r3, r2
 8007732:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007736:	321d      	adds	r2, #29
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	0212      	lsls	r2, r2, #8
 800773c:	4313      	orrs	r3, r2
 800773e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007742:	321c      	adds	r2, #28
 8007744:	7812      	ldrb	r2, [r2, #0]
 8007746:	431a      	orrs	r2, r3
 8007748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007756:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800775a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800776a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2200      	movs	r2, #0
 8007772:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800777a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800778e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007796:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80077a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077ae:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80077b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80077c0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b08c      	sub	sp, #48	; 0x30
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff fcfc 	bl	80071e4 <validate>
 80077ec:	4603      	mov	r3, r0
 80077ee:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80077f0:	7ffb      	ldrb	r3, [r7, #31]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <f_read+0x2c>
 80077f6:	7ffb      	ldrb	r3, [r7, #31]
 80077f8:	e150      	b.n	8007a9c <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800780a:	e147      	b.n	8007a9c <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800781a:	2307      	movs	r3, #7
 800781c:	e13e      	b.n	8007a9c <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	429a      	cmp	r2, r3
 8007834:	f240 812d 	bls.w	8007a92 <f_read+0x2c4>
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800783c:	e129      	b.n	8007a92 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007848:	2b00      	cmp	r3, #0
 800784a:	f040 80f2 	bne.w	8007a32 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007854:	0a5b      	lsrs	r3, r3, #9
 8007856:	b2da      	uxtb	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800785e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007862:	3b01      	subs	r3, #1
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4013      	ands	r3, r2
 8007868:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d139      	bne.n	80078e4 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007882:	e018      	b.n	80078b6 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007894:	4619      	mov	r1, r3
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7fe fd1c 	bl	80062d4 <clmt_clust>
 800789c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800789e:	e00a      	b.n	80078b6 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fa51 	bl	8005d56 <get_fat>
 80078b4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d805      	bhi.n	80078c8 <f_read+0xfa>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0e9      	b.n	8007a9c <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d105      	bne.n	80078dc <f_read+0x10e>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80078d8:	2301      	movs	r3, #1
 80078da:	e0df      	b.n	8007a9c <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fe fa0e 	bl	8005d14 <clust2sect>
 80078f8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d105      	bne.n	800790c <f_read+0x13e>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007908:	2302      	movs	r3, #2
 800790a:	e0c7      	b.n	8007a9c <f_read+0x2ce>
			sect += csect;
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4413      	add	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	0a5b      	lsrs	r3, r3, #9
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d046      	beq.n	80079ae <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007920:	7dfa      	ldrb	r2, [r7, #23]
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	4413      	add	r3, r2
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800792c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007930:	4293      	cmp	r3, r2
 8007932:	d908      	bls.n	8007946 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800793a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800793e:	461a      	mov	r2, r3
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800794c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	6a39      	ldr	r1, [r7, #32]
 8007956:	f7fd fe2f 	bl	80055b8 <disk_read>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007968:	2301      	movs	r3, #1
 800796a:	e097      	b.n	8007a9c <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d015      	beq.n	80079a6 <f_read+0x1d8>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	429a      	cmp	r2, r3
 8007988:	d90d      	bls.n	80079a6 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	025b      	lsls	r3, r3, #9
 8007996:	6a3a      	ldr	r2, [r7, #32]
 8007998:	4413      	add	r3, r2
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fd fe67 	bl	8005674 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80079ac:	e05b      	b.n	8007a66 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d037      	beq.n	8007a2a <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01d      	beq.n	8007a04 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80079da:	2301      	movs	r3, #1
 80079dc:	f7fd fe0c 	bl	80055f8 <disk_write>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80079ee:	2301      	movs	r3, #1
 80079f0:	e054      	b.n	8007a9c <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80079f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a0a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	2301      	movs	r3, #1
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	f7fd fdd0 	bl	80055b8 <disk_read>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a26:	2301      	movs	r3, #1
 8007a28:	e038      	b.n	8007a9c <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d901      	bls.n	8007a4e <f_read+0x280>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6a38      	ldr	r0, [r7, #32]
 8007a62:	f7fd fe07 	bl	8005674 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	4413      	add	r3, r2
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	441a      	add	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	441a      	add	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f47f aed2 	bne.w	800783e <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3730      	adds	r7, #48	; 0x30
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fb99 	bl	80071e4 <validate>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 80a8 	bne.w	8007c0e <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80a0 	beq.w	8007c0e <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d019      	beq.n	8007b10 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ae2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007aee:	2301      	movs	r3, #1
 8007af0:	f7fd fd82 	bl	80055f8 <disk_write>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007afa:	2301      	movs	r3, #1
 8007afc:	e088      	b.n	8007c10 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f7fe f81d 	bl	8005b5e <move_window>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d16f      	bne.n	8007c0e <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007b34:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	330b      	adds	r3, #11
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	330b      	adds	r3, #11
 8007b40:	f042 0220 	orr.w	r2, r2, #32
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	331c      	adds	r3, #28
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	331d      	adds	r3, #29
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b70:	0c1a      	lsrs	r2, r3, #16
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	331e      	adds	r3, #30
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b80:	0e1a      	lsrs	r2, r3, #24
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	331f      	adds	r3, #31
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b90:	4619      	mov	r1, r3
 8007b92:	6938      	ldr	r0, [r7, #16]
 8007b94:	f7fe fdd4 	bl	8006740 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007b98:	f7fd fc2c 	bl	80053f4 <get_fattime>
 8007b9c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3316      	adds	r3, #22
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	0a1b      	lsrs	r3, r3, #8
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3317      	adds	r3, #23
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	0c1a      	lsrs	r2, r3, #16
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	3318      	adds	r3, #24
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	0e1a      	lsrs	r2, r3, #24
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	3319      	adds	r3, #25
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3312      	adds	r3, #18
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3313      	adds	r3, #19
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007be6:	f023 0320 	bic.w	r3, r3, #32
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fd ffd8 	bl	8005bba <sync_fs>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff ff3f 	bl	8007aa4 <f_sync>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d116      	bne.n	8007c5e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fad7 	bl	80071e4 <validate>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10e      	bne.n	8007c5e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd fed2 	bl	80059f0 <dec_lock>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007c7e:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c80:	7a5b      	ldrb	r3, [r3, #9]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d831      	bhi.n	8007cec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c88:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c8a:	7a5b      	ldrb	r3, [r3, #9]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c92:	2100      	movs	r1, #0
 8007c94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c98:	7a5b      	ldrb	r3, [r3, #9]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007ca6:	4b14      	ldr	r3, [pc, #80]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007ca8:	7a5b      	ldrb	r3, [r3, #9]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	79fa      	ldrb	r2, [r7, #7]
 8007cb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007cb8:	7a5b      	ldrb	r3, [r3, #9]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	b2d1      	uxtb	r1, r2
 8007cc0:	4a0d      	ldr	r2, [pc, #52]	; (8007cf8 <FATFS_LinkDriverEx+0x90>)
 8007cc2:	7251      	strb	r1, [r2, #9]
 8007cc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cc6:	7dbb      	ldrb	r3, [r7, #22]
 8007cc8:	3330      	adds	r3, #48	; 0x30
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	223a      	movs	r2, #58	; 0x3a
 8007cd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3302      	adds	r3, #2
 8007cdc:	222f      	movs	r2, #47	; 0x2f
 8007cde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3303      	adds	r3, #3
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr
 8007cf8:	20004420 	.word	0x20004420

08007cfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d06:	2200      	movs	r2, #0
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ffac 	bl	8007c68 <FATFS_LinkDriverEx>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <SD_initialize+0x38>)
 8007d28:	2201      	movs	r2, #1
 8007d2a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8007d2c:	f7fd fb6a 	bl	8005404 <BSP_SD_Init>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d107      	bne.n	8007d46 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <SD_initialize+0x38>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f023 0301 	bic.w	r3, r3, #1
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	4b04      	ldr	r3, [pc, #16]	; (8007d54 <SD_initialize+0x38>)
 8007d44:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007d46:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <SD_initialize+0x38>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b2db      	uxtb	r3, r3
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	2000005d 	.word	0x2000005d

08007d58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007d62:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <SD_status+0x38>)
 8007d64:	2201      	movs	r2, #1
 8007d66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007d68:	f7fd fba0 	bl	80054ac <BSP_SD_GetCardState>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007d72:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <SD_status+0x38>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f023 0301 	bic.w	r3, r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <SD_status+0x38>)
 8007d80:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <SD_status+0x38>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2db      	uxtb	r3, r3
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	2000005d 	.word	0x2000005d

08007d94 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8007da8:	4b0f      	ldr	r3, [pc, #60]	; (8007de8 <SD_read+0x54>)
 8007daa:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8007dac:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <SD_read+0x58>)
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	68b8      	ldr	r0, [r7, #8]
 8007db4:	f7fd fb3e 	bl	8005434 <BSP_SD_ReadBlocks>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10e      	bne.n	8007ddc <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007dbe:	e006      	b.n	8007dce <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1e5a      	subs	r2, r3, #1
 8007dc4:	613a      	str	r2, [r7, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <SD_read+0x3a>
      {
        return RES_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e007      	b.n	8007dde <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007dce:	f7fd fb6d 	bl	80054ac <BSP_SD_GetCardState>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1f3      	bne.n	8007dc0 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	000186a0 	.word	0x000186a0
 8007dec:	05f5e100 	.word	0x05f5e100

08007df0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <SD_write+0x54>)
 8007e06:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8007e08:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <SD_write+0x58>)
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	68b8      	ldr	r0, [r7, #8]
 8007e10:	f7fd fb2e 	bl	8005470 <BSP_SD_WriteBlocks>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10e      	bne.n	8007e38 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007e1a:	e006      	b.n	8007e2a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	613a      	str	r2, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <SD_write+0x3a>
      {
        return RES_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e007      	b.n	8007e3a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007e2a:	f7fd fb3f 	bl	80054ac <BSP_SD_GetCardState>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f3      	bne.n	8007e1c <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	000186a0 	.word	0x000186a0
 8007e48:	05f5e100 	.word	0x05f5e100

08007e4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08c      	sub	sp, #48	; 0x30
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	603a      	str	r2, [r7, #0]
 8007e56:	71fb      	strb	r3, [r7, #7]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e62:	4b24      	ldr	r3, [pc, #144]	; (8007ef4 <SD_ioctl+0xa8>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <SD_ioctl+0x28>
 8007e70:	2303      	movs	r3, #3
 8007e72:	e03b      	b.n	8007eec <SD_ioctl+0xa0>
  
  switch (cmd)
 8007e74:	79bb      	ldrb	r3, [r7, #6]
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d833      	bhi.n	8007ee2 <SD_ioctl+0x96>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <SD_ioctl+0x34>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007e91 	.word	0x08007e91
 8007e84:	08007e99 	.word	0x08007e99
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007ecb 	.word	0x08007ecb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007e96:	e027      	b.n	8007ee8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007e98:	f107 030c 	add.w	r3, r7, #12
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd fb15 	bl	80054cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007eae:	e01b      	b.n	8007ee8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007eb0:	f107 030c 	add.w	r3, r7, #12
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fd fb09 	bl	80054cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007ec8:	e00e      	b.n	8007ee8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd fafc 	bl	80054cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8007ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007ee0:	e002      	b.n	8007ee8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8007ee2:	2304      	movs	r3, #4
 8007ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8007ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3730      	adds	r7, #48	; 0x30
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	2000005d 	.word	0x2000005d

08007ef8 <__libc_init_array>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	2600      	movs	r6, #0
 8007efc:	4d0c      	ldr	r5, [pc, #48]	; (8007f30 <__libc_init_array+0x38>)
 8007efe:	4c0d      	ldr	r4, [pc, #52]	; (8007f34 <__libc_init_array+0x3c>)
 8007f00:	1b64      	subs	r4, r4, r5
 8007f02:	10a4      	asrs	r4, r4, #2
 8007f04:	42a6      	cmp	r6, r4
 8007f06:	d109      	bne.n	8007f1c <__libc_init_array+0x24>
 8007f08:	f000 f832 	bl	8007f70 <_init>
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	4d0a      	ldr	r5, [pc, #40]	; (8007f38 <__libc_init_array+0x40>)
 8007f10:	4c0a      	ldr	r4, [pc, #40]	; (8007f3c <__libc_init_array+0x44>)
 8007f12:	1b64      	subs	r4, r4, r5
 8007f14:	10a4      	asrs	r4, r4, #2
 8007f16:	42a6      	cmp	r6, r4
 8007f18:	d105      	bne.n	8007f26 <__libc_init_array+0x2e>
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f20:	4798      	blx	r3
 8007f22:	3601      	adds	r6, #1
 8007f24:	e7ee      	b.n	8007f04 <__libc_init_array+0xc>
 8007f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2a:	4798      	blx	r3
 8007f2c:	3601      	adds	r6, #1
 8007f2e:	e7f2      	b.n	8007f16 <__libc_init_array+0x1e>
 8007f30:	08008150 	.word	0x08008150
 8007f34:	08008150 	.word	0x08008150
 8007f38:	08008150 	.word	0x08008150
 8007f3c:	08008154 	.word	0x08008154

08007f40 <memcmp>:
 8007f40:	b510      	push	{r4, lr}
 8007f42:	3901      	subs	r1, #1
 8007f44:	4402      	add	r2, r0
 8007f46:	4290      	cmp	r0, r2
 8007f48:	d101      	bne.n	8007f4e <memcmp+0xe>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e005      	b.n	8007f5a <memcmp+0x1a>
 8007f4e:	7803      	ldrb	r3, [r0, #0]
 8007f50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	d001      	beq.n	8007f5c <memcmp+0x1c>
 8007f58:	1b18      	subs	r0, r3, r4
 8007f5a:	bd10      	pop	{r4, pc}
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	e7f2      	b.n	8007f46 <memcmp+0x6>

08007f60 <memset>:
 8007f60:	4603      	mov	r3, r0
 8007f62:	4402      	add	r2, r0
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d100      	bne.n	8007f6a <memset+0xa>
 8007f68:	4770      	bx	lr
 8007f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6e:	e7f9      	b.n	8007f64 <memset+0x4>

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	bf00      	nop
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
